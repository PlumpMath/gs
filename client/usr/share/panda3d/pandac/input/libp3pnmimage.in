1448427435
2 3
13 libp3pnmimage 4 BCNh 12 panda3d.core 
287
344 5 pixel 0 4 631 12 pixel::pixel 0 2 1 2 0
57
pixel::pixel(void);
pixel::pixel(gray r, gray g, gray b);

345 4 size 0 4 631 11 pixel::size 0 1 3 0
29
static int pixel::size(void);

346 11 operator [] 0 4 631 18 pixel::operator [] 0 2 4 5 0
70
gray pixel::operator [](int i) const;
gray &pixel::operator [](int i);

347 10 operator + 0 4 631 17 pixel::operator + 0 1 6 0
50
pixel pixel::operator +(pixel const &other) const;

348 10 operator - 0 4 631 17 pixel::operator - 0 1 7 0
50
pixel pixel::operator -(pixel const &other) const;

349 10 operator * 0 4 631 17 pixel::operator * 0 1 8 0
49
pixel pixel::operator *(double const mult) const;

350 11 operator += 0 4 631 18 pixel::operator += 0 1 9 0
44
void pixel::operator +=(pixel const &other);

351 11 operator -= 0 4 631 18 pixel::operator -= 0 1 10 0
44
void pixel::operator -=(pixel const &other);

352 11 operator *= 0 4 631 18 pixel::operator *= 0 1 11 0
43
void pixel::operator *=(double const mult);

353 6 output 0 4 631 13 pixel::output 0 1 12 0
33
void pixel::output(ostream &out);

354 5 get_b 0 20 631 12 pixel::get_b 0 1 14 25
getter for gray pixel::b;
30
gray pixel::get_b(void) const;

355 5 set_b 0 36 631 12 pixel::set_b 0 1 13 25
setter for gray pixel::b;
30
void pixel::set_b(gray value);

356 5 get_g 0 20 631 12 pixel::get_g 0 1 16 25
getter for gray pixel::g;
30
gray pixel::get_g(void) const;

357 5 set_g 0 36 631 12 pixel::set_g 0 1 15 25
setter for gray pixel::g;
30
void pixel::set_g(gray value);

358 5 get_r 0 20 631 12 pixel::get_r 0 1 18 25
getter for gray pixel::r;
30
gray pixel::get_r(void) const;

359 5 set_r 0 36 631 12 pixel::set_r 0 1 17 25
setter for gray pixel::r;
30
void pixel::set_r(gray value);

360 6 ~pixel 0 4 631 13 pixel::~pixel 0 0 0
20
pixel::~pixel(void);

361 8 get_name 0 6 635 21 PNMFileType::get_name 0 1 19 0
53
virtual string PNMFileType::get_name(void) const = 0;

362 18 get_num_extensions 0 6 635 31 PNMFileType::get_num_extensions 0 1 20 360
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_num_extensions
//       Access: Published, Virtual
//  Description: Returns the number of different possible filename
//               extensions associated with this particular file type.
////////////////////////////////////////////////////////////////////
56
virtual int PNMFileType::get_num_extensions(void) const;

363 13 get_extension 0 6 635 26 PNMFileType::get_extension 0 1 21 378
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_extension
//       Access: Published, Virtual
//  Description: Returns the nth possible filename extension
//               associated with this particular file type, without a
//               leading dot.
////////////////////////////////////////////////////////////////////
55
virtual string PNMFileType::get_extension(int n) const;

364 23 get_suggested_extension 0 6 635 36 PNMFileType::get_suggested_extension 0 1 22 424
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_suggested_extension
//       Access: Published, Virtual
//  Description: Returns a suitable filename extension (without a
//               leading dot) to suggest for files of this type, or
//               empty string if no suggestions are available.
////////////////////////////////////////////////////////////////////
64
virtual string PNMFileType::get_suggested_extension(void) const;

365 14 get_class_type 0 4 635 27 PNMFileType::get_class_type 0 1 23 0
52
static TypeHandle PNMFileType::get_class_type(void);

366 20 ~PNMFileTypeRegistry 0 4 637 41 PNMFileTypeRegistry::~PNMFileTypeRegistry 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
PNMFileTypeRegistry::~PNMFileTypeRegistry(void);

367 13 get_num_types 0 4 637 34 PNMFileTypeRegistry::get_num_types 0 1 24 279
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
////////////////////////////////////////////////////////////////////
51
int PNMFileTypeRegistry::get_num_types(void) const;

368 8 get_type 0 4 637 29 PNMFileTypeRegistry::get_type 0 1 25 261
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
////////////////////////////////////////////////////////////////////
56
PNMFileType *PNMFileTypeRegistry::get_type(int n) const;

369 23 get_type_from_extension 0 4 637 44 PNMFileTypeRegistry::get_type_from_extension 0 1 26 481
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               extension.  Returns a suitable PNMFileType pointer,
//               or NULL if no type can be determined.
////////////////////////////////////////////////////////////////////
88
PNMFileType *PNMFileTypeRegistry::get_type_from_extension(string const &filename) const;

370 26 get_type_from_magic_number 0 4 637 47 PNMFileTypeRegistry::get_type_from_magic_number 0 1 27 544
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_magic_number
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               magic number, the first two bytes read from the
//               file.  Returns a suitable PNMFileType pointer, or
//               NULL if no type can be determined.
////////////////////////////////////////////////////////////////////
95
PNMFileType *PNMFileTypeRegistry::get_type_from_magic_number(string const &magic_number) const;

371 18 get_type_by_handle 0 4 637 39 PNMFileTypeRegistry::get_type_by_handle 0 1 28 444
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_by_handle
//       Access: Published
//  Description: Returns the PNMFileType instance stored in the
//               registry for the given TypeHandle, e.g. as retrieved
//               by a previous call to get_type() on the type
//               instance.
////////////////////////////////////////////////////////////////////
78
PNMFileType *PNMFileTypeRegistry::get_type_by_handle(TypeHandle handle) const;

372 5 write 0 4 637 26 PNMFileTypeRegistry::write 0 1 29 332
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported image file types to the
//               indicated output stream, one per line.
////////////////////////////////////////////////////////////////////
74
void PNMFileTypeRegistry::write(ostream &out, int indent_level = 0) const;

373 14 get_global_ptr 0 4 637 35 PNMFileTypeRegistry::get_global_ptr 0 1 30 319
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global PNMFileTypeRegistry
//               object.
////////////////////////////////////////////////////////////////////
70
static PNMFileTypeRegistry *PNMFileTypeRegistry::get_global_ptr(void);

374 14 PNMImageHeader 0 4 638 30 PNMImageHeader::PNMImageHeader 0 2 31 32 459
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
111
inline PNMImageHeader::PNMImageHeader(void);
inline PNMImageHeader::PNMImageHeader(PNMImageHeader const &copy);

375 10 operator = 0 4 638 26 PNMImageHeader::operator = 0 1 33 0
67
inline void PNMImageHeader::operator =(PNMImageHeader const &copy);

376 15 ~PNMImageHeader 0 4 638 31 PNMImageHeader::~PNMImageHeader 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline PNMImageHeader::~PNMImageHeader(void);

377 14 get_color_type 0 4 638 30 PNMImageHeader::get_color_type 0 1 34 397
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_type
//       Access: Published
//  Description: Returns the image type of the image, as an enumerated
//               value.  This is really just the number of channels
//               cast to the enumerated type.
////////////////////////////////////////////////////////////////////
76
inline PNMImageHeader::ColorType PNMImageHeader::get_color_type(void) const;

378 16 get_num_channels 0 4 638 32 PNMImageHeader::get_num_channels 0 1 35 276
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_num_channels
//       Access: Published
//  Description: Returns the number of channels in the image.
////////////////////////////////////////////////////////////////////
56
inline int PNMImageHeader::get_num_channels(void) const;

379 12 is_grayscale 0 4 638 28 PNMImageHeader::is_grayscale 0 2 36 37 948
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published, Static
//  Description: This static variant of is_grayscale() returns true if
//               the indicated image type represents a grayscale
//               image, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published
//  Description: Returns false if the image is a full-color image, and
//               has red, green, and blue components; true if it is a
//               grayscale image and has only a gray component.  (The
//               gray color is actually stored in the blue channel,
//               and the red and green channels are ignored.)
////////////////////////////////////////////////////////////////////
140
static inline bool PNMImageHeader::is_grayscale(PNMImageHeader::ColorType color_type);
inline bool PNMImageHeader::is_grayscale(void) const;

380 9 has_alpha 0 4 638 25 PNMImageHeader::has_alpha 0 2 38 39 852
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published, Static
//  Description: This static variant of has_alpha() returns true if
//               the indicated image type includes an alpha channel,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published
//  Description: Returns true if the image includes an alpha channel,
//               false otherwise.  Unlike is_grayscale(), if this
//               returns false it is an error to call any of the
//               functions accessing the alpha channel.
////////////////////////////////////////////////////////////////////
134
static inline bool PNMImageHeader::has_alpha(PNMImageHeader::ColorType color_type);
inline bool PNMImageHeader::has_alpha(void) const;

381 10 get_maxval 0 4 638 26 PNMImageHeader::get_maxval 0 1 40 443
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_maxval
//       Access: Published
//  Description: Returns the maximum channel value allowable for any
//               pixel in this image; for instance, 255 for a typical
//               8-bit-per-channel image.  A pixel with this value is
//               full on.
////////////////////////////////////////////////////////////////////
53
inline xelval PNMImageHeader::get_maxval(void) const;

382 15 get_color_space 0 4 638 31 PNMImageHeader::get_color_space 0 1 41 331
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_space
//       Access: Published
//  Description: Returns the color space that the image is encoded
//               in, or CS_unspecified if unknown.
////////////////////////////////////////////////////////////////////
62
inline ColorSpace PNMImageHeader::get_color_space(void) const;

383 10 get_x_size 0 4 638 26 PNMImageHeader::get_x_size 0 1 42 366
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_x_size
//       Access: Published
//  Description: Returns the number of pixels in the X direction.
//               This is one more than the largest allowable X
//               coordinate.
////////////////////////////////////////////////////////////////////
50
inline int PNMImageHeader::get_x_size(void) const;

384 10 get_y_size 0 4 638 26 PNMImageHeader::get_y_size 0 1 43 366
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_y_size
//       Access: Published
//  Description: Returns the number of pixels in the Y direction.
//               This is one more than the largest allowable Y
//               coordinate.
////////////////////////////////////////////////////////////////////
50
inline int PNMImageHeader::get_y_size(void) const;

385 11 get_comment 0 4 638 27 PNMImageHeader::get_comment 0 1 44 263
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_comment
//       Access: Published
//  Description: Gets the user comment from the file.
////////////////////////////////////////////////////////////////////
54
inline string PNMImageHeader::get_comment(void) const;

386 11 set_comment 0 4 638 27 PNMImageHeader::set_comment 0 1 45 278
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_comment
//       Access: Published
//  Description: Writes a user comment string to the image (header).
////////////////////////////////////////////////////////////////////
63
inline void PNMImageHeader::set_comment(string const &comment);

387 8 has_type 0 4 638 24 PNMImageHeader::has_type 0 1 46 315
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_type
//       Access: Published
//  Description: Returns true if the PNMImageHeader knows what type it
//               is, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool PNMImageHeader::has_type(void) const;

388 8 get_type 0 4 638 24 PNMImageHeader::get_type 0 1 47 373
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_type
//       Access: Published
//  Description: If the file type is known (e.g. has_type() returns
//               true), returns its PNMFileType pointer; otherwise,
//               returns NULL.
////////////////////////////////////////////////////////////////////
57
inline PNMFileType *PNMImageHeader::get_type(void) const;

389 8 set_type 0 4 638 24 PNMImageHeader::set_type 0 1 48 583
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_type
//       Access: Published
//  Description: Sets the file type of this PNMImage.  This will be
//               the default type used when an image is read, if the
//               type cannot be determined by magic number or inferred
//               by extension, or the type used when the image is
//               written, if the type cannot be inferred from the
//               filename extension.
////////////////////////////////////////////////////////////////////
56
inline void PNMImageHeader::set_type(PNMFileType *type);

390 11 read_header 0 4 638 27 PNMImageHeader::read_header 0 2 49 50 1214
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
249
bool PNMImageHeader::read_header(Filename const &filename, PNMFileType *type = 0, bool report_unknown_type = 1);
bool PNMImageHeader::read_header(istream &data, string const &filename = string(), PNMFileType *type = 0, bool report_unknown_type = 1);

391 11 make_reader 0 4 638 27 PNMImageHeader::make_reader 0 2 51 52 2105
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////
329
PNMReader *PNMImageHeader::make_reader(Filename const &filename, PNMFileType *type = 0, bool report_unknown_type = 1) const;
PNMReader *PNMImageHeader::make_reader(istream *file, bool owns_file = 1, Filename const &filename = Filename(), string magic_number = string(), PNMFileType *type = 0, bool report_unknown_type = 1) const;

392 11 make_writer 0 4 638 27 PNMImageHeader::make_writer 0 2 53 54 1861
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing an image to the indicated filename,
//               or NULL if the filename cannot be written for some
//               reason.  The filename "-" always stands for standard
//               output.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////
237
PNMWriter *PNMImageHeader::make_writer(Filename const &filename, PNMFileType *type = 0) const;
PNMWriter *PNMImageHeader::make_writer(ostream *file, bool owns_file = 1, Filename const &filename = Filename(), PNMFileType *type = 0) const;

393 17 read_magic_number 0 4 638 33 PNMImageHeader::read_magic_number 0 1 55 602
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_magic_number
//       Access: Published, Static
//  Description: Ensures that the first n bytes of the file are read
//               into magic_number.  If magic_number is initially
//               nonempty, assumes these represent the first few bytes
//               already extracted.  Returns true if successful, false
//               if an end of file or error occurred before num_bytes
//               could be read.
////////////////////////////////////////////////////////////////////
98
static bool PNMImageHeader::read_magic_number(istream *file, string &magic_number, int num_bytes);

394 6 output 0 4 638 22 PNMImageHeader::output 0 1 56 221
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
void PNMImageHeader::output(ostream &out) const;

395 9 PixelSpec 0 4 640 36 PNMImageHeader::PixelSpec::PixelSpec 0 7 57 58 59 60 61 62 63 1683
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
543
inline PNMImageHeader::PixelSpec::PixelSpec(xelval gray_value);
inline PNMImageHeader::PixelSpec::PixelSpec(xelval gray_value, xelval alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(xelval red, xelval green, xelval blue);
inline PNMImageHeader::PixelSpec::PixelSpec(xelval red, xelval green, xelval blue, xelval alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(xel const &rgb);
inline PNMImageHeader::PixelSpec::PixelSpec(xel const &rgb, xelval alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(PNMImageHeader::PixelSpec const &copy);

396 10 operator = 0 4 640 37 PNMImageHeader::PixelSpec::operator = 0 1 64 0
89
inline void PNMImageHeader::PixelSpec::operator =(PNMImageHeader::PixelSpec const &copy);

397 10 operator < 0 4 640 37 PNMImageHeader::PixelSpec::operator < 0 1 65 0
96
inline bool PNMImageHeader::PixelSpec::operator <(PNMImageHeader::PixelSpec const &other) const;

398 11 operator == 0 4 640 38 PNMImageHeader::PixelSpec::operator == 0 1 66 0
97
inline bool PNMImageHeader::PixelSpec::operator ==(PNMImageHeader::PixelSpec const &other) const;

399 11 operator != 0 4 640 38 PNMImageHeader::PixelSpec::operator != 0 1 67 0
97
inline bool PNMImageHeader::PixelSpec::operator !=(PNMImageHeader::PixelSpec const &other) const;

400 10 compare_to 0 4 640 37 PNMImageHeader::PixelSpec::compare_to 0 1 68 237
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::compare_to
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
95
inline int PNMImageHeader::PixelSpec::compare_to(PNMImageHeader::PixelSpec const &other) const;

401 7 get_red 0 4 640 34 PNMImageHeader::PixelSpec::get_red 0 1 69 234
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_red
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline xelval PNMImageHeader::PixelSpec::get_red(void) const;

402 9 get_green 0 4 640 36 PNMImageHeader::PixelSpec::get_green 0 1 70 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_green
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline xelval PNMImageHeader::PixelSpec::get_green(void) const;

403 8 get_blue 0 4 640 35 PNMImageHeader::PixelSpec::get_blue 0 1 71 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_blue
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline xelval PNMImageHeader::PixelSpec::get_blue(void) const;

404 9 get_alpha 0 4 640 36 PNMImageHeader::PixelSpec::get_alpha 0 1 72 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_alpha
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline xelval PNMImageHeader::PixelSpec::get_alpha(void) const;

405 7 set_red 0 4 640 34 PNMImageHeader::PixelSpec::set_red 0 1 73 234
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_red
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void PNMImageHeader::PixelSpec::set_red(xelval red);

406 9 set_green 0 4 640 36 PNMImageHeader::PixelSpec::set_green 0 1 74 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_green
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void PNMImageHeader::PixelSpec::set_green(xelval green);

407 8 set_blue 0 4 640 35 PNMImageHeader::PixelSpec::set_blue 0 1 75 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_blue
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void PNMImageHeader::PixelSpec::set_blue(xelval blue);

408 9 set_alpha 0 4 640 36 PNMImageHeader::PixelSpec::set_alpha 0 1 76 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_alpha
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void PNMImageHeader::PixelSpec::set_alpha(xelval alpha);

409 11 operator [] 0 4 640 38 PNMImageHeader::PixelSpec::operator [] 0 1 77 0
66
inline xelval PNMImageHeader::PixelSpec::operator [](int n) const;

410 4 size 0 4 640 31 PNMImageHeader::PixelSpec::size 0 1 78 394
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::size
//       Access: Published, Static
//  Description: Specifies the number of components in the PixelSpec;
//               this is always 4, regardless of the type of image it
//               was taken from.
////////////////////////////////////////////////////////////////////
56
static inline int PNMImageHeader::PixelSpec::size(void);

411 6 output 0 4 640 33 PNMImageHeader::PixelSpec::output 0 1 79 230
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
void PNMImageHeader::PixelSpec::output(ostream &out) const;

412 10 ~PixelSpec 0 4 640 37 PNMImageHeader::PixelSpec::~PixelSpec 0 0 0
44
PNMImageHeader::PixelSpec::~PixelSpec(void);

413 15 ~PixelSpecCount 0 4 641 47 PNMImageHeader::PixelSpecCount::~PixelSpecCount 0 0 0
54
PNMImageHeader::PixelSpecCount::~PixelSpecCount(void);

414 9 Histogram 0 4 648 36 PNMImageHeader::Histogram::Histogram 0 1 80 238
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
inline PNMImageHeader::Histogram::Histogram(void);

415 14 get_num_pixels 0 4 648 41 PNMImageHeader::Histogram::get_num_pixels 0 1 81 317
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_num_pixels
//       Access: Published
//  Description: Returns the number of unique pixel colors in the
//               histogram.
////////////////////////////////////////////////////////////////////
65
inline int PNMImageHeader::Histogram::get_num_pixels(void) const;

416 9 get_pixel 0 4 648 36 PNMImageHeader::Histogram::get_pixel 0 1 82 385
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_pixel
//       Access: Published
//  Description: Returns the nth unique pixel color in the histogram.
//               These are ordered by default from most common to
//               least common.
////////////////////////////////////////////////////////////////////
90
inline PNMImageHeader::PixelSpec const &PNMImageHeader::Histogram::get_pixel(int n) const;

417 9 get_count 0 4 648 36 PNMImageHeader::Histogram::get_count 0 2 83 84 678
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               nth unique pixel color in the histogram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               indicated pixel color.
////////////////////////////////////////////////////////////////////
156
inline int PNMImageHeader::Histogram::get_count(int n) const;
inline int PNMImageHeader::Histogram::get_count(PNMImageHeader::PixelSpec const &pixel) const;

418 5 write 0 4 648 32 PNMImageHeader::Histogram::write 0 1 85 229
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
58
void PNMImageHeader::Histogram::write(ostream &out) const;

419 10 ~Histogram 0 4 648 37 PNMImageHeader::Histogram::~Histogram 0 0 0
44
PNMImageHeader::Histogram::~Histogram(void);

420 7 PfmFile 0 4 649 16 PfmFile::PfmFile 0 2 86 87 445
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
PfmFile::PfmFile(void);
PfmFile::PfmFile(PfmFile const &copy);

421 10 operator = 0 4 649 19 PfmFile::operator = 0 1 88 0
46
void PfmFile::operator =(PfmFile const &copy);

422 5 clear 0 4 649 14 PfmFile::clear 0 2 89 90 703
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Eliminates all data in the file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Resets to an empty table with a specific size.  The
//               case of num_channels == 0 is allowed only in the case
//               that x_size and y_size are also == 0; and this makes
//               an empty (and invalid) PfmFile.
////////////////////////////////////////////////////////////////////
89
void PfmFile::clear(void);
void PfmFile::clear(int x_size, int y_size, int num_channels);

423 4 read 0 4 649 13 PfmFile::read 0 3 91 92 93 1383
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated file, returning
//               true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated stream,
//               returning true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data using the indicated PNMReader.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
156
bool PfmFile::read(Filename const &fullpath);
bool PfmFile::read(istream &in, Filename const &fullpath = Filename());
bool PfmFile::read(PNMReader *reader);

424 5 write 0 4 649 14 PfmFile::write 0 3 94 95 96 1290
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated file, returning
//               true on success, false on failure.
//
//               If the type implied by the filename extension
//               supports floating-point, the data will be written
//               directly; otherwise, the floating-point data will be
//               quietly converted to the appropriate integer type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated stream,
//               returning true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data using the indicated PNMWriter.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
160
bool PfmFile::write(Filename const &fullpath);
bool PfmFile::write(ostream &out, Filename const &fullpath = Filename());
bool PfmFile::write(PNMWriter *writer);

425 4 load 0 4 649 13 PfmFile::load 0 1 97 326
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::load
//       Access: Published
//  Description: Fills the PfmFile with the data from the indicated
//               PNMImage, converted to floating-point values.
////////////////////////////////////////////////////////////////////
45
bool PfmFile::load(PNMImage const &pnmimage);

426 5 store 0 4 649 14 PfmFile::store 0 1 98 299
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store
//       Access: Published
//  Description: Copies the data to the indicated PNMImage, converting
//               to RGB values.
////////////////////////////////////////////////////////////////////
46
bool PfmFile::store(PNMImage &pnmimage) const;

427 10 store_mask 0 4 649 19 PfmFile::store_mask 0 1 99 433
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store_mask
//       Access: Published
//  Description: Stores 1 or 0 values into the indicated PNMImage,
//               according to has_point() for each pixel.  Each valid
//               point gets a 1 value; each nonexistent point gets a 0
//               value.
////////////////////////////////////////////////////////////////////
51
bool PfmFile::store_mask(PNMImage &pnmimage) const;

428 8 is_valid 0 4 649 17 PfmFile::is_valid 0 1 100 217
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_valid
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
42
inline bool PfmFile::is_valid(void) const;

429 9 get_scale 0 4 649 18 PfmFile::get_scale 0 1 101 305
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
////////////////////////////////////////////////////////////////////
49
inline PN_float32 PfmFile::get_scale(void) const;

430 9 set_scale 0 4 649 18 PfmFile::set_scale 0 1 102 305
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
////////////////////////////////////////////////////////////////////
49
inline void PfmFile::set_scale(PN_float32 scale);

431 9 has_point 0 4 649 18 PfmFile::has_point 0 1 103 457
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_point
//       Access: Published
//  Description: Returns true if there is a valid point at x, y.  This
//               always returns true unless a "no data" value has been
//               set, in which case it returns false if the point at
//               x, y is the "no data" value.
////////////////////////////////////////////////////////////////////
51
inline bool PfmFile::has_point(int x, int y) const;

432 11 get_channel 0 4 649 20 PfmFile::get_channel 0 1 104 303
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_channel
//       Access: Published
//  Description: Returns the cth channel of the point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
66
inline PN_float32 PfmFile::get_channel(int x, int y, int c) const;

433 11 set_channel 0 4 649 20 PfmFile::set_channel 0 1 105 304
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_channel
//       Access: Published
//  Description: Replaces the cth channel of the point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
72
inline void PfmFile::set_channel(int x, int y, int c, PN_float32 value);

434 10 get_point1 0 4 649 19 PfmFile::get_point1 0 1 106 295
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point1
//       Access: Published
//  Description: Returns the 1-component point value at the indicated
//               point.
////////////////////////////////////////////////////////////////////
58
inline PN_float32 PfmFile::get_point1(int x, int y) const;

435 10 set_point1 0 4 649 19 PfmFile::set_point1 0 1 107 296
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point1
//       Access: Published
//  Description: Replaces the 1-component point value at the indicated
//               point.
////////////////////////////////////////////////////////////////////
64
inline void PfmFile::set_point1(int x, int y, PN_float32 point);

436 10 get_point2 0 4 649 19 PfmFile::get_point2 0 1 108 376
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point2
//       Access: Published
//  Description: Returns the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
63
inline LPoint2f const &PfmFile::get_point2(int x, int y) const;

437 10 set_point2 0 4 649 19 PfmFile::set_point2 0 2 109 110 756
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
143
inline void PfmFile::set_point2(int x, int y, LVecBase2f const &point);
inline void PfmFile::set_point2(int x, int y, LVecBase2d const &point);

438 13 modify_point2 0 4 649 22 PfmFile::modify_point2 0 1 111 307
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point2
//       Access: Published
//  Description: Returns a modifiable 2-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
54
inline LPoint2f &PfmFile::modify_point2(int x, int y);

439 9 get_point 0 4 649 18 PfmFile::get_point 0 1 112 375
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
62
inline LPoint3f const &PfmFile::get_point(int x, int y) const;

440 9 set_point 0 4 649 18 PfmFile::set_point 0 2 113 114 754
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
141
inline void PfmFile::set_point(int x, int y, LVecBase3f const &point);
inline void PfmFile::set_point(int x, int y, LVecBase3d const &point);

441 12 modify_point 0 4 649 21 PfmFile::modify_point 0 1 115 306
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
53
inline LPoint3f &PfmFile::modify_point(int x, int y);

442 10 get_point3 0 4 649 19 PfmFile::get_point3 0 1 116 376
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point3
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
63
inline LPoint3f const &PfmFile::get_point3(int x, int y) const;

443 10 set_point3 0 4 649 19 PfmFile::set_point3 0 2 117 118 756
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
143
inline void PfmFile::set_point3(int x, int y, LVecBase3f const &point);
inline void PfmFile::set_point3(int x, int y, LVecBase3d const &point);

444 13 modify_point3 0 4 649 22 PfmFile::modify_point3 0 1 119 307
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point3
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f &PfmFile::modify_point3(int x, int y);

445 10 get_point4 0 4 649 19 PfmFile::get_point4 0 1 120 376
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point4
//       Access: Published
//  Description: Returns the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
63
inline LPoint4f const &PfmFile::get_point4(int x, int y) const;

446 10 set_point4 0 4 649 19 PfmFile::set_point4 0 2 121 122 756
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
143
inline void PfmFile::set_point4(int x, int y, LVecBase4f const &point);
inline void PfmFile::set_point4(int x, int y, LVecBase4d const &point);

447 13 modify_point4 0 4 649 22 PfmFile::modify_point4 0 1 123 307
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point4
//       Access: Published
//  Description: Returns a modifiable 4-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
54
inline LPoint4f &PfmFile::modify_point4(int x, int y);

448 4 fill 0 4 649 13 PfmFile::fill 0 4 124 125 126 127 1030
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////
187
inline void PfmFile::fill(PN_float32 value);
inline void PfmFile::fill(LPoint2f const &value);
inline void PfmFile::fill(LPoint3f const &value);
void PfmFile::fill(LPoint4f const &value);

449 8 fill_nan 0 4 649 17 PfmFile::fill_nan 0 1 128 246
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_nan
//       Access: Published
//  Description: Fills the table with all NaN.
////////////////////////////////////////////////////////////////////
29
void PfmFile::fill_nan(void);

450 18 fill_no_data_value 0 4 649 27 PfmFile::fill_no_data_value 0 1 129 319
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_no_data_value
//       Access: Published
//  Description: Fills the table with the current no_data value, so
//               that the table is empty.
////////////////////////////////////////////////////////////////////
39
void PfmFile::fill_no_data_value(void);

451 12 fill_channel 0 4 649 21 PfmFile::fill_channel 0 1 130 331
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, leaving the other channels unchanged.
////////////////////////////////////////////////////////////////////
58
void PfmFile::fill_channel(int channel, PN_float32 value);

452 16 fill_channel_nan 0 4 649 25 PfmFile::fill_channel_nan 0 1 131 317
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, leaving the
//               other channels unchanged.
////////////////////////////////////////////////////////////////////
44
void PfmFile::fill_channel_nan(int channel);

453 19 fill_channel_masked 0 4 649 28 PfmFile::fill_channel_masked 0 1 132 400
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, but only where the table already has a data
//               point.  Leaves empty points unchanged.
////////////////////////////////////////////////////////////////////
65
void PfmFile::fill_channel_masked(int channel, PN_float32 value);

454 23 fill_channel_masked_nan 0 4 649 32 PfmFile::fill_channel_masked_nan 0 1 133 386
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, but only where
//               the table already has a data point.  Leaves empty
//               points unchanged.
////////////////////////////////////////////////////////////////////
51
void PfmFile::fill_channel_masked_nan(int channel);

455 18 calc_average_point 0 4 649 27 PfmFile::calc_average_point 0 1 134 587
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_average_point
//       Access: Published
//  Description: Computes the unweighted average point of all points
//               within the box centered at (x, y) with the indicated
//               Manhattan-distance radius.  Missing points are
//               assigned the value of their nearest neighbor.
//               Returns true if successful, or false if the point
//               value cannot be determined.
////////////////////////////////////////////////////////////////////
104
bool PfmFile::calc_average_point(LPoint3f &result, PN_float32 x, PN_float32 y, PN_float32 radius) const;

456 19 calc_bilinear_point 0 4 649 28 PfmFile::calc_bilinear_point 0 1 135 451
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_bilinear_point
//       Access: Published
//  Description: Computes the weighted average of the four nearest
//               points to the floating-point index (x, y).  Returns
//               true if the point has any contributors, false if the
//               point is unknown.
////////////////////////////////////////////////////////////////////
86
bool PfmFile::calc_bilinear_point(LPoint3f &result, PN_float32 x, PN_float32 y) const;

457 12 calc_min_max 0 4 649 21 PfmFile::calc_min_max 0 1 136 515
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_min_max
//       Access: Published
//  Description: Calculates the minimum and maximum x, y, and z depth
//               component values, representing the bounding box of
//               depth values, and places them in the indicated
//               vectors.  Returns true if successful, false if the
//               mesh contains no points.
////////////////////////////////////////////////////////////////////
81
bool PfmFile::calc_min_max(LVecBase3f &min_points, LVecBase3f &max_points) const;

458 13 calc_autocrop 0 4 649 22 PfmFile::calc_autocrop 0 2 137 138 1564
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
////////////////////////////////////////////////////////////////////
208
bool PfmFile::calc_autocrop(int &x_begin, int &x_end, int &y_begin, int &y_end) const;
inline bool PfmFile::calc_autocrop(LVecBase4f &range) const;
inline bool PfmFile::calc_autocrop(LVecBase4d &range) const;

459 12 is_row_empty 0 4 649 21 PfmFile::is_row_empty 0 1 139 401
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_row_empty
//       Access: Published
//  Description: Returns true if all of the points on row y, in the range
//               [x_begin, x_end), are the no_data value, or false if
//               any one of these points has a value.
////////////////////////////////////////////////////////////////////
64
bool PfmFile::is_row_empty(int y, int x_begin, int x_end) const;

460 15 is_column_empty 0 4 649 24 PfmFile::is_column_empty 0 1 140 399
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_column_empty
//       Access: Published
//  Description: Returns true if all of the points on column x, from
//               [y_begin, y_end), are the no_data value, or false if
//               any one of these points has a value.
////////////////////////////////////////////////////////////////////
67
bool PfmFile::is_column_empty(int x, int y_begin, int y_end) const;

461 16 set_zero_special 0 4 649 25 PfmFile::set_zero_special 0 1 141 468
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_zero_special
//       Access: Published
//  Description: Sets the zero_special flag.  When this flag is true,
//               values of (0, 0, 0) in the pfm file are treated as a
//               special case, and are not processed.
//
//               This is a special case of set_no_data_value().
////////////////////////////////////////////////////////////////////
57
inline void PfmFile::set_zero_special(bool zero_special);

462 17 set_no_data_chan4 0 4 649 26 PfmFile::set_no_data_chan4 0 1 142 534
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_chan4
//       Access: Published
//  Description: Sets the no_data_chan4 flag.  When this flag is true,
//               and the pfm file has 4 channels, then a negative
//               value in the fourth channel indicates no data.  When
//               it is false, all points are valid.
//
//               This is a special case of set_no_data_value().
////////////////////////////////////////////////////////////////////
51
inline void PfmFile::set_no_data_chan4(bool chan4);

463 15 set_no_data_nan 0 4 649 24 PfmFile::set_no_data_nan 0 1 143 562
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_nan
//       Access: Published
//  Description: Sets the no_data_nan flag.  When num_channels is
//               nonzero, then a NaN value in any of the first
//               num_channels channels indicates no data for that
//               point.  If num_channels is zero, then all points are
//               valid.
//
//               This is a special case of set_no_data_value().
////////////////////////////////////////////////////////////////////
48
void PfmFile::set_no_data_nan(int num_channels);

464 17 set_no_data_value 0 4 649 26 PfmFile::set_no_data_value 0 2 144 145 640
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
////////////////////////////////////////////////////////////////////
134
void PfmFile::set_no_data_value(LPoint4f const &no_data_value);
inline void PfmFile::set_no_data_value(LPoint4d const &no_data_value);

465 21 set_no_data_threshold 0 4 649 30 PfmFile::set_no_data_threshold 0 2 146 147 754
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
////////////////////////////////////////////////////////////////////
142
void PfmFile::set_no_data_threshold(LPoint4f const &no_data_value);
inline void PfmFile::set_no_data_threshold(LPoint4d const &no_data_value);

466 19 clear_no_data_value 0 4 649 28 PfmFile::clear_no_data_value 0 1 148 382
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Removes the special value that means "no data" when it
//               appears in the pfm file.  All points will thus be
//               considered valid.
////////////////////////////////////////////////////////////////////
47
inline void PfmFile::clear_no_data_value(void);

467 17 has_no_data_value 0 4 649 26 PfmFile::has_no_data_value 0 1 149 321
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_value
//       Access: Published
//  Description: Returns whether a "no data" value has been
//               established by set_no_data_value().
////////////////////////////////////////////////////////////////////
51
inline bool PfmFile::has_no_data_value(void) const;

468 21 has_no_data_threshold 0 4 649 30 PfmFile::has_no_data_threshold 0 1 150 339
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_threshold
//       Access: Published
//  Description: Returns whether a "no data" threshold value has been
//               established by set_no_data_threshold().
////////////////////////////////////////////////////////////////////
55
inline bool PfmFile::has_no_data_threshold(void) const;

469 17 get_no_data_value 0 4 649 26 PfmFile::get_no_data_value 0 1 151 324
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_no_data_value
//       Access: Published
//  Description: If has_no_data_value() returns true, this returns the
//               particular "no data" value.
////////////////////////////////////////////////////////////////////
62
inline LPoint4f const &PfmFile::get_no_data_value(void) const;

470 6 resize 0 4 649 15 PfmFile::resize 0 1 152 422
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::resize
//       Access: Published
//  Description: Applies a simple filter to resample the pfm file
//               in-place to the indicated size.  Don't confuse this
//               with applying a scale to all of the points via
//               xform().
////////////////////////////////////////////////////////////////////
53
void PfmFile::resize(int new_x_size, int new_y_size);

471 15 box_filter_from 0 4 649 24 PfmFile::box_filter_from 0 1 153 529
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
65
void PfmFile::box_filter_from(float radius, PfmFile const &copy);

472 20 gaussian_filter_from 0 4 649 29 PfmFile::gaussian_filter_from 0 1 154 534
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
70
void PfmFile::gaussian_filter_from(float radius, PfmFile const &copy);

473 17 quick_filter_from 0 4 649 26 PfmFile::quick_filter_from 0 1 155 528
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.
////////////////////////////////////////////////////////////////////
53
void PfmFile::quick_filter_from(PfmFile const &copy);

474 12 reverse_rows 0 4 649 21 PfmFile::reverse_rows 0 1 156 271
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
////////////////////////////////////////////////////////////////////
33
void PfmFile::reverse_rows(void);

475 4 flip 0 4 649 13 PfmFile::flip 0 1 157 661
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the table
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
////////////////////////////////////////////////////////////////////
61
void PfmFile::flip(bool flip_x, bool flip_y, bool transpose);

476 5 xform 0 4 649 14 PfmFile::xform 0 2 158 159 588
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
////////////////////////////////////////////////////////////////////
104
void PfmFile::xform(LMatrix4f const &transform);
inline void PfmFile::xform(LMatrix4d const &transform);

477 15 forward_distort 0 4 649 24 PfmFile::forward_distort 0 1 160 1065
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::forward_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.  
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = this(dist(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis is inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
////////////////////////////////////////////////////////////////////
82
void PfmFile::forward_distort(PfmFile const &dist, PN_float32 scale_factor = 1.0);

478 15 reverse_distort 0 4 649 24 PfmFile::reverse_distort 0 1 161 1063
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = dist(this(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis in inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
////////////////////////////////////////////////////////////////////
82
void PfmFile::reverse_distort(PfmFile const &dist, PN_float32 scale_factor = 1.0);

479 5 merge 0 4 649 14 PfmFile::merge 0 1 162 447
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::merge
//       Access: Published
//  Description: Wherever there is missing data in this PfmFile (that
//               is, wherever has_point() returns false), copy data
//               from the other PfmFile, which must be exactly the
//               same dimensions as this one.
////////////////////////////////////////////////////////////////////
42
void PfmFile::merge(PfmFile const &other);

480 12 copy_channel 0 4 649 21 PfmFile::copy_channel 0 1 163 400
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile (which could be same as this
//               PfmFile) into the specified channel of this one.
////////////////////////////////////////////////////////////////////
83
void PfmFile::copy_channel(int to_channel, PfmFile const &other, int from_channel);

481 19 copy_channel_masked 0 4 649 28 PfmFile::copy_channel_masked 0 1 164 378
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel_masked
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile, but only where the other file has
//               a data point.
////////////////////////////////////////////////////////////////////
90
void PfmFile::copy_channel_masked(int to_channel, PfmFile const &other, int from_channel);

482 10 apply_crop 0 4 649 19 PfmFile::apply_crop 0 1 165 387
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_crop
//       Access: Published
//  Description: Reduces the PFM file to the cells in the rectangle
//               bounded by (x_begin, x_end, y_begin, y_end), where
//               the _end cells are not included.
////////////////////////////////////////////////////////////////////
73
void PfmFile::apply_crop(int x_begin, int x_end, int y_begin, int y_end);

483 18 clear_to_texcoords 0 4 649 27 PfmFile::clear_to_texcoords 0 1 166 406
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear_to_texcoords
//       Access: Published
//  Description: Replaces this PfmFile with a new PfmFile of size
//               x_size x y_size x 3, containing the x y 0 values in
//               the range 0 .. 1 according to the x y index.
////////////////////////////////////////////////////////////////////
57
void PfmFile::clear_to_texcoords(int x_size, int y_size);

484 9 pull_spot 0 4 649 18 PfmFile::pull_spot 0 1 167 528
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::pull_spot
//       Access: Published
//  Description: Applies delta * t to the point values within radius
//               (xr, yr) distance of (xc, yc).  The t value is scaled
//               from 1.0 at the center to 0.0 at radius (xr, yr), and
//               this scale follows the specified exponent.  Returns
//               the number of points affected.
////////////////////////////////////////////////////////////////////
102
int PfmFile::pull_spot(LPoint4f const &delta, float xc, float yc, float xr, float yr, float exponent);

485 17 calc_tight_bounds 0 4 649 26 PfmFile::calc_tight_bounds 0 1 168 487
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               points within the table.  Assumes the table contains
//               3-D points.
//
//               The return value is true if any points in the table,
//               or false if none are.
////////////////////////////////////////////////////////////////////
80
bool PfmFile::calc_tight_bounds(LPoint3f &min_point, LPoint3f &max_point) const;

486 21 compute_planar_bounds 0 4 649 30 PfmFile::compute_planar_bounds 0 2 169 170 2080
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
////////////////////////////////////////////////////////////////////
328
PointerTo< BoundingHexahedron > PfmFile::compute_planar_bounds(LPoint2f const &center, PN_float32 point_dist, PN_float32 sample_radius, bool points_only) const;
inline PointerTo< BoundingHexahedron > PfmFile::compute_planar_bounds(LPoint2d const &center, PN_float32 point_dist, PN_float32 sample_radius, bool points_only) const;

487 20 compute_sample_point 0 4 649 29 PfmFile::compute_sample_point 0 1 171 468
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_sample_point
//       Access: Published
//  Description: Computes the average of all the point within
//               sample_radius (manhattan distance) and the indicated
//               point.
//
//               The point coordinates are given in UV space, in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
113
void PfmFile::compute_sample_point(LPoint3f &result, PN_float32 x, PN_float32 y, PN_float32 sample_radius) const;

488 14 copy_sub_image 0 4 649 23 PfmFile::copy_sub_image 0 1 172 646
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
////////////////////////////////////////////////////////////////////
132
void PfmFile::copy_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1);

489 13 add_sub_image 0 4 649 22 PfmFile::add_sub_image 0 1 173 397
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.
////////////////////////////////////////////////////////////////////
156
void PfmFile::add_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

490 14 mult_sub_image 0 4 649 23 PfmFile::mult_sub_image 0 1 174 403
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.
////////////////////////////////////////////////////////////////////
157
void PfmFile::mult_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

491 16 divide_sub_image 0 4 649 25 PfmFile::divide_sub_image 0 1 175 475
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::divide_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are divided into the pixels of the destination, after
//               scaling by the specified pixel_scale.
//               dest(x, y) = dest(x, y) / (copy(x, y) * pixel_scale).
////////////////////////////////////////////////////////////////////
159
void PfmFile::divide_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

492 11 operator *= 0 4 649 20 PfmFile::operator *= 0 1 176 0
44
void PfmFile::operator *=(float multiplier);

493 6 output 0 4 649 15 PfmFile::output 0 1 177 214
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void PfmFile::output(ostream &out) const;

494 10 get_points 0 4 649 19 PfmFile::get_points 0 1 178 0
42
PyObject *PfmFile::get_points(void) const;

495 13 __getbuffer__ 0 4 649 22 PfmFile::__getbuffer__ 0 1 179 0
77
int PfmFile::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

496 8 ~PfmFile 0 4 649 17 PfmFile::~PfmFile 0 0 0
24
PfmFile::~PfmFile(void);

497 16 make_transparent 0 4 650 26 PNMBrush::make_transparent 0 1 180 414
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_transparent
//       Access: Published, Static
//  Description: Returns a new brush that does not paint anything.
//               Can be used as either a pen or a fill brush to make
//               borderless or unfilled shapes, respectively.
////////////////////////////////////////////////////////////////////
62
static PointerTo< PNMBrush > PNMBrush::make_transparent(void);

498 10 make_pixel 0 4 650 20 PNMBrush::make_pixel 0 1 181 384
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_pixel
//       Access: Published, Static
//  Description: Returns a new brush that paints a single pixel of the
//               indicated color on a border, or paints a solid color
//               in an interior.
////////////////////////////////////////////////////////////////////
125
static PointerTo< PNMBrush > PNMBrush::make_pixel(LColorf const &color, PNMBrush::BrushEffect effect = ::PNMBrush::BE_blend);

499 9 make_spot 0 4 650 19 PNMBrush::make_spot 0 1 182 401
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_spot
//       Access: Published, Static
//  Description: Returns a new brush that paints a spot of the
//               indicated color and radius.  If fuzzy is true, the
//               spot is fuzzy; otherwise, it is hard-edged.
////////////////////////////////////////////////////////////////////
150
static PointerTo< PNMBrush > PNMBrush::make_spot(LColorf const &color, float radius, bool fuzzy, PNMBrush::BrushEffect effect = ::PNMBrush::BE_blend);

500 10 make_image 0 4 650 20 PNMBrush::make_image 0 1 183 537
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_image
//       Access: Published, Static
//  Description: Returns a new brush that paints with the indicated
//               image.  xc and yc indicate the pixel in the center of
//               the brush.
//
//               The brush makes a copy of the image; it is safe to
//               deallocate or modify the image after making this
//               call.
////////////////////////////////////////////////////////////////////
146
static PointerTo< PNMBrush > PNMBrush::make_image(PNMImage const &image, float xc, float yc, PNMBrush::BrushEffect effect = ::PNMBrush::BE_blend);

501 8 PNMImage 0 4 653 18 PNMImage::PNMImage 0 4 184 185 186 187 891
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
305
inline PNMImage::PNMImage(void);
PNMImage::PNMImage(Filename const &filename, PNMFileType *type = 0);
inline PNMImage::PNMImage(int x_size, int y_size, int num_channels = 3, xelval maxval = 255, PNMFileType *type = 0, ColorSpace color_space = ::CS_linear);
inline PNMImage::PNMImage(PNMImage const &copy);

502 10 operator = 0 4 653 20 PNMImage::operator = 0 1 188 0
55
inline void PNMImage::operator =(PNMImage const &copy);

503 9 ~PNMImage 0 4 653 19 PNMImage::~PNMImage 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline PNMImage::~PNMImage(void);

504 9 clamp_val 0 4 653 19 PNMImage::clamp_val 0 1 189 290
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clamp_val
//       Access: Published
//  Description: A handy function to clamp values to
//               [0..get_maxval()].
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::clamp_val(int input_value) const;

505 6 to_val 0 4 653 16 PNMImage::to_val 0 1 190 379
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..1] to [0..get_maxval()].  Do not use this for
//               alpha values, see to_alpha_val.
////////////////////////////////////////////////////////////////////
56
inline xelval PNMImage::to_val(float input_value) const;

506 12 to_alpha_val 0 4 653 22 PNMImage::to_alpha_val 0 1 191 311
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from [0..1]
//               to [0..get_maxval()].
////////////////////////////////////////////////////////////////////
62
inline xelval PNMImage::to_alpha_val(float input_value) const;

507 8 from_val 0 4 653 18 PNMImage::from_val 0 1 192 383
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..get_maxval()] to [0..1].  Do not use this for
//               alpha values, see from_alpha_val.
////////////////////////////////////////////////////////////////////
58
inline float PNMImage::from_val(xelval input_value) const;

508 14 from_alpha_val 0 4 653 24 PNMImage::from_alpha_val 0 1 193 313
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from
//               [0..get_maxval()] to [0..1].
////////////////////////////////////////////////////////////////////
64
inline float PNMImage::from_alpha_val(xelval input_value) const;

509 5 clear 0 4 653 15 PNMImage::clear 0 2 194 195 662
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: Frees all memory allocated for the image, and clears
//               all its parameters (size, color, type, etc).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
////////////////////////////////////////////////////////////////////
177
void PNMImage::clear(void);
void PNMImage::clear(int x_size, int y_size, int num_channels = 3, xelval maxval = 255, PNMFileType *type = 0, ColorSpace color_space = ::CS_linear);

510 9 copy_from 0 4 653 19 PNMImage::copy_from 0 1 196 269
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_from
//       Access: Published
//  Description: Makes this image become a copy of the other image.
////////////////////////////////////////////////////////////////////
47
void PNMImage::copy_from(PNMImage const &copy);

511 12 copy_channel 0 4 653 22 PNMImage::copy_channel 0 2 197 198 696
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies a channel from one image into another.
//               Images must be the same size
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
////////////////////////////////////////////////////////////////////
242
void PNMImage::copy_channel(PNMImage const &copy, int src_channel, int dest_channel);
void PNMImage::copy_channel(PNMImage const &copy, int xto, int yto, int cto, int xfrom = 0, int yfrom = 0, int cfrom = 0, int x_size = -1, int y_size = -1);

512 16 copy_header_from 0 4 653 26 PNMImage::copy_header_from 0 1 199 445
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_header_from
//       Access: Published
//  Description: Copies just the header information into this image.
//               This will blow away any image data stored in the
//               image.  The new image data will be allocated, but
//               left unitialized.
////////////////////////////////////////////////////////////////////
62
void PNMImage::copy_header_from(PNMImageHeader const &header);

513 9 take_from 0 4 653 19 PNMImage::take_from 0 1 200 314
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::take_from
//       Access: Published
//  Description: Move the contents of the other image into this one,
//               and empty the other image.
////////////////////////////////////////////////////////////////////
41
void PNMImage::take_from(PNMImage &orig);

514 4 fill 0 4 653 14 PNMImage::fill 0 2 201 202 610
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
////////////////////////////////////////////////////////////////////
109
inline void PNMImage::fill(float red, float green, float blue);
inline void PNMImage::fill(float gray = 0.0);

515 8 fill_val 0 4 653 18 PNMImage::fill_val 0 2 203 204 618
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
////////////////////////////////////////////////////////////////////
112
void PNMImage::fill_val(xelval red, xelval green, xelval blue);
inline void PNMImage::fill_val(xelval gray = 0);

516 10 alpha_fill 0 4 653 20 PNMImage::alpha_fill 0 1 205 269
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
////////////////////////////////////////////////////////////////////
52
inline void PNMImage::alpha_fill(float alpha = 0.0);

517 14 alpha_fill_val 0 4 653 24 PNMImage::alpha_fill_val 0 1 206 273
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill_val
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
////////////////////////////////////////////////////////////////////
48
void PNMImage::alpha_fill_val(xelval alpha = 0);

518 13 set_read_size 0 4 653 23 PNMImage::set_read_size 0 1 207 855
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_read_size
//       Access: Published
//  Description: Specifies the size to we'd like to scale the image
//               upon reading it.  This will affect the next call to
//               read().  This is usually used to reduce the image
//               size, e.g. for a thumbnail.
//
//               If the file type reader supports it (e.g. JPEG), then
//               this will scale the image during the read operation,
//               consequently reducing memory and CPU utilization.  If
//               the file type reader does not support it, this will
//               load the image normally, and them perform a linear
//               scale after it has been loaded.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_read_size(int x_size, int y_size);

519 15 clear_read_size 0 4 653 25 PNMImage::clear_read_size 0 1 208 298
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear_read_size
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_read_size().
////////////////////////////////////////////////////////////////////
44
inline void PNMImage::clear_read_size(void);

520 13 has_read_size 0 4 653 23 PNMImage::has_read_size 0 1 209 271
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::has_read_size
//       Access: Published
//  Description: Returns true if set_read_size() has been called.
////////////////////////////////////////////////////////////////////
48
inline bool PNMImage::has_read_size(void) const;

521 15 get_read_x_size 0 4 653 25 PNMImage::get_read_x_size 0 1 210 384
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_x_size
//       Access: Published
//  Description: Returns the requested x_size of the image if
//               set_read_size() has been called, or the image x_size
//               otherwise (if it is known).
////////////////////////////////////////////////////////////////////
49
inline int PNMImage::get_read_x_size(void) const;

522 15 get_read_y_size 0 4 653 25 PNMImage::get_read_y_size 0 1 211 384
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_y_size
//       Access: Published
//  Description: Returns the requested y_size of the image if
//               set_read_size() has been called, or the image y_size
//               otherwise (if it is known).
////////////////////////////////////////////////////////////////////
49
inline int PNMImage::get_read_y_size(void) const;

523 15 get_color_space 0 4 653 25 PNMImage::get_color_space 0 1 212 296
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_color_space
//       Access: Published
//  Description: Returns the color space in which the image is
//               encoded.
////////////////////////////////////////////////////////////////////
56
inline ColorSpace PNMImage::get_color_space(void) const;

524 4 read 0 4 653 14 PNMImage::read 0 3 213 214 215 1758
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: This flavor of read() uses an already-existing
//               PNMReader to read the image file.  You can get a
//               reader via the PNMImageHeader::make_reader() methods.
//               This is a good way to examine the header of a file
//               (for instance, to determine its size) before actually
//               reading the entire image.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
263
bool PNMImage::read(Filename const &filename, PNMFileType *type = 0, bool report_unknown_type = 1);
bool PNMImage::read(istream &data, string const &filename = string(), PNMFileType *type = 0, bool report_unknown_type = 1);
bool PNMImage::read(PNMReader *reader);

525 5 write 0 4 653 15 PNMImage::write 0 3 216 217 218 1386
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated filename.  If type
//               is non-NULL, it is a suggestion for the type of image
//               file to write.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: This flavor of write() uses an already-existing
//               PNMWriter to write the image file.  You can get a
//               writer via the PNMImageHeader::make_writer() methods.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
224
bool PNMImage::write(Filename const &filename, PNMFileType *type = 0) const;
bool PNMImage::write(ostream &data, string const &filename = string(), PNMFileType *type = 0) const;
bool PNMImage::write(PNMWriter *writer) const;

526 8 is_valid 0 4 653 18 PNMImage::is_valid 0 1 219 470
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::is_valid
//       Access: Published
//  Description: Returns true if the image has been read in or
//               correctly initialized with a height and width.  If
//               this returns false, virtually all member functions
//               except clear() and read() are invalid function calls.
////////////////////////////////////////////////////////////////////
43
inline bool PNMImage::is_valid(void) const;

527 16 set_num_channels 0 4 653 26 PNMImage::set_num_channels 0 1 220 531
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_num_channels
//       Access: Published
//  Description: Changes the number of channels associated with the
//               image.  The new number of channels must be an integer
//               in the range 1 through 4, inclusive.  This will
//               allocate and/or deallocate memory as necessary to
//               accommodate; see set_color_type().
////////////////////////////////////////////////////////////////////
57
inline void PNMImage::set_num_channels(int num_channels);

528 14 set_color_type 0 4 653 24 PNMImage::set_color_type 0 1 221 606
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_type
//       Access: Published
//  Description: Translates the image to or from grayscale, color, or
//               four-color mode.  Grayscale images are converted to
//               full-color images with R, G, B set to the original
//               gray level; color images are converted to grayscale
//               according to the value of Bright().  The alpha
//               channel, if added, is initialized to zero.
////////////////////////////////////////////////////////////////////
68
void PNMImage::set_color_type(PNMImageHeader::ColorType color_type);

529 15 set_color_space 0 4 653 25 PNMImage::set_color_space 0 1 222 1024
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_space
//       Access: Published
//  Description: Converts the colors in the image to the indicated
//               color space.  This may be a lossy operation, in
//               particular when going from sRGB to linear.
//               The alpha channel remains untouched.
//
//               Note that, because functions like get_xel() and
//               set_xel() work on linearized floating-point values,
//               this conversion won't affect those values (aside
//               from some minor discrepancies due to storage
//               precision).  It does affect the values used by
//               get_xel_val() and set_xel_val(), though, since
//               those operate on encoded colors.
//
//               Some color spaces, particularly scRGB, may enforce
//               the use of a particular maxval setting.
////////////////////////////////////////////////////////////////////
55
void PNMImage::set_color_space(ColorSpace color_space);

530 9 add_alpha 0 4 653 19 PNMImage::add_alpha 0 1 223 365
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_alpha
//       Access: Published
//  Description: Adds an alpha channel to the image, if it does not
//               already have one.  The alpha channel is initialized
//               to zeros.
////////////////////////////////////////////////////////////////////
38
inline void PNMImage::add_alpha(void);

531 12 remove_alpha 0 4 653 22 PNMImage::remove_alpha 0 1 224 270
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remove_alpha
//       Access: Published
//  Description: Removes the image's alpha channel, if it exists.
////////////////////////////////////////////////////////////////////
41
inline void PNMImage::remove_alpha(void);

532 14 make_grayscale 0 4 653 24 PNMImage::make_grayscale 0 2 225 226 839
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.  The
//               optional rc, gc, bc values represent the relative
//               weights to apply to each channel to convert it to
//               grayscale.
////////////////////////////////////////////////////////////////////
104
inline void PNMImage::make_grayscale(void);
void PNMImage::make_grayscale(float rc, float gc, float bc);

533 8 make_rgb 0 4 653 18 PNMImage::make_rgb 0 1 227 329
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_rgb
//       Access: Published
//  Description: Converts the image from grayscale to RGB.  Any alpha
//               channel, if present, is left undisturbed.
////////////////////////////////////////////////////////////////////
37
inline void PNMImage::make_rgb(void);

534 17 premultiply_alpha 0 4 653 27 PNMImage::premultiply_alpha 0 1 228 509
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::premultiply_alpha
//       Access: Published
//  Description: Converts an image in-place to its "premultiplied"
//               form, where, for every pixel in the image, the
//               red, green, and blue components are multiplied by
//               that pixel's alpha value.
//
//               This does not modify any alpha values.
////////////////////////////////////////////////////////////////////
39
void PNMImage::premultiply_alpha(void);

535 19 unpremultiply_alpha 0 4 653 29 PNMImage::unpremultiply_alpha 0 1 229 567
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unpremultiply_alpha
//       Access: Published
//  Description: Converts an image in-place to its "straight alpha"
//               form (presumably from a "premultiplied" form),
//               where, for every pixel in the image, the red,
//               green, and blue components are divided by that
//               pixel's alpha value.
//
//               This does not modify any alpha values.
////////////////////////////////////////////////////////////////////
41
void PNMImage::unpremultiply_alpha(void);

536 12 reverse_rows 0 4 653 22 PNMImage::reverse_rows 0 1 230 272
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
////////////////////////////////////////////////////////////////////
34
void PNMImage::reverse_rows(void);

537 4 flip 0 4 653 14 PNMImage::flip 0 1 231 662
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the image
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
////////////////////////////////////////////////////////////////////
62
void PNMImage::flip(bool flip_x, bool flip_y, bool transpose);

538 10 set_maxval 0 4 653 20 PNMImage::set_maxval 0 1 232 263
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_maxval
//       Access: Published
//  Description: Rescales the image to the indicated maxval.
////////////////////////////////////////////////////////////////////
41
void PNMImage::set_maxval(xelval maxval);

539 11 get_xel_val 0 4 653 21 PNMImage::get_xel_val 0 2 233 234 654
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
////////////////////////////////////////////////////////////////////
102
inline xel &PNMImage::get_xel_val(int x, int y);
inline xel PNMImage::get_xel_val(int x, int y) const;

540 11 set_xel_val 0 4 653 21 PNMImage::set_xel_val 0 3 235 236 237 1570
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is in the range
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
////////////////////////////////////////////////////////////////////
207
inline void PNMImage::set_xel_val(int x, int y, xel const &value);
inline void PNMImage::set_xel_val(int x, int y, xelval r, xelval g, xelval b);
inline void PNMImage::set_xel_val(int x, int y, xelval gray);

541 11 get_red_val 0 4 653 21 PNMImage::get_red_val 0 1 238 399
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red_val
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
////////////////////////////////////////////////////////////////////
56
inline xelval PNMImage::get_red_val(int x, int y) const;

542 13 get_green_val 0 4 653 23 PNMImage::get_green_val 0 1 239 403
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green_val
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
////////////////////////////////////////////////////////////////////
58
inline xelval PNMImage::get_green_val(int x, int y) const;

543 12 get_blue_val 0 4 653 22 PNMImage::get_blue_val 0 1 240 401
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue_val
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::get_blue_val(int x, int y) const;

544 12 get_gray_val 0 4 653 22 PNMImage::get_gray_val 0 1 241 642
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray_val
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.
//               The value returned is in the range 0..maxval and
//               encoded in the configured color space.
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::get_gray_val(int x, int y) const;

545 13 get_alpha_val 0 4 653 23 PNMImage::get_alpha_val 0 1 242 453
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha_val
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is in the
//               range 0..maxval and always linear.
////////////////////////////////////////////////////////////////////
58
inline xelval PNMImage::get_alpha_val(int x, int y) const;

546 11 set_red_val 0 4 653 21 PNMImage::set_red_val 0 1 243 518
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red_val
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_red if you instead have a linearized and
//               normalized floating-point value.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::set_red_val(int x, int y, xelval r);

547 13 set_green_val 0 4 653 23 PNMImage::set_green_val 0 1 244 524
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green_val
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_green if you instead have a linearized and
//               normalized floating-point value.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_green_val(int x, int y, xelval g);

548 12 set_blue_val 0 4 653 22 PNMImage::set_blue_val 0 1 245 521
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue_val
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_blue if you instead have a linearized and
//               normalized floating-point value.
////////////////////////////////////////////////////////////////////
59
inline void PNMImage::set_blue_val(int x, int y, xelval b);

549 12 set_gray_val 0 4 653 22 PNMImage::set_gray_val 0 1 246 876
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray_val
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel_val(),
//               which can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be in the range 0..maxval, encoded in the configured
//               color space.  See set_gray if you instead have a
//               linearized normalized floating-point value.
////////////////////////////////////////////////////////////////////
62
inline void PNMImage::set_gray_val(int x, int y, xelval gray);

550 13 set_alpha_val 0 4 653 23 PNMImage::set_alpha_val 0 1 247 567
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha_val
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..maxval.
//
//               This value is always linearly encoded, even if the
//               image is set to the sRGB color space.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_alpha_val(int x, int y, xelval a);

551 15 get_channel_val 0 4 653 25 PNMImage::get_channel_val 0 1 248 630
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel_val
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
66
xelval PNMImage::get_channel_val(int x, int y, int channel) const;

552 15 set_channel_val 0 4 653 25 PNMImage::set_channel_val 0 1 249 629
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
72
void PNMImage::set_channel_val(int x, int y, int channel, xelval value);

553 11 get_channel 0 4 653 21 PNMImage::get_channel 0 1 250 629
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is a float in the range
//               0..1.
////////////////////////////////////////////////////////////////////
61
float PNMImage::get_channel(int x, int y, int channel) const;

554 11 set_channel 0 4 653 21 PNMImage::set_channel 0 1 251 628
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be a float in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
67
void PNMImage::set_channel(int x, int y, int channel, float value);

555 9 get_pixel 0 4 653 19 PNMImage::get_pixel 0 1 252 322
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_pixel
//       Access: Published
//  Description: Returns the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
////////////////////////////////////////////////////////////////////
66
PNMImageHeader::PixelSpec PNMImage::get_pixel(int x, int y) const;

556 9 set_pixel 0 4 653 19 PNMImage::set_pixel 0 1 253 319
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_pixel
//       Access: Published
//  Description: Sets the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
////////////////////////////////////////////////////////////////////
79
void PNMImage::set_pixel(int x, int y, PNMImageHeader::PixelSpec const &pixel);

557 7 get_xel 0 4 653 17 PNMImage::get_xel 0 1 254 336
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
56
inline LRGBColorf PNMImage::get_xel(int x, int y) const;

558 7 set_xel 0 4 653 17 PNMImage::set_xel 0 3 255 256 257 1055
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
198
inline void PNMImage::set_xel(int x, int y, LRGBColorf const &value);
inline void PNMImage::set_xel(int x, int y, float r, float g, float b);
inline void PNMImage::set_xel(int x, int y, float gray);

559 9 get_xel_a 0 4 653 19 PNMImage::get_xel_a 0 1 258 339
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_a
//       Access: Published
//  Description: Returns the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
55
inline LColorf PNMImage::get_xel_a(int x, int y) const;

560 9 set_xel_a 0 4 653 19 PNMImage::set_xel_a 0 2 259 260 680
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
151
inline void PNMImage::set_xel_a(int x, int y, LColorf const &value);
inline void PNMImage::set_xel_a(int x, int y, float r, float g, float b, float a);

561 7 get_red 0 4 653 17 PNMImage::get_red 0 1 261 367
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
51
inline float PNMImage::get_red(int x, int y) const;

562 9 get_green 0 4 653 19 PNMImage::get_green 0 1 262 371
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline float PNMImage::get_green(int x, int y) const;

563 8 get_blue 0 4 653 18 PNMImage::get_blue 0 1 263 369
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
52
inline float PNMImage::get_blue(int x, int y) const;

564 8 get_gray 0 4 653 18 PNMImage::get_gray 0 1 264 594
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned
//               is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
52
inline float PNMImage::get_gray(int x, int y) const;

565 9 get_alpha 0 4 653 19 PNMImage::get_alpha 0 1 265 434
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is a float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline float PNMImage::get_alpha(int x, int y) const;

566 7 set_red 0 4 653 17 PNMImage::set_red 0 1 266 373
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline void PNMImage::set_red(int x, int y, float r);

567 9 set_green 0 4 653 19 PNMImage::set_green 0 1 267 377
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
55
inline void PNMImage::set_green(int x, int y, float g);

568 8 set_blue 0 4 653 18 PNMImage::set_blue 0 1 268 375
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
54
inline void PNMImage::set_blue(int x, int y, float b);

569 8 set_gray 0 4 653 18 PNMImage::set_gray 0 1 269 729
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel(), which
//               can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
57
inline void PNMImage::set_gray(int x, int y, float gray);

570 9 set_alpha 0 4 653 19 PNMImage::set_alpha 0 1 270 432
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..1.
////////////////////////////////////////////////////////////////////
55
inline void PNMImage::set_alpha(int x, int y, float a);

571 10 get_bright 0 4 653 20 PNMImage::get_bright 0 3 271 272 273 1423
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: Returns the linear brightness of the given xel, as a
//               linearized float in the range 0..1.  This flavor of
//               get_bright() returns the correct grayscale brightness
//               level for both full-color and grayscale images.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               color images.  It returns a single brightness value
//               for the RGB color at the indicated pixel, based on
//               the supplied weights for each component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               four-channel images.  It returns a single brightness
//               value for the RGBA color at the indicated pixel,
//               based on the supplied weights for each component.
////////////////////////////////////////////////////////////////////
234
inline float PNMImage::get_bright(int x, int y) const;
inline float PNMImage::get_bright(int x, int y, float rc, float gc, float bc) const;
inline float PNMImage::get_bright(int x, int y, float rc, float gc, float bc, float ac) const;

572 5 blend 0 4 653 15 PNMImage::blend 0 2 274 275 1080
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
////////////////////////////////////////////////////////////////////
154
inline void PNMImage::blend(int x, int y, LRGBColorf const &val, float alpha);
void PNMImage::blend(int x, int y, float r, float g, float b, float alpha);

573 14 copy_sub_image 0 4 653 24 PNMImage::copy_sub_image 0 1 276 647
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
////////////////////////////////////////////////////////////////////
134
void PNMImage::copy_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1);

574 15 blend_sub_image 0 4 653 25 PNMImage::blend_sub_image 0 1 277 770
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
////////////////////////////////////////////////////////////////////
160
void PNMImage::blend_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

575 13 add_sub_image 0 4 653 23 PNMImage::add_sub_image 0 1 278 503
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
////////////////////////////////////////////////////////////////////
158
void PNMImage::add_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

576 14 mult_sub_image 0 4 653 24 PNMImage::mult_sub_image 0 1 279 509
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
////////////////////////////////////////////////////////////////////
159
void PNMImage::mult_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

577 16 darken_sub_image 0 4 653 26 PNMImage::darken_sub_image 0 1 280 770
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
////////////////////////////////////////////////////////////////////
161
void PNMImage::darken_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

578 17 lighten_sub_image 0 4 653 27 PNMImage::lighten_sub_image 0 1 281 635
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
////////////////////////////////////////////////////////////////////
162
void PNMImage::lighten_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = 0, int yfrom = 0, int x_size = -1, int y_size = -1, float pixel_scale = 1.0);

579 9 threshold 0 4 653 19 PNMImage::threshold 0 1 282 1004
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::threshold
//       Access: Published
//  Description: Selectively copies each pixel from either one source
//               or another source, depending on the pixel value of
//               the indicated channel of select_image.
//
//               For each pixel (x, y):
//
//               s = select_image.get_channel(x, y, channel). Set this
//               image's (x, y) to:
//
//               lt.get_xel(x, y) if s < threshold, or
//
//               ge.get_xel(x, y) if s >= threshold
//
//               Any of select_image, lt, or ge may be the same
//               PNMImge object as this image, or the same as each
//               other; or they may all be different. All images must
//               be the same size.  As a special case, lt and ge may
//               both be 1x1 images instead of the source image size.
////////////////////////////////////////////////////////////////////
125
void PNMImage::threshold(PNMImage const &select_image, int channel, float threshold, PNMImage const &lt, PNMImage const &ge);

580 20 fill_distance_inside 0 4 653 30 PNMImage::fill_distance_inside 0 1 283 1231
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_inside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest dark pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A dark pixel is
//               defined as one whose pixel value is < threshold.
//
//               If shrink_from_border is true, then the mask image is
//               considered to be surrounded by a border of dark
//               pixels; otherwise, the border isn't considered.
//
//               This can be used, in conjunction with threshold, to
//               shrink a mask image inwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
////////////////////////////////////////////////////////////////////
112
void PNMImage::fill_distance_inside(PNMImage const &mask, float threshold, int radius, bool shrink_from_border);

581 21 fill_distance_outside 0 4 653 31 PNMImage::fill_distance_outside 0 1 284 1030
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_outside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest white pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A white pixel is
//               defined as one whose pixel value is >= threshold.
//
//               This can be used, in conjunction with threshold, to
//               grow a mask image outwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
////////////////////////////////////////////////////////////////////
88
void PNMImage::fill_distance_outside(PNMImage const &mask, float threshold, int radius);

582 7 rescale 0 4 653 17 PNMImage::rescale 0 1 285 537
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::rescale
//       Access: Published
//  Description: Rescales the RGB channel values so that any values in
//               the original image between min_val and max_val are
//               expanded to the range 0 .. 1.  Values below min_val
//               are set to 0, and values above max_val are set to 1.
//               Does not affect the alpha channel, if any.
////////////////////////////////////////////////////////////////////
53
void PNMImage::rescale(float min_val, float max_val);

583 11 render_spot 0 4 653 21 PNMImage::render_spot 0 1 286 781
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::render_spot
//       Access: Published
//  Description: Renders a solid-color circle, with a fuzzy edge, into
//               the center of the PNMImage.  If the PNMImage is
//               non-square, this actually renders an ellipse.
//
//               The min_radius and max_radius are in the scale 0..1,
//               where 1.0 means the full width of the image.  If
//               min_radius == max_radius, the edge is sharp (but
//               still antialiased); otherwise, the pixels between
//               min_radius and max_radius are smoothly blended
//               between fg and bg colors.
////////////////////////////////////////////////////////////////////
101
void PNMImage::render_spot(LColorf const &fg, LColorf const &bg, float min_radius, float max_radius);

584 13 expand_border 0 4 653 23 PNMImage::expand_border 0 1 287 472
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::expand_border
//       Access: Published
//  Description: Expands the image by the indicated number of pixels
//               on each edge.  The new pixels are set to the
//               indicated color.
//
//               If any of the values is negative, this actually crops
//               the image.
////////////////////////////////////////////////////////////////////
93
void PNMImage::expand_border(int left, int right, int bottom, int top, LColorf const &color);

585 10 box_filter 0 4 653 20 PNMImage::box_filter 0 1 288 394
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter
//       Access: Published
//  Description: This flavor of box_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
////////////////////////////////////////////////////////////////////
53
inline void PNMImage::box_filter(float radius = 1.0);

586 15 gaussian_filter 0 4 653 25 PNMImage::gaussian_filter 0 1 289 404
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter
//       Access: Published
//  Description: This flavor of gaussian_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::gaussian_filter(float radius = 1.0);

587 23 unfiltered_stretch_from 0 4 653 33 PNMImage::unfiltered_stretch_from 0 1 290 334
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unfiltered_stretch_from
//       Access: Published
//  Description: Resizes from the indicated image into this one by
//               performing a nearest-point sample.
////////////////////////////////////////////////////////////////////
61
void PNMImage::unfiltered_stretch_from(PNMImage const &copy);

588 15 box_filter_from 0 4 653 25 PNMImage::box_filter_from 0 1 291 530
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
67
void PNMImage::box_filter_from(float radius, PNMImage const &copy);

589 20 gaussian_filter_from 0 4 653 30 PNMImage::gaussian_filter_from 0 1 292 535
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
72
void PNMImage::gaussian_filter_from(float radius, PNMImage const &copy);

590 17 quick_filter_from 0 4 653 27 PNMImage::quick_filter_from 0 1 293 731
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
////////////////////////////////////////////////////////////////////
89
void PNMImage::quick_filter_from(PNMImage const &copy, int xborder = 0, int yborder = 0);

591 14 make_histogram 0 4 653 24 PNMImage::make_histogram 0 1 294 294
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_histogram
//       Access: Published
//  Description: Computes a histogram of the colors used in the
//               image.
////////////////////////////////////////////////////////////////////
63
void PNMImage::make_histogram(PNMImageHeader::Histogram &hist);

592 17 perlin_noise_fill 0 4 653 27 PNMImage::perlin_noise_fill 0 2 295 296 880
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Variant of perlin_noise_fill that uses an
//               existing StackedPerlinNoise2 object.
////////////////////////////////////////////////////////////////////
166
void PNMImage::perlin_noise_fill(float sx, float sy, int table_size = 256, unsigned long int seed = 0);
void PNMImage::perlin_noise_fill(StackedPerlinNoise2 &perlin);

593 14 remix_channels 0 4 653 24 PNMImage::remix_channels 0 1 297 370
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remix_channels
//       Access: Published
//  Description: Transforms every pixel using the operation
//               (Ro,Go,Bo) = conv.xform_point(Ri,Gi,Bi);
//               Input must be a color image.
////////////////////////////////////////////////////////////////////
52
void PNMImage::remix_channels(LMatrix4 const &conv);

594 13 gamma_correct 0 4 653 23 PNMImage::gamma_correct 0 1 298 474
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
////////////////////////////////////////////////////////////////////
70
inline void PNMImage::gamma_correct(float from_gamma, float to_gamma);

595 19 gamma_correct_alpha 0 4 653 29 PNMImage::gamma_correct_alpha 0 1 299 481
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
////////////////////////////////////////////////////////////////////
76
inline void PNMImage::gamma_correct_alpha(float from_gamma, float to_gamma);

596 14 apply_exponent 0 4 653 24 PNMImage::apply_exponent 0 4 300 301 302 303 1934
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
////////////////////////////////////////////////////////////////////
356
inline void PNMImage::apply_exponent(float gray_exponent);
inline void PNMImage::apply_exponent(float gray_exponent, float alpha_exponent);
inline void PNMImage::apply_exponent(float red_exponent, float green_exponent, float blue_exponent);
void PNMImage::apply_exponent(float red_exponent, float green_exponent, float blue_exponent, float alpha_exponent);

597 15 get_average_xel 0 4 653 25 PNMImage::get_average_xel 0 1 304 302
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image.
////////////////////////////////////////////////////////////////////
49
LRGBColorf PNMImage::get_average_xel(void) const;

598 17 get_average_xel_a 0 4 653 27 PNMImage::get_average_xel_a 0 1 305 333
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel_a
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image, including the alpha channel.
////////////////////////////////////////////////////////////////////
48
LColorf PNMImage::get_average_xel_a(void) const;

599 16 get_average_gray 0 4 653 26 PNMImage::get_average_gray 0 1 306 317
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_gray
//       Access: Published
//  Description: Returns the average grayscale component of all of
//               the pixels in the image.
////////////////////////////////////////////////////////////////////
45
float PNMImage::get_average_gray(void) const;

600 16 do_fill_distance 0 4 653 26 PNMImage::do_fill_distance 0 1 307 343
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::do_fill_distance
//       Access: Private
//  Description: Recursively fills in the minimum distance measured
//               from a certain set of points into the gray channel.
////////////////////////////////////////////////////////////////////
55
void PNMImage::do_fill_distance(int xi, int yi, int d);

601 4 size 0 4 654 19 PNMImage::Row::size 0 1 325 255
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::size
//       Access: Published
//  Description: Get the number of pixels in the row.
////////////////////////////////////////////////////////////////////
46
inline size_t PNMImage::Row::size(void) const;

602 11 operator [] 0 4 654 26 PNMImage::Row::operator [] 0 1 326 0
55
inline LColorf PNMImage::Row::operator [](int x) const;

603 11 __setitem__ 0 4 654 26 PNMImage::Row::__setitem__ 0 1 327 376
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.  If
//               the image has no alpha channel, the alpha component
//               is ignored.
////////////////////////////////////////////////////////////////////
64
inline void PNMImage::Row::__setitem__(int x, LColorf const &v);

604 11 get_xel_val 0 4 654 26 PNMImage::Row::get_xel_val 0 1 328 276
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
////////////////////////////////////////////////////////////////////
46
inline xel &PNMImage::Row::get_xel_val(int x);

605 11 set_xel_val 0 4 654 26 PNMImage::Row::set_xel_val 0 1 329 274
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::Row::set_xel_val(int x, xel const &v);

606 13 get_alpha_val 0 4 654 28 PNMImage::Row::get_alpha_val 0 1 330 282
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
////////////////////////////////////////////////////////////////////
56
inline xelval PNMImage::Row::get_alpha_val(int x) const;

607 13 set_alpha_val 0 4 654 28 PNMImage::Row::set_alpha_val 0 1 331 280
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the alpha value at the given column in the row.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::Row::set_alpha_val(int x, xelval v);

608 4 ~Row 0 4 654 19 PNMImage::Row::~Row 0 0 0
26
PNMImage::Row::~Row(void);

609 4 size 0 4 655 20 PNMImage::CRow::size 0 1 332 256
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::size
//       Access: Published
//  Description: Get the number of pixels in the row.
////////////////////////////////////////////////////////////////////
47
inline size_t PNMImage::CRow::size(void) const;

610 11 operator [] 0 4 655 27 PNMImage::CRow::operator [] 0 1 333 0
56
inline LColorf PNMImage::CRow::operator [](int x) const;

611 11 get_xel_val 0 4 655 27 PNMImage::CRow::get_xel_val 0 1 334 277
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
////////////////////////////////////////////////////////////////////
52
inline xel PNMImage::CRow::get_xel_val(int x) const;

612 13 get_alpha_val 0 4 655 29 PNMImage::CRow::get_alpha_val 0 1 335 283
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::CRow::get_alpha_val(int x) const;

613 5 ~CRow 0 4 655 21 PNMImage::CRow::~CRow 0 0 0
28
PNMImage::CRow::~CRow(void);

614 11 operator [] 0 4 653 21 PNMImage::operator [] 0 2 308 309 0
108
inline PNMImage::Row PNMImage::operator [](int y);
inline PNMImage::CRow PNMImage::operator [](int y) const;

615 10 operator ~ 0 68 653 20 PNMImage::operator ~ 0 1 310 0
42
PNMImage PNMImage::operator ~(void) const;

616 10 operator + 0 4 653 20 PNMImage::operator + 0 2 311 312 0
132
inline PNMImage PNMImage::operator +(PNMImage const &other) const;
inline PNMImage PNMImage::operator +(LColorf const &other) const;

617 10 operator - 0 4 653 20 PNMImage::operator - 0 2 313 314 0
132
inline PNMImage PNMImage::operator -(PNMImage const &other) const;
inline PNMImage PNMImage::operator -(LColorf const &other) const;

618 10 operator * 0 4 653 20 PNMImage::operator * 0 3 315 316 317 0
194
inline PNMImage PNMImage::operator *(PNMImage const &other) const;
inline PNMImage PNMImage::operator *(float multiplier) const;
inline PNMImage PNMImage::operator *(LColorf const &other) const;

619 11 operator += 0 4 653 21 PNMImage::operator += 0 2 318 319 0
100
void PNMImage::operator +=(PNMImage const &other);
void PNMImage::operator +=(LColorf const &other);

620 11 operator -= 0 4 653 21 PNMImage::operator -= 0 2 320 321 0
100
void PNMImage::operator -=(PNMImage const &other);
void PNMImage::operator -=(LColorf const &other);

621 11 operator *= 0 4 653 21 PNMImage::operator *= 0 3 322 323 324 0
146
void PNMImage::operator *=(PNMImage const &other);
void PNMImage::operator *=(float multiplier);
void PNMImage::operator *=(LColorf const &other);

622 10 PNMPainter 0 4 656 22 PNMPainter::PNMPainter 0 1 336 896
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
////////////////////////////////////////////////////////////////////
64
PNMPainter::PNMPainter(PNMImage &image, int xo = 0, int yo = 0);

623 11 ~PNMPainter 0 4 656 23 PNMPainter::~PNMPainter 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline PNMPainter::~PNMPainter(void);

624 7 set_pen 0 4 656 19 PNMPainter::set_pen 0 1 337 608
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_pen
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for drawing
//               lines and edges.  If the brush is a bitmap brush, its
//               image will be smeared pixelwise along the line.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the pen.  It is not
//               necessary to keep a separate pointer to it.
////////////////////////////////////////////////////////////////////
47
inline void PNMPainter::set_pen(PNMBrush *pen);

625 7 get_pen 0 4 656 19 PNMPainter::get_pen 0 1 338 259
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_pen
//       Access: Published
//  Description: Returns the current pen.  See set_pen().
////////////////////////////////////////////////////////////////////
49
inline PNMBrush *PNMPainter::get_pen(void) const;

626 8 set_fill 0 4 656 20 PNMPainter::set_fill 0 1 339 639
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_fill
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for filling
//               in the interiors of objects.  If the brush is a
//               bitmap brush, its image will be tiled throughout the
//               space.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the fill brush.  It
//               is not necessary to keep a separate pointer to it.
////////////////////////////////////////////////////////////////////
49
inline void PNMPainter::set_fill(PNMBrush *fill);

627 8 get_fill 0 4 656 20 PNMPainter::get_fill 0 1 340 268
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_fill
//       Access: Published
//  Description: Returns the current fill brush.  See set_fill().
////////////////////////////////////////////////////////////////////
50
inline PNMBrush *PNMPainter::get_fill(void) const;

628 10 draw_point 0 4 656 22 PNMPainter::draw_point 0 1 341 305
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_point
//       Access: Published
//  Description: Draws an antialiased point on the PNMImage, using the
//               current pen.
////////////////////////////////////////////////////////////////////
53
inline void PNMPainter::draw_point(float x, float y);

629 9 draw_line 0 4 656 21 PNMPainter::draw_line 0 1 342 303
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_line
//       Access: Published
//  Description: Draws an antialiased line on the PNMImage, using the
//               current pen.
////////////////////////////////////////////////////////////////////
67
void PNMPainter::draw_line(float xa, float ya, float xb, float yb);

630 14 draw_rectangle 0 4 656 26 PNMPainter::draw_rectangle 0 1 343 488
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_rectangle
//       Access: Published
//  Description: Draws a filled rectangule on the PNMImage, using the
//               current pen for the outline, and the current fill
//               brush for the interior.
//
//               The two coordinates specify any two diagonally
//               opposite corners.
////////////////////////////////////////////////////////////////////
72
void PNMPainter::draw_rectangle(float xa, float ya, float xb, float yb);

343
1 0 0 7 2 657 360 0 0 0 
2 0 0 7 2 657 360 0 0 3 1 r 1 632  1 g 1 632  1 b 1 632  
3 0 0 6 3 658 0 0 0 0 
4 0 0 4 4 659 0 0 0 3 4 this 3 657  1 i 1 658  10 assign_val 1 632  
5 0 0 6 4 632 0 0 0 2 4 this 3 660  1 i 1 658  
6 0 0 7 5 657 360 0 0 2 4 this 3 660  5 other 1 660  
7 0 0 7 6 657 360 0 0 2 4 this 3 660  5 other 1 660  
8 0 0 7 7 657 360 0 0 2 4 this 3 660  4 mult 1 662  
9 0 0 6 8 657 0 0 0 2 4 this 3 657  5 other 1 660  
10 0 0 6 9 657 0 0 0 2 4 this 3 657  5 other 1 660  
11 0 0 6 10 657 0 0 0 2 4 this 3 657  4 mult 1 662  
12 0 0 4 11 659 0 0 0 2 4 this 3 657  3 out 1 663  
13 0 0 4 15 659 0 0 0 2 4 this 3 657  5 value 1 632  
14 0 0 6 14 632 0 0 0 1 4 this 3 660  
15 0 0 4 18 659 0 0 0 2 4 this 3 657  5 value 1 632  
16 0 0 6 17 632 0 0 0 1 4 this 3 660  
17 0 0 4 21 659 0 0 0 2 4 this 3 657  5 value 1 632  
18 0 0 6 20 632 0 0 0 1 4 this 3 660  
19 0 0 6 27 667 0 0 0 1 4 this 3 665  
20 0 0 6 28 658 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_num_extensions
//       Access: Published, Virtual
//  Description: Returns the number of different possible filename
//               extensions associated with this particular file type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 665  
21 0 0 6 29 667 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_extension
//       Access: Published, Virtual
//  Description: Returns the nth possible filename extension
//               associated with this particular file type, without a
//               leading dot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 665  1 n 1 658  
22 0 0 6 30 667 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_suggested_extension
//       Access: Published, Virtual
//  Description: Returns a suitable filename extension (without a
//               leading dot) to suggest for files of this type, or
//               empty string if no suggestions are available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 665  
23 0 0 7 31 669 0 0 0 0 
24 0 0 6 34 658 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 670  
25 0 0 6 35 672 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 670  1 n 1 658  
26 0 0 6 36 672 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               extension.  Returns a suitable PNMFileType pointer,
//               or NULL if no type can be determined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 670  8 filename 1 667  
27 0 0 6 37 672 0 0 544 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_magic_number
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               magic number, the first two bytes read from the
//               file.  Returns a suitable PNMFileType pointer, or
//               NULL if no type can be determined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 670  12 magic_number 1 667  
28 0 0 6 38 672 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_by_handle
//       Access: Published
//  Description: Returns the PNMFileType instance stored in the
//               registry for the given TypeHandle, e.g. as retrieved
//               by a previous call to get_type() on the type
//               instance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 670  6 handle 1 669  
29 0 0 4 39 659 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported image file types to the
//               indicated output stream, one per line.
//////////////////////////////////////////////////////////////////// 3 4 this 3 670  3 out 1 663  12 indent_level 1 658  
30 0 0 6 40 673 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global PNMFileTypeRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
31 0 0 7 42 674 376 0 226 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
32 0 0 7 42 674 376 0 231 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 675  
33 0 0 6 43 674 0 0 0 2 4 this 3 674  4 copy 1 675  
34 0 0 6 46 639 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_type
//       Access: Published
//  Description: Returns the image type of the image, as an enumerated
//               value.  This is really just the number of channels
//               cast to the enumerated type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
35 0 0 6 47 658 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_num_channels
//       Access: Published
//  Description: Returns the number of channels in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
36 0 0 6 48 677 0 0 551 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published
//  Description: Returns false if the image is a full-color image, and
//               has red, green, and blue components; true if it is a
//               grayscale image and has only a gray component.  (The
//               gray color is actually stored in the blue channel,
//               and the red and green channels are ignored.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
37 0 0 6 48 677 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published, Static
//  Description: This static variant of is_grayscale() returns true if
//               the indicated image type represents a grayscale
//               image, false otherwise.
//////////////////////////////////////////////////////////////////// 1 10 color_type 1 639  
38 0 0 6 49 677 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published
//  Description: Returns true if the image includes an alpha channel,
//               false otherwise.  Unlike is_grayscale(), if this
//               returns false it is an error to call any of the
//               functions accessing the alpha channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
39 0 0 6 49 677 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published, Static
//  Description: This static variant of has_alpha() returns true if
//               the indicated image type includes an alpha channel,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 10 color_type 1 639  
40 0 0 6 50 678 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_maxval
//       Access: Published
//  Description: Returns the maximum channel value allowable for any
//               pixel in this image; for instance, 255 for a typical
//               8-bit-per-channel image.  A pixel with this value is
//               full on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
41 0 0 6 51 679 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_space
//       Access: Published
//  Description: Returns the color space that the image is encoded
//               in, or CS_unspecified if unknown.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
42 0 0 6 52 658 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_x_size
//       Access: Published
//  Description: Returns the number of pixels in the X direction.
//               This is one more than the largest allowable X
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
43 0 0 6 53 658 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_y_size
//       Access: Published
//  Description: Returns the number of pixels in the Y direction.
//               This is one more than the largest allowable Y
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
44 0 0 6 54 667 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_comment
//       Access: Published
//  Description: Gets the user comment from the file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
45 0 0 4 55 659 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_comment
//       Access: Published
//  Description: Writes a user comment string to the image (header).
//////////////////////////////////////////////////////////////////// 2 4 this 3 674  7 comment 1 667  
46 0 0 6 56 677 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_type
//       Access: Published
//  Description: Returns true if the PNMImageHeader knows what type it
//               is, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
47 0 0 6 57 672 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_type
//       Access: Published
//  Description: If the file type is known (e.g. has_type() returns
//               true), returns its PNMFileType pointer; otherwise,
//               returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 675  
48 0 0 4 58 659 0 0 583 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_type
//       Access: Published
//  Description: Sets the file type of this PNMImage.  This will be
//               the default type used when an image is read, if the
//               type cannot be determined by magic number or inferred
//               by extension, or the type used when the image is
//               written, if the type cannot be inferred from the
//               filename extension.
//////////////////////////////////////////////////////////////////// 2 4 this 3 674  4 type 1 672  
49 0 0 6 59 677 0 0 498 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 674  8 filename 1 680  4 type 1 672  19 report_unknown_type 1 677  
50 0 0 6 59 677 0 0 714 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 5 4 this 3 674  4 data 1 683  8 filename 1 667  4 type 1 672  19 report_unknown_type 1 677  
51 0 0 6 60 685 0 0 689 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 675  8 filename 1 680  4 type 1 672  19 report_unknown_type 1 677  
52 0 0 6 60 685 0 0 1414 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 7 4 this 3 675  4 file 1 683  9 owns_file 1 677  8 filename 1 680  12 magic_number 1 667  4 type 1 672  19 report_unknown_type 1 677  
53 0 0 6 61 687 0 0 694 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing an image to the indicated filename,
//               or NULL if the filename cannot be written for some
//               reason.  The filename "-" always stands for standard
//               output.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 675  8 filename 1 680  4 type 1 672  
54 0 0 6 61 687 0 0 1165 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 5 4 this 3 675  4 file 1 663  9 owns_file 1 677  8 filename 1 680  4 type 1 672  
55 0 0 6 62 677 0 0 602 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_magic_number
//       Access: Published, Static
//  Description: Ensures that the first n bytes of the file are read
//               into magic_number.  If magic_number is initially
//               nonempty, assumes these represent the first few bytes
//               already extracted.  Returns true if successful, false
//               if an end of file or error occurred before num_bytes
//               could be read.
//////////////////////////////////////////////////////////////////// 3 4 file 1 683  12 magic_number 1 689  9 num_bytes 1 658  
56 0 0 4 63 659 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 675  3 out 1 663  
57 0 0 7 65 694 412 0 243 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 692  
58 0 0 7 65 694 412 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 3 rgb 1 695  
59 0 0 7 65 694 412 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 3 rgb 1 695  5 alpha 1 678  
60 0 0 7 65 694 412 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 gray_value 1 678  
61 0 0 7 65 694 412 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 10 gray_value 1 678  5 alpha 1 678  
62 0 0 7 65 694 412 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 3 red 1 678  5 green 1 678  4 blue 1 678  
63 0 0 7 65 694 412 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 3 red 1 678  5 green 1 678  4 blue 1 678  5 alpha 1 678  
64 0 0 6 66 694 0 0 0 2 4 this 3 694  4 copy 1 692  
65 0 0 6 67 677 0 0 0 2 4 this 3 692  5 other 1 692  
66 0 0 6 68 677 0 0 0 2 4 this 3 692  5 other 1 692  
67 0 0 6 69 677 0 0 0 2 4 this 3 692  5 other 1 692  
68 0 0 6 70 658 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::compare_to
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 692  5 other 1 692  
69 0 0 6 71 678 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_red
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 692  
70 0 0 6 72 678 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_green
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 692  
71 0 0 6 73 678 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_blue
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 692  
72 0 0 6 74 678 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_alpha
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 692  
73 0 0 4 75 659 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_red
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 694  3 red 1 678  
74 0 0 4 76 659 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_green
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 694  5 green 1 678  
75 0 0 4 77 659 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_blue
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 694  4 blue 1 678  
76 0 0 4 78 659 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_alpha
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 694  5 alpha 1 678  
77 0 0 6 79 678 0 0 0 2 4 this 3 692  1 n 1 658  
78 0 0 6 80 658 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::size
//       Access: Published, Static
//  Description: Specifies the number of components in the PixelSpec;
//               this is always 4, regardless of the type of image it
//               was taken from.
//////////////////////////////////////////////////////////////////// 0 
79 0 0 4 81 659 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::output
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 692  3 out 1 663  
80 0 0 7 92 697 419 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
81 0 0 6 93 658 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_num_pixels
//       Access: Published
//  Description: Returns the number of unique pixel colors in the
//               histogram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 698  
82 0 0 6 94 692 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_pixel
//       Access: Published
//  Description: Returns the nth unique pixel color in the histogram.
//               These are ordered by default from most common to
//               least common.
//////////////////////////////////////////////////////////////////// 2 4 this 3 698  1 n 1 658  
83 0 0 6 95 658 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               indicated pixel color.
//////////////////////////////////////////////////////////////////// 2 4 this 3 698  5 pixel 1 692  
84 0 0 6 95 658 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               nth unique pixel color in the histogram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 698  1 n 1 658  
85 0 0 4 96 659 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::write
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 698  3 out 1 663  
86 0 0 7 99 700 496 0 219 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
87 0 0 7 99 700 496 0 224 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 701  
88 0 0 6 100 700 0 0 0 2 4 this 3 700  4 copy 1 701  
89 0 0 4 101 659 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Eliminates all data in the file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 700  
90 0 0 4 101 659 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Resets to an empty table with a specific size.  The
//               case of num_channels == 0 is allowed only in the case
//               that x_size and y_size are also == 0; and this makes
//               an empty (and invalid) PfmFile.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  6 x_size 1 658  6 y_size 1 658  12 num_channels 1 658  
91 0 0 6 102 677 0 0 501 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated file, returning
//               true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  8 fullpath 1 680  
92 0 0 6 102 677 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data using the indicated PNMReader.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  6 reader 1 685  
93 0 0 6 102 677 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated stream,
//               returning true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  2 in 1 683  8 fullpath 1 680  
94 0 0 6 103 677 0 0 589 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated file, returning
//               true on success, false on failure.
//
//               If the type implied by the filename extension
//               supports floating-point, the data will be written
//               directly; otherwise, the floating-point data will be
//               quietly converted to the appropriate integer type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  8 fullpath 1 680  
95 0 0 6 103 677 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data using the indicated PNMWriter.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  6 writer 1 687  
96 0 0 6 103 677 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated stream,
//               returning true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  3 out 1 663  8 fullpath 1 680  
97 0 0 6 104 677 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::load
//       Access: Published
//  Description: Fills the PfmFile with the data from the indicated
//               PNMImage, converted to floating-point values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  8 pnmimage 1 703  
98 0 0 6 105 677 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store
//       Access: Published
//  Description: Copies the data to the indicated PNMImage, converting
//               to RGB values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  8 pnmimage 1 705  
99 0 0 6 106 677 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store_mask
//       Access: Published
//  Description: Stores 1 or 0 values into the indicated PNMImage,
//               according to has_point() for each pixel.  Each valid
//               point gets a 1 value; each nonexistent point gets a 0
//               value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  8 pnmimage 1 705  
100 0 0 6 107 677 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_valid
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
101 0 0 6 108 706 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
102 0 0 4 109 659 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  5 scale 1 706  
103 0 0 6 110 677 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_point
//       Access: Published
//  Description: Returns true if there is a valid point at x, y.  This
//               always returns true unless a "no data" value has been
//               set, in which case it returns false if the point at
//               x, y is the "no data" value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  1 x 1 658  1 y 1 658  
104 0 0 6 111 706 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_channel
//       Access: Published
//  Description: Returns the cth channel of the point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 658  1 y 1 658  1 c 1 658  
105 0 0 4 112 659 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_channel
//       Access: Published
//  Description: Replaces the cth channel of the point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 5 4 this 3 700  1 x 1 658  1 y 1 658  1 c 1 658  5 value 1 706  
106 0 0 6 113 706 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point1
//       Access: Published
//  Description: Returns the 1-component point value at the indicated
//               point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  1 x 1 658  1 y 1 658  
107 0 0 4 114 659 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point1
//       Access: Published
//  Description: Replaces the 1-component point value at the indicated
//               point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  1 x 1 658  1 y 1 658  5 point 1 706  
108 0 0 6 115 708 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point2
//       Access: Published
//  Description: Returns the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  1 x 1 658  1 y 1 658  
109 0 0 4 116 659 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  1 x 1 658  1 y 1 658  5 point 1 711  
110 0 0 4 116 659 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  1 x 1 658  1 y 1 658  5 point 1 714  
111 0 0 6 117 717 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point2
//       Access: Published
//  Description: Returns a modifiable 2-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  1 x 1 658  1 y 1 658  
112 0 0 6 118 718 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  1 x 1 658  1 y 1 658  
113 0 0 4 119 659 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  1 x 1 658  1 y 1 658  5 point 1 721  
114 0 0 4 119 659 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  1 x 1 658  1 y 1 658  5 point 1 724  
115 0 0 6 120 727 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  1 x 1 658  1 y 1 658  
116 0 0 6 121 718 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point3
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  1 x 1 658  1 y 1 658  
117 0 0 4 122 659 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  1 x 1 658  1 y 1 658  5 point 1 721  
118 0 0 4 122 659 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  1 x 1 658  1 y 1 658  5 point 1 724  
119 0 0 6 123 727 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point3
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  1 x 1 658  1 y 1 658  
120 0 0 6 124 728 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point4
//       Access: Published
//  Description: Returns the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  1 x 1 658  1 y 1 658  
121 0 0 4 125 659 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  1 x 1 658  1 y 1 658  5 point 1 731  
122 0 0 4 125 659 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  1 x 1 658  1 y 1 658  5 point 1 734  
123 0 0 6 126 737 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point4
//       Access: Published
//  Description: Returns a modifiable 4-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  1 x 1 658  1 y 1 658  
124 0 0 4 127 659 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  5 value 1 708  
125 0 0 4 127 659 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  5 value 1 718  
126 0 0 4 127 659 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  5 value 1 728  
127 0 0 4 127 659 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  5 value 1 706  
128 0 0 4 128 659 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_nan
//       Access: Published
//  Description: Fills the table with all NaN.
//////////////////////////////////////////////////////////////////// 1 4 this 3 700  
129 0 0 4 129 659 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_no_data_value
//       Access: Published
//  Description: Fills the table with the current no_data value, so
//               that the table is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 700  
130 0 0 4 130 659 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, leaving the other channels unchanged.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  7 channel 1 658  5 value 1 706  
131 0 0 4 131 659 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, leaving the
//               other channels unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  7 channel 1 658  
132 0 0 4 132 659 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, but only where the table already has a data
//               point.  Leaves empty points unchanged.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  7 channel 1 658  5 value 1 706  
133 0 0 4 133 659 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, but only where
//               the table already has a data point.  Leaves empty
//               points unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  7 channel 1 658  
134 0 0 6 134 677 0 0 587 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_average_point
//       Access: Published
//  Description: Computes the unweighted average point of all points
//               within the box centered at (x, y) with the indicated
//               Manhattan-distance radius.  Missing points are
//               assigned the value of their nearest neighbor.
//               Returns true if successful, or false if the point
//               value cannot be determined.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  6 result 1 727  1 x 1 706  1 y 1 706  6 radius 1 706  
135 0 0 6 135 677 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_bilinear_point
//       Access: Published
//  Description: Computes the weighted average of the four nearest
//               points to the floating-point index (x, y).  Returns
//               true if the point has any contributors, false if the
//               point is unknown.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  6 result 1 727  1 x 1 706  1 y 1 706  
136 0 0 6 136 677 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_min_max
//       Access: Published
//  Description: Calculates the minimum and maximum x, y, and z depth
//               component values, representing the bounding box of
//               depth values, and places them in the indicated
//               vectors.  Returns true if successful, false if the
//               mesh contains no points.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  10 min_points 1 738  10 max_points 1 738  
137 0 0 6 137 677 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  5 range 1 739  
138 0 0 6 137 677 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  5 range 1 740  
139 0 0 6 138 677 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_row_empty
//       Access: Published
//  Description: Returns true if all of the points on row y, in the range
//               [x_begin, x_end), are the no_data value, or false if
//               any one of these points has a value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 y 1 658  7 x_begin 1 658  5 x_end 1 658  
140 0 0 6 139 677 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_column_empty
//       Access: Published
//  Description: Returns true if all of the points on column x, from
//               [y_begin, y_end), are the no_data value, or false if
//               any one of these points has a value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 658  7 y_begin 1 658  5 y_end 1 658  
141 0 0 4 140 659 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_zero_special
//       Access: Published
//  Description: Sets the zero_special flag.  When this flag is true,
//               values of (0, 0, 0) in the pfm file are treated as a
//               special case, and are not processed.
//
//               This is a special case of set_no_data_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  12 zero_special 1 677  
142 0 0 4 141 659 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_chan4
//       Access: Published
//  Description: Sets the no_data_chan4 flag.  When this flag is true,
//               and the pfm file has 4 channels, then a negative
//               value in the fourth channel indicates no data.  When
//               it is false, all points are valid.
//
//               This is a special case of set_no_data_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  5 chan4 1 677  
143 0 0 4 142 659 0 0 562 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_nan
//       Access: Published
//  Description: Sets the no_data_nan flag.  When num_channels is
//               nonzero, then a NaN value in any of the first
//               num_channels channels indicates no data for that
//               point.  If num_channels is zero, then all points are
//               valid.
//
//               This is a special case of set_no_data_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  12 num_channels 1 658  
144 0 0 4 143 659 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  13 no_data_value 1 741  
145 0 0 4 143 659 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  13 no_data_value 1 728  
146 0 0 4 144 659 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  13 no_data_value 1 741  
147 0 0 4 144 659 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  13 no_data_value 1 728  
148 0 0 4 145 659 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Removes the special value that means "no data" when it
//               appears in the pfm file.  All points will thus be
//               considered valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 700  
149 0 0 6 146 677 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_value
//       Access: Published
//  Description: Returns whether a "no data" value has been
//               established by set_no_data_value().
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
150 0 0 6 147 677 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_threshold
//       Access: Published
//  Description: Returns whether a "no data" threshold value has been
//               established by set_no_data_threshold().
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
151 0 0 6 148 728 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_no_data_value
//       Access: Published
//  Description: If has_no_data_value() returns true, this returns the
//               particular "no data" value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
152 0 0 4 149 659 0 0 422 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::resize
//       Access: Published
//  Description: Applies a simple filter to resample the pfm file
//               in-place to the indicated size.  Don't confuse this
//               with applying a scale to all of the points via
//               xform().
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  10 new_x_size 1 658  10 new_y_size 1 658  
153 0 0 4 150 659 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  6 radius 1 707  4 copy 1 701  
154 0 0 4 151 659 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  6 radius 1 707  4 copy 1 701  
155 0 0 4 152 659 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  4 copy 1 701  
156 0 0 4 153 659 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 700  
157 0 0 4 154 659 0 0 661 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the table
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  6 flip_x 1 677  6 flip_y 1 677  9 transpose 1 677  
158 0 0 4 155 659 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  9 transform 1 744  
159 0 0 4 155 659 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  9 transform 1 747  
160 0 0 4 156 659 0 0 1065 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::forward_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.  
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = this(dist(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis is inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  4 dist 1 701  12 scale_factor 1 706  
161 0 0 4 157 659 0 0 1063 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = dist(this(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis in inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  4 dist 1 701  12 scale_factor 1 706  
162 0 0 4 158 659 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::merge
//       Access: Published
//  Description: Wherever there is missing data in this PfmFile (that
//               is, wherever has_point() returns false), copy data
//               from the other PfmFile, which must be exactly the
//               same dimensions as this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 700  5 other 1 701  
163 0 0 4 159 659 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile (which could be same as this
//               PfmFile) into the specified channel of this one.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  10 to_channel 1 658  5 other 1 701  12 from_channel 1 658  
164 0 0 4 160 659 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel_masked
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile, but only where the other file has
//               a data point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 700  10 to_channel 1 658  5 other 1 701  12 from_channel 1 658  
165 0 0 4 161 659 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_crop
//       Access: Published
//  Description: Reduces the PFM file to the cells in the rectangle
//               bounded by (x_begin, x_end, y_begin, y_end), where
//               the _end cells are not included.
//////////////////////////////////////////////////////////////////// 5 4 this 3 700  7 x_begin 1 658  5 x_end 1 658  7 y_begin 1 658  5 y_end 1 658  
166 0 0 4 162 659 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear_to_texcoords
//       Access: Published
//  Description: Replaces this PfmFile with a new PfmFile of size
//               x_size x y_size x 3, containing the x y 0 values in
//               the range 0 .. 1 according to the x y index.
//////////////////////////////////////////////////////////////////// 3 4 this 3 700  6 x_size 1 658  6 y_size 1 658  
167 0 0 6 163 658 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::pull_spot
//       Access: Published
//  Description: Applies delta * t to the point values within radius
//               (xr, yr) distance of (xc, yc).  The t value is scaled
//               from 1.0 at the center to 0.0 at radius (xr, yr), and
//               this scale follows the specified exponent.  Returns
//               the number of points affected.
//////////////////////////////////////////////////////////////////// 7 4 this 3 700  5 delta 1 728  2 xc 1 707  2 yc 1 707  2 xr 1 707  2 yr 1 707  8 exponent 1 707  
168 0 0 6 164 677 0 0 487 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               points within the table.  Assumes the table contains
//               3-D points.
//
//               The return value is true if any points in the table,
//               or false if none are.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  9 min_point 1 727  9 max_point 1 727  
169 0 0 7 165 754 0 0 1039 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  6 center 1 751  10 point_dist 1 706  13 sample_radius 1 706  11 points_only 1 677  
170 0 0 7 165 754 0 0 1039 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  6 center 1 708  10 point_dist 1 706  13 sample_radius 1 706  11 points_only 1 677  
171 0 0 4 166 659 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_sample_point
//       Access: Published
//  Description: Computes the average of all the point within
//               sample_radius (manhattan distance) and the indicated
//               point.
//
//               The point coordinates are given in UV space, in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  6 result 1 727  1 x 1 706  1 y 1 706  13 sample_radius 1 706  
172 0 0 4 167 659 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 8 4 this 3 700  4 copy 1 701  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  
173 0 0 4 168 659 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.
//////////////////////////////////////////////////////////////////// 9 4 this 3 700  4 copy 1 701  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  11 pixel_scale 1 707  
174 0 0 4 169 659 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.
//////////////////////////////////////////////////////////////////// 9 4 this 3 700  4 copy 1 701  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  11 pixel_scale 1 707  
175 0 0 4 170 659 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::divide_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are divided into the pixels of the destination, after
//               scaling by the specified pixel_scale.
//               dest(x, y) = dest(x, y) / (copy(x, y) * pixel_scale).
//////////////////////////////////////////////////////////////////// 9 4 this 3 700  4 copy 1 701  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  11 pixel_scale 1 707  
176 0 0 6 171 700 0 0 0 2 4 this 3 700  10 multiplier 1 707  
177 0 0 4 172 659 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  3 out 1 663  
178 0 0 6 173 755 0 0 0 1 4 this 3 701  
179 0 0 6 174 658 0 0 0 3 4 this 3 701  4 view 1 758  5 flags 1 658  
180 0 0 7 179 760 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_transparent
//       Access: Published, Static
//  Description: Returns a new brush that does not paint anything.
//               Can be used as either a pen or a fill brush to make
//               borderless or unfilled shapes, respectively.
//////////////////////////////////////////////////////////////////// 0 
181 0 0 7 180 760 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_pixel
//       Access: Published, Static
//  Description: Returns a new brush that paints a single pixel of the
//               indicated color on a border, or paints a solid color
//               in an interior.
//////////////////////////////////////////////////////////////////// 2 5 color 1 761  6 effect 1 652  
182 0 0 7 181 760 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_spot
//       Access: Published, Static
//  Description: Returns a new brush that paints a spot of the
//               indicated color and radius.  If fuzzy is true, the
//               spot is fuzzy; otherwise, it is hard-edged.
//////////////////////////////////////////////////////////////////// 4 5 color 1 761  6 radius 1 707  5 fuzzy 1 677  6 effect 1 652  
183 0 0 7 182 760 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_image
//       Access: Published, Static
//  Description: Returns a new brush that paints with the indicated
//               image.  xc and yc indicate the pixel in the center of
//               the brush.
//
//               The brush makes a copy of the image; it is safe to
//               deallocate or modify the image after making this
//               call.
//////////////////////////////////////////////////////////////////// 4 5 image 1 703  2 xc 1 707  2 yc 1 707  6 effect 1 652  
184 0 0 7 184 705 503 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
185 0 0 7 184 705 503 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 680  4 type 1 672  
186 0 0 7 184 705 503 0 225 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 703  
187 0 0 7 184 705 503 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 6 6 x_size 1 658  6 y_size 1 658  12 num_channels 1 658  6 maxval 1 678  4 type 1 672  11 color_space 1 679  
188 0 0 6 185 705 0 0 0 2 4 this 3 705  4 copy 1 703  
189 0 0 6 187 678 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clamp_val
//       Access: Published
//  Description: A handy function to clamp values to
//               [0..get_maxval()].
//////////////////////////////////////////////////////////////////// 2 4 this 3 703  11 input_value 1 658  
190 0 0 6 188 678 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..1] to [0..get_maxval()].  Do not use this for
//               alpha values, see to_alpha_val.
//////////////////////////////////////////////////////////////////// 2 4 this 3 703  11 input_value 1 707  
191 0 0 6 189 678 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from [0..1]
//               to [0..get_maxval()].
//////////////////////////////////////////////////////////////////// 2 4 this 3 703  11 input_value 1 707  
192 0 0 6 190 707 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..get_maxval()] to [0..1].  Do not use this for
//               alpha values, see from_alpha_val.
//////////////////////////////////////////////////////////////////// 2 4 this 3 703  11 input_value 1 678  
193 0 0 6 191 707 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from
//               [0..get_maxval()] to [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 703  11 input_value 1 678  
194 0 0 4 192 659 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: Frees all memory allocated for the image, and clears
//               all its parameters (size, color, type, etc).
//////////////////////////////////////////////////////////////////// 1 4 this 3 705  
195 0 0 4 192 659 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
//////////////////////////////////////////////////////////////////// 7 4 this 3 705  6 x_size 1 658  6 y_size 1 658  12 num_channels 1 658  6 maxval 1 678  4 type 1 672  11 color_space 1 679  
196 0 0 4 193 659 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_from
//       Access: Published
//  Description: Makes this image become a copy of the other image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  4 copy 1 703  
197 0 0 4 194 659 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies a channel from one image into another.
//               Images must be the same size
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  4 copy 1 703  11 src_channel 1 658  12 dest_channel 1 658  
198 0 0 4 194 659 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
//////////////////////////////////////////////////////////////////// 10 4 this 3 705  4 copy 1 703  3 xto 1 658  3 yto 1 658  3 cto 1 658  5 xfrom 1 658  5 yfrom 1 658  5 cfrom 1 658  6 x_size 1 658  6 y_size 1 658  
199 0 0 4 195 659 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_header_from
//       Access: Published
//  Description: Copies just the header information into this image.
//               This will blow away any image data stored in the
//               image.  The new image data will be allocated, but
//               left unitialized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  6 header 1 675  
200 0 0 4 196 659 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::take_from
//       Access: Published
//  Description: Move the contents of the other image into this one,
//               and empty the other image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  4 orig 1 705  
201 0 0 4 197 659 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  4 gray 1 707  
202 0 0 4 197 659 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  3 red 1 707  5 green 1 707  4 blue 1 707  
203 0 0 4 198 659 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  4 gray 1 678  
204 0 0 4 198 659 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  3 red 1 678  5 green 1 678  4 blue 1 678  
205 0 0 4 199 659 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  5 alpha 1 707  
206 0 0 4 200 659 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill_val
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  5 alpha 1 678  
207 0 0 4 201 659 0 0 855 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_read_size
//       Access: Published
//  Description: Specifies the size to we'd like to scale the image
//               upon reading it.  This will affect the next call to
//               read().  This is usually used to reduce the image
//               size, e.g. for a thumbnail.
//
//               If the file type reader supports it (e.g. JPEG), then
//               this will scale the image during the read operation,
//               consequently reducing memory and CPU utilization.  If
//               the file type reader does not support it, this will
//               load the image normally, and them perform a linear
//               scale after it has been loaded.
//////////////////////////////////////////////////////////////////// 3 4 this 3 705  6 x_size 1 658  6 y_size 1 658  
208 0 0 4 202 659 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear_read_size
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_read_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 705  
209 0 0 6 203 677 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::has_read_size
//       Access: Published
//  Description: Returns true if set_read_size() has been called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 703  
210 0 0 6 204 658 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_x_size
//       Access: Published
//  Description: Returns the requested x_size of the image if
//               set_read_size() has been called, or the image x_size
//               otherwise (if it is known).
//////////////////////////////////////////////////////////////////// 1 4 this 3 703  
211 0 0 6 205 658 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_y_size
//       Access: Published
//  Description: Returns the requested y_size of the image if
//               set_read_size() has been called, or the image y_size
//               otherwise (if it is known).
//////////////////////////////////////////////////////////////////// 1 4 this 3 703  
212 0 0 6 206 679 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_color_space
//       Access: Published
//  Description: Returns the color space in which the image is
//               encoded.
//////////////////////////////////////////////////////////////////// 1 4 this 3 703  
213 0 0 6 207 677 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  8 filename 1 680  4 type 1 672  19 report_unknown_type 1 677  
214 0 0 6 207 677 0 0 692 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: This flavor of read() uses an already-existing
//               PNMReader to read the image file.  You can get a
//               reader via the PNMImageHeader::make_reader() methods.
//               This is a good way to examine the header of a file
//               (for instance, to determine its size) before actually
//               reading the entire image.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  6 reader 1 685  
215 0 0 6 207 677 0 0 665 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 5 4 this 3 705  4 data 1 683  8 filename 1 667  4 type 1 672  19 report_unknown_type 1 677  
216 0 0 6 208 677 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated filename.  If type
//               is non-NULL, it is a suggestion for the type of image
//               file to write.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  8 filename 1 680  4 type 1 672  
217 0 0 6 208 677 0 0 513 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: This flavor of write() uses an already-existing
//               PNMWriter to write the image file.  You can get a
//               writer via the PNMImageHeader::make_writer() methods.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 703  6 writer 1 687  
218 0 0 6 208 677 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
//////////////////////////////////////////////////////////////////// 4 4 this 3 703  4 data 1 663  8 filename 1 667  4 type 1 672  
219 0 0 6 209 677 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::is_valid
//       Access: Published
//  Description: Returns true if the image has been read in or
//               correctly initialized with a height and width.  If
//               this returns false, virtually all member functions
//               except clear() and read() are invalid function calls.
//////////////////////////////////////////////////////////////////// 1 4 this 3 703  
220 0 0 4 210 659 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_num_channels
//       Access: Published
//  Description: Changes the number of channels associated with the
//               image.  The new number of channels must be an integer
//               in the range 1 through 4, inclusive.  This will
//               allocate and/or deallocate memory as necessary to
//               accommodate; see set_color_type().
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  12 num_channels 1 658  
221 0 0 4 211 659 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_type
//       Access: Published
//  Description: Translates the image to or from grayscale, color, or
//               four-color mode.  Grayscale images are converted to
//               full-color images with R, G, B set to the original
//               gray level; color images are converted to grayscale
//               according to the value of Bright().  The alpha
//               channel, if added, is initialized to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  10 color_type 1 639  
222 0 0 4 212 659 0 0 1024 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_space
//       Access: Published
//  Description: Converts the colors in the image to the indicated
//               color space.  This may be a lossy operation, in
//               particular when going from sRGB to linear.
//               The alpha channel remains untouched.
//
//               Note that, because functions like get_xel() and
//               set_xel() work on linearized floating-point values,
//               this conversion won't affect those values (aside
//               from some minor discrepancies due to storage
//               precision).  It does affect the values used by
//               get_xel_val() and set_xel_val(), though, since
//               those operate on encoded colors.
//
//               Some color spaces, particularly scRGB, may enforce
//               the use of a particular maxval setting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  11 color_space 1 679  
223 0 0 4 213 659 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_alpha
//       Access: Published
//  Description: Adds an alpha channel to the image, if it does not
//               already have one.  The alpha channel is initialized
//               to zeros.
//////////////////////////////////////////////////////////////////// 1 4 this 3 705  
224 0 0 4 214 659 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remove_alpha
//       Access: Published
//  Description: Removes the image's alpha channel, if it exists.
//////////////////////////////////////////////////////////////////// 1 4 this 3 705  
225 0 0 4 215 659 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 705  
226 0 0 4 215 659 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.  The
//               optional rc, gc, bc values represent the relative
//               weights to apply to each channel to convert it to
//               grayscale.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  2 rc 1 707  2 gc 1 707  2 bc 1 707  
227 0 0 4 216 659 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_rgb
//       Access: Published
//  Description: Converts the image from grayscale to RGB.  Any alpha
//               channel, if present, is left undisturbed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 705  
228 0 0 4 217 659 0 0 509 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::premultiply_alpha
//       Access: Published
//  Description: Converts an image in-place to its "premultiplied"
//               form, where, for every pixel in the image, the
//               red, green, and blue components are multiplied by
//               that pixel's alpha value.
//
//               This does not modify any alpha values.
//////////////////////////////////////////////////////////////////// 1 4 this 3 705  
229 0 0 4 218 659 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unpremultiply_alpha
//       Access: Published
//  Description: Converts an image in-place to its "straight alpha"
//               form (presumably from a "premultiplied" form),
//               where, for every pixel in the image, the red,
//               green, and blue components are divided by that
//               pixel's alpha value.
//
//               This does not modify any alpha values.
//////////////////////////////////////////////////////////////////// 1 4 this 3 705  
230 0 0 4 219 659 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 705  
231 0 0 4 220 659 0 0 662 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the image
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  6 flip_x 1 677  6 flip_y 1 677  9 transpose 1 677  
232 0 0 4 221 659 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_maxval
//       Access: Published
//  Description: Rescales the image to the indicated maxval.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  6 maxval 1 678  
233 0 0 6 222 764 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 705  1 x 1 658  1 y 1 658  
234 0 0 7 222 764 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
235 0 0 4 223 659 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  5 value 1 695  
236 0 0 4 223 659 0 0 568 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is in the range
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  4 gray 1 678  
237 0 0 4 223 659 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
//////////////////////////////////////////////////////////////////// 6 4 this 3 705  1 x 1 658  1 y 1 658  1 r 1 678  1 g 1 678  1 b 1 678  
238 0 0 6 224 678 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red_val
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
239 0 0 6 225 678 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green_val
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
240 0 0 6 226 678 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue_val
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
241 0 0 6 227 678 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray_val
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.
//               The value returned is in the range 0..maxval and
//               encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
242 0 0 6 228 678 0 0 453 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha_val
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is in the
//               range 0..maxval and always linear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
243 0 0 4 229 659 0 0 518 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red_val
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_red if you instead have a linearized and
//               normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  1 r 1 678  
244 0 0 4 230 659 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green_val
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_green if you instead have a linearized and
//               normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  1 g 1 678  
245 0 0 4 231 659 0 0 521 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue_val
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_blue if you instead have a linearized and
//               normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  1 b 1 678  
246 0 0 4 232 659 0 0 876 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray_val
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel_val(),
//               which can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be in the range 0..maxval, encoded in the configured
//               color space.  See set_gray if you instead have a
//               linearized normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  4 gray 1 678  
247 0 0 4 233 659 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha_val
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..maxval.
//
//               This value is always linearly encoded, even if the
//               image is set to the sRGB color space.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  1 a 1 678  
248 0 0 6 234 678 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel_val
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 703  1 x 1 658  1 y 1 658  7 channel 1 658  
249 0 0 4 235 659 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 5 4 this 3 705  1 x 1 658  1 y 1 658  7 channel 1 658  5 value 1 678  
250 0 0 6 236 707 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is a float in the range
//               0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 703  1 x 1 658  1 y 1 658  7 channel 1 658  
251 0 0 4 237 659 0 0 628 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be a float in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 705  1 x 1 658  1 y 1 658  7 channel 1 658  5 value 1 707  
252 0 0 7 238 694 412 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_pixel
//       Access: Published
//  Description: Returns the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
253 0 0 4 239 659 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_pixel
//       Access: Published
//  Description: Sets the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  5 pixel 1 692  
254 0 0 7 240 766 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
255 0 0 4 241 659 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  5 value 1 767  
256 0 0 4 241 659 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  4 gray 1 707  
257 0 0 4 241 659 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 6 4 this 3 705  1 x 1 658  1 y 1 658  1 r 1 707  1 g 1 707  1 b 1 707  
258 0 0 7 242 769 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_a
//       Access: Published
//  Description: Returns the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
259 0 0 4 243 659 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  5 value 1 761  
260 0 0 4 243 659 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 7 4 this 3 705  1 x 1 658  1 y 1 658  1 r 1 707  1 g 1 707  1 b 1 707  1 a 1 707  
261 0 0 6 244 707 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
262 0 0 6 245 707 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
263 0 0 6 246 707 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
264 0 0 6 247 707 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned
//               is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
265 0 0 6 248 707 0 0 434 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is a float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
266 0 0 4 249 659 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  1 r 1 707  
267 0 0 4 250 659 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  1 g 1 707  
268 0 0 4 251 659 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  1 b 1 707  
269 0 0 4 252 659 0 0 729 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel(), which
//               can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  4 gray 1 707  
270 0 0 4 253 659 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  1 x 1 658  1 y 1 658  1 a 1 707  
271 0 0 6 254 707 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: Returns the linear brightness of the given xel, as a
//               linearized float in the range 0..1.  This flavor of
//               get_bright() returns the correct grayscale brightness
//               level for both full-color and grayscale images.
//////////////////////////////////////////////////////////////////// 3 4 this 3 703  1 x 1 658  1 y 1 658  
272 0 0 6 254 707 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               color images.  It returns a single brightness value
//               for the RGB color at the indicated pixel, based on
//               the supplied weights for each component.
//////////////////////////////////////////////////////////////////// 6 4 this 3 703  1 x 1 658  1 y 1 658  2 rc 1 707  2 gc 1 707  2 bc 1 707  
273 0 0 6 254 707 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               four-channel images.  It returns a single brightness
//               value for the RGBA color at the indicated pixel,
//               based on the supplied weights for each component.
//////////////////////////////////////////////////////////////////// 7 4 this 3 703  1 x 1 658  1 y 1 658  2 rc 1 707  2 gc 1 707  2 bc 1 707  2 ac 1 707  
274 0 0 4 255 659 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
//////////////////////////////////////////////////////////////////// 5 4 this 3 705  1 x 1 658  1 y 1 658  3 val 1 767  5 alpha 1 707  
275 0 0 4 255 659 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
//////////////////////////////////////////////////////////////////// 7 4 this 3 705  1 x 1 658  1 y 1 658  1 r 1 707  1 g 1 707  1 b 1 707  5 alpha 1 707  
276 0 0 4 256 659 0 0 647 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 8 4 this 3 705  4 copy 1 703  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  
277 0 0 4 257 659 0 0 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
//////////////////////////////////////////////////////////////////// 9 4 this 3 705  4 copy 1 703  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  11 pixel_scale 1 707  
278 0 0 4 258 659 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
//////////////////////////////////////////////////////////////////// 9 4 this 3 705  4 copy 1 703  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  11 pixel_scale 1 707  
279 0 0 4 259 659 0 0 509 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
//////////////////////////////////////////////////////////////////// 9 4 this 3 705  4 copy 1 703  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  11 pixel_scale 1 707  
280 0 0 4 260 659 0 0 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
//////////////////////////////////////////////////////////////////// 9 4 this 3 705  4 copy 1 703  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  11 pixel_scale 1 707  
281 0 0 4 261 659 0 0 635 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
//////////////////////////////////////////////////////////////////// 9 4 this 3 705  4 copy 1 703  3 xto 1 658  3 yto 1 658  5 xfrom 1 658  5 yfrom 1 658  6 x_size 1 658  6 y_size 1 658  11 pixel_scale 1 707  
282 0 0 4 262 659 0 0 1004 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::threshold
//       Access: Published
//  Description: Selectively copies each pixel from either one source
//               or another source, depending on the pixel value of
//               the indicated channel of select_image.
//
//               For each pixel (x, y):
//
//               s = select_image.get_channel(x, y, channel). Set this
//               image's (x, y) to:
//
//               lt.get_xel(x, y) if s < threshold, or
//
//               ge.get_xel(x, y) if s >= threshold
//
//               Any of select_image, lt, or ge may be the same
//               PNMImge object as this image, or the same as each
//               other; or they may all be different. All images must
//               be the same size.  As a special case, lt and ge may
//               both be 1x1 images instead of the source image size.
//////////////////////////////////////////////////////////////////// 6 4 this 3 705  12 select_image 1 703  7 channel 1 658  9 threshold 1 707  2 lt 1 703  2 ge 1 703  
283 0 0 4 263 659 0 0 1231 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_inside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest dark pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A dark pixel is
//               defined as one whose pixel value is < threshold.
//
//               If shrink_from_border is true, then the mask image is
//               considered to be surrounded by a border of dark
//               pixels; otherwise, the border isn't considered.
//
//               This can be used, in conjunction with threshold, to
//               shrink a mask image inwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
//////////////////////////////////////////////////////////////////// 5 4 this 3 705  4 mask 1 703  9 threshold 1 707  6 radius 1 658  18 shrink_from_border 1 677  
284 0 0 4 264 659 0 0 1030 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_outside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest white pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A white pixel is
//               defined as one whose pixel value is >= threshold.
//
//               This can be used, in conjunction with threshold, to
//               grow a mask image outwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  4 mask 1 703  9 threshold 1 707  6 radius 1 658  
285 0 0 4 265 659 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::rescale
//       Access: Published
//  Description: Rescales the RGB channel values so that any values in
//               the original image between min_val and max_val are
//               expanded to the range 0 .. 1.  Values below min_val
//               are set to 0, and values above max_val are set to 1.
//               Does not affect the alpha channel, if any.
//////////////////////////////////////////////////////////////////// 3 4 this 3 705  7 min_val 1 707  7 max_val 1 707  
286 0 0 4 266 659 0 0 781 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::render_spot
//       Access: Published
//  Description: Renders a solid-color circle, with a fuzzy edge, into
//               the center of the PNMImage.  If the PNMImage is
//               non-square, this actually renders an ellipse.
//
//               The min_radius and max_radius are in the scale 0..1,
//               where 1.0 means the full width of the image.  If
//               min_radius == max_radius, the edge is sharp (but
//               still antialiased); otherwise, the pixels between
//               min_radius and max_radius are smoothly blended
//               between fg and bg colors.
//////////////////////////////////////////////////////////////////// 5 4 this 3 705  2 fg 1 761  2 bg 1 761  10 min_radius 1 707  10 max_radius 1 707  
287 0 0 4 267 659 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::expand_border
//       Access: Published
//  Description: Expands the image by the indicated number of pixels
//               on each edge.  The new pixels are set to the
//               indicated color.
//
//               If any of the values is negative, this actually crops
//               the image.
//////////////////////////////////////////////////////////////////// 6 4 this 3 705  4 left 1 658  5 right 1 658  6 bottom 1 658  3 top 1 658  5 color 1 761  
288 0 0 4 268 659 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter
//       Access: Published
//  Description: This flavor of box_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  6 radius 1 707  
289 0 0 4 269 659 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter
//       Access: Published
//  Description: This flavor of gaussian_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  6 radius 1 707  
290 0 0 4 270 659 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unfiltered_stretch_from
//       Access: Published
//  Description: Resizes from the indicated image into this one by
//               performing a nearest-point sample.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  4 copy 1 703  
291 0 0 4 271 659 0 0 530 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 705  6 radius 1 707  4 copy 1 703  
292 0 0 4 272 659 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 705  6 radius 1 707  4 copy 1 703  
293 0 0 4 273 659 0 0 731 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  4 copy 1 703  7 xborder 1 658  7 yborder 1 658  
294 0 0 4 274 659 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_histogram
//       Access: Published
//  Description: Computes a histogram of the colors used in the
//               image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  4 hist 1 697  
295 0 0 4 275 659 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Variant of perlin_noise_fill that uses an
//               existing StackedPerlinNoise2 object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  6 perlin 1 770  
296 0 0 4 275 659 0 0 556 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
//////////////////////////////////////////////////////////////////// 5 4 this 3 705  2 sx 1 707  2 sy 1 707  10 table_size 1 658  4 seed 1 772  
297 0 0 4 276 659 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remix_channels
//       Access: Published
//  Description: Transforms every pixel using the operation
//               (Ro,Go,Bo) = conv.xform_point(Ri,Gi,Bi);
//               Input must be a color image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  4 conv 1 773  
298 0 0 4 277 659 0 0 474 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
//////////////////////////////////////////////////////////////////// 3 4 this 3 705  10 from_gamma 1 707  8 to_gamma 1 707  
299 0 0 4 278 659 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
//////////////////////////////////////////////////////////////////// 3 4 this 3 705  10 from_gamma 1 707  8 to_gamma 1 707  
300 0 0 4 279 659 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 705  13 gray_exponent 1 707  
301 0 0 4 279 659 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 705  13 gray_exponent 1 707  14 alpha_exponent 1 707  
302 0 0 4 279 659 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  12 red_exponent 1 707  14 green_exponent 1 707  13 blue_exponent 1 707  
303 0 0 4 279 659 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
//////////////////////////////////////////////////////////////////// 5 4 this 3 705  12 red_exponent 1 707  14 green_exponent 1 707  13 blue_exponent 1 707  14 alpha_exponent 1 707  
304 0 0 7 280 766 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 703  
305 0 0 7 281 769 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel_a
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image, including the alpha channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 703  
306 0 0 6 282 707 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_gray
//       Access: Published
//  Description: Returns the average grayscale component of all of
//               the pixels in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 703  
307 0 0 4 283 659 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::do_fill_distance
//       Access: Private
//  Description: Recursively fills in the minimum distance measured
//               from a certain set of points into the gray channel.
//////////////////////////////////////////////////////////////////// 4 4 this 3 705  2 xi 1 658  2 yi 1 658  1 d 1 658  
308 0 0 7 299 776 608 0 0 2 4 this 3 705  1 y 1 658  
309 0 0 7 299 777 613 0 0 2 4 this 3 703  1 y 1 658  
310 0 0 7 300 705 503 0 0 1 4 this 3 703  
311 0 0 7 301 705 503 0 0 2 4 this 3 703  5 other 1 761  
312 0 0 7 301 705 503 0 0 2 4 this 3 703  5 other 1 703  
313 0 0 7 302 705 503 0 0 2 4 this 3 703  5 other 1 761  
314 0 0 7 302 705 503 0 0 2 4 this 3 703  5 other 1 703  
315 0 0 7 303 705 503 0 0 2 4 this 3 703  5 other 1 761  
316 0 0 7 303 705 503 0 0 2 4 this 3 703  5 other 1 703  
317 0 0 7 303 705 503 0 0 2 4 this 3 703  10 multiplier 1 707  
318 0 0 6 304 705 0 0 0 2 4 this 3 705  5 other 1 761  
319 0 0 6 304 705 0 0 0 2 4 this 3 705  5 other 1 703  
320 0 0 6 305 705 0 0 0 2 4 this 3 705  5 other 1 761  
321 0 0 6 305 705 0 0 0 2 4 this 3 705  5 other 1 703  
322 0 0 6 306 705 0 0 0 2 4 this 3 705  5 other 1 761  
323 0 0 6 306 705 0 0 0 2 4 this 3 705  5 other 1 703  
324 0 0 6 306 705 0 0 0 2 4 this 3 705  10 multiplier 1 707  
325 0 0 6 285 780 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::size
//       Access: Published
//  Description: Get the number of pixels in the row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 778  
326 0 0 7 286 769 0 0 0 2 4 this 3 778  1 x 1 658  
327 0 0 4 287 659 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.  If
//               the image has no alpha channel, the alpha component
//               is ignored.
//////////////////////////////////////////////////////////////////// 3 4 this 3 776  1 x 1 658  1 v 1 761  
328 0 0 6 288 764 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 776  1 x 1 658  
329 0 0 4 289 659 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 776  1 x 1 658  1 v 1 695  
330 0 0 6 290 678 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 778  1 x 1 658  
331 0 0 4 291 659 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the alpha value at the given column in the row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 776  1 x 1 658  1 v 1 678  
332 0 0 6 294 780 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::size
//       Access: Published
//  Description: Get the number of pixels in the row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 782  
333 0 0 7 295 769 0 0 0 2 4 this 3 782  1 x 1 658  
334 0 0 7 296 764 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 782  1 x 1 658  
335 0 0 6 297 678 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 782  1 x 1 658  
336 0 0 7 308 784 623 0 896 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
//////////////////////////////////////////////////////////////////// 3 5 image 1 705  2 xo 1 658  2 yo 1 658  
337 0 0 4 310 659 0 0 608 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_pen
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for drawing
//               lines and edges.  If the brush is a bitmap brush, its
//               image will be smeared pixelwise along the line.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the pen.  It is not
//               necessary to keep a separate pointer to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 784  3 pen 1 760  
338 0 0 7 311 760 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_pen
//       Access: Published
//  Description: Returns the current pen.  See set_pen().
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
339 0 0 4 312 659 0 0 639 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_fill
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for filling
//               in the interiors of objects.  If the brush is a
//               bitmap brush, its image will be tiled throughout the
//               space.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the fill brush.  It
//               is not necessary to keep a separate pointer to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 784  4 fill 1 760  
340 0 0 7 313 760 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_fill
//       Access: Published
//  Description: Returns the current fill brush.  See set_fill().
//////////////////////////////////////////////////////////////////// 1 4 this 3 785  
341 0 0 4 314 659 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_point
//       Access: Published
//  Description: Draws an antialiased point on the PNMImage, using the
//               current pen.
//////////////////////////////////////////////////////////////////// 3 4 this 3 784  1 x 1 707  1 y 1 707  
342 0 0 4 315 659 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_line
//       Access: Published
//  Description: Draws an antialiased line on the PNMImage, using the
//               current pen.
//////////////////////////////////////////////////////////////////// 5 4 this 3 784  2 xa 1 707  2 ya 1 707  2 xb 1 707  2 yb 1 707  
343 0 0 4 316 659 0 0 488 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_rectangle
//       Access: Published
//  Description: Draws a filled rectangule on the PNMImage, using the
//               current pen for the outline, and the current fill
//               brush for the interior.
//
//               The two coordinates specify any two diagonally
//               opposite corners.
//////////////////////////////////////////////////////////////////// 5 4 this 3 784  2 xa 1 707  2 ya 1 707  2 xb 1 707  2 yb 1 707  
156
631 5 pixel 0 140289 5 pixel 5 pixel 0 0 0 1 344 360 3 787 788 789 9 345 346 347 348 349 350 351 352 353 0 0 0 0 0 0

632 4 gray 0 2105344 4 gray 4 gray 0 0 633 0 0 0 0 0 0 0 0 0 0

633 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

634 3 xel 0 2105345 3 xel 3 xel 0 0 631 0 0 0 0 0 0 0 0 0 0

635 11 PNMFileType 0 75777 11 PNMFileType 11 PNMFileType 0 0 0 0 0 0 5 361 362 363 364 365 1 790 0 1 0 636 0 0 0 0 330
////////////////////////////////////////////////////////////////////
//       Class : PNMFileType
// Description : This is the base class of a family of classes that
//               represent particular image file types that PNMImage
//               supports.
////////////////////////////////////////////////////////////////////

636 13 TypedWritable 0 2049 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 0 0 0 0 0 0 341
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

637 19 PNMFileTypeRegistry 0 26625 19 PNMFileTypeRegistry 19 PNMFileTypeRegistry 0 0 0 0 366 0 7 367 368 369 370 371 372 373 1 791 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : PNMFileTypeRegistry
// Description : This class maintains the set of all known
//               PNMFileTypes in the universe.
////////////////////////////////////////////////////////////////////

638 14 PNMImageHeader 0 26625 14 PNMImageHeader 14 PNMImageHeader 0 0 0 1 374 376 0 19 375 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 0 0 0 0 7 639 640 641 642 644 646 648 616
////////////////////////////////////////////////////////////////////
//       Class : PNMImageHeader
// Description : This is the base class of PNMImage, PNMReader, and
//               PNMWriter.  It encapsulates all the information
//               associated with an image that describes its size,
//               number of channels, etc; that is, all the information
//               about the image except the image data itself.  It's
//               the sort of information you typically read from the
//               image file's header.
////////////////////////////////////////////////////////////////////

639 9 ColorType 0 794624 25 PNMImageHeader::ColorType 25 PNMImageHeader::ColorType 638 0 0 0 0 0 0 0 0 0 5 10 CT_invalid 26 PNMImageHeader::CT_invalid 0
0 12 CT_grayscale 28 PNMImageHeader::CT_grayscale 0
1 14 CT_two_channel 30 PNMImageHeader::CT_two_channel 0
2 8 CT_color 24 PNMImageHeader::CT_color 0
3 15 CT_four_channel 31 PNMImageHeader::CT_four_channel 0
4 0 198
// This enumerated type indicates the number of channels in the
// image, and also implies an image type.  You can treat it either
// as an integer number of channels or as an enumerated image type.

640 9 PixelSpec 0 403457 25 PNMImageHeader::PixelSpec 25 PNMImageHeader::PixelSpec 638 0 0 1 395 412 0 16 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 0 0 0 0 0 179
// Contains a single pixel specification used in compute_histogram()
// and make_histogram().  Note that pixels are stored by integer
// value, not by floating-point scaled value.

641 14 PixelSpecCount 0 403457 30 PNMImageHeader::PixelSpecCount 30 PNMImageHeader::PixelSpecCount 638 0 0 0 413 0 0 0 0 0 0 0 93
// Associates a pixel specification with an appearance count, for
// use in Histogram, below.

642 7 HistMap 0 2367488 23 PNMImageHeader::HistMap 23 PNMImageHeader::HistMap 638 0 643 0 0 0 0 0 0 0 0 0 0

643 21 map< PixelSpec, int > 0 2048 37 map< PNMImageHeader::PixelSpec, int > 37 map< PNMImageHeader::PixelSpec, int > 0 0 0 0 0 0 0 0 0 0 0 0 0

644 10 PixelCount 0 2367488 26 PNMImageHeader::PixelCount 26 PNMImageHeader::PixelCount 638 0 645 0 0 0 0 0 0 0 0 0 0

645 24 vector< PixelSpecCount > 0 2048 40 vector< PNMImageHeader::PixelSpecCount > 40 vector< PNMImageHeader::PixelSpecCount > 0 0 0 0 0 0 0 0 0 0 0 0 0

646 7 Palette 0 2367488 23 PNMImageHeader::Palette 23 PNMImageHeader::Palette 638 0 647 0 0 0 0 0 0 0 0 0 0

647 19 vector< PixelSpec > 0 2048 35 vector< PNMImageHeader::PixelSpec > 35 vector< PNMImageHeader::PixelSpec > 0 0 0 0 0 0 0 0 0 0 0 0 0

648 9 Histogram 0 403457 25 PNMImageHeader::Histogram 25 PNMImageHeader::Histogram 638 0 0 1 414 419 0 4 415 416 417 418 1 792 0 0 0 0 65
// Used to return a pixel histogram in PNMImage::get_histogram().

649 7 PfmFile 0 141313 7 PfmFile 7 PfmFile 0 0 0 1 420 496 0 75 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 0 0 1 0 638 0 0 0 0 355
////////////////////////////////////////////////////////////////////
//       Class : PfmFile
// Description : Defines a pfm file, a 2-d table of floating-point
//               numbers, either 3-component or 1-component, or with a
//               special extension, 2- or 4-component.
////////////////////////////////////////////////////////////////////

650 8 PNMBrush 0 75777 8 PNMBrush 8 PNMBrush 0 0 0 0 0 0 4 497 498 499 500 0 0 1 0 651 0 0 0 1 652 836
////////////////////////////////////////////////////////////////////
//       Class : PNMBrush
// Description : This class is used to control the shape and color of
//               the drawing operations performed by a PNMPainter
//               object.
//
//               Normally, you don't create a PNMBrush directly;
//               instead, use one of the static PNMBrush::make_*()
//               methods provided here.
//
//               A PNMBrush is used to draw the border of a polygon or
//               rectangle, as well as for filling its interior.  When
//               it is used to draw a border, the brush is "smeared"
//               over the border; when it is used to fill the
//               interior, it is tiled through the interior.
////////////////////////////////////////////////////////////////////

651 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

652 11 BrushEffect 0 794624 21 PNMBrush::BrushEffect 21 PNMBrush::BrushEffect 650 0 0 0 0 0 0 0 0 0 4 6 BE_set 16 PNMBrush::BE_set 0
0 8 BE_blend 18 PNMBrush::BE_blend 0
1 9 BE_darken 19 PNMBrush::BE_darken 0
2 10 BE_lighten 20 PNMBrush::BE_lighten 0
3 0 0

653 8 PNMImage 0 26625 8 PNMImage 8 PNMImage 0 0 0 1 501 503 0 106 502 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 614 615 616 617 618 619 620 621 0 0 1 0 638 0 0 0 2 654 655 2116
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               A PNMImage has a color space and a maxval, the
//               combination of which defines how a floating-point
//               linear color value is encoded as an integer value in
//               memory.  The functions ending in _val operate on
//               encoded colors, whereas the regular ones work with
//               linear floating-point values.  All operations are
//               color space correct unless otherwise specified.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
//
//               This class is not inherently thread-safe; use it
//               from a single thread or protect access using a mutex.
////////////////////////////////////////////////////////////////////

654 3 Row 0 403457 13 PNMImage::Row 13 PNMImage::Row 653 0 0 0 608 0 7 601 602 603 604 605 606 607 0 0 0 0 0 96
// Provides an accessor for reading or writing the contents of one row
// of the image in-place.

655 4 CRow 0 403457 14 PNMImage::CRow 14 PNMImage::CRow 653 0 0 0 613 0 4 609 610 611 612 0 0 0 0 0 85
// Provides an accessor for reading the contents of one row of the
// image in-place.

656 10 PNMPainter 0 26625 10 PNMPainter 10 PNMPainter 0 0 0 1 622 623 0 7 624 625 626 627 628 629 630 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : PNMPainter
// Description : This class provides a number of convenient methods
//               for painting drawings directly into a PNMImage.
//
//               It stores a pointer to the PNMImage you pass it, but
//               it does not take ownership of the object; you are
//               responsible for ensuring that the PNMImage does not
//               destruct during the lifetime of the PNMPainter
//               object.
////////////////////////////////////////////////////////////////////

657 7 pixel * 0 8576 7 pixel * 7 pixel * 0 0 631 0 0 0 0 0 0 0 0 0 0

658 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

659 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

660 13 pixel const * 0 8576 13 pixel const * 13 pixel const * 0 0 661 0 0 0 0 0 0 0 0 0 0

661 11 pixel const 0 8832 11 pixel const 11 pixel const 0 0 631 0 0 0 0 0 0 0 0 0 0

662 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

663 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 664 0 0 0 0 0 0 0 0 0 0

664 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

665 19 PNMFileType const * 0 8576 19 PNMFileType const * 19 PNMFileType const * 0 0 666 0 0 0 0 0 0 0 0 0 0

666 17 PNMFileType const 0 8832 17 PNMFileType const 17 PNMFileType const 0 0 635 0 0 0 0 0 0 0 0 0 0

667 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

668 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

669 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 668 0 0 0 0 0 0 0 0 0 0

670 27 PNMFileTypeRegistry const * 0 8576 27 PNMFileTypeRegistry const * 27 PNMFileTypeRegistry const * 0 0 671 0 0 0 0 0 0 0 0 0 0

671 25 PNMFileTypeRegistry const 0 8832 25 PNMFileTypeRegistry const 25 PNMFileTypeRegistry const 0 0 637 0 0 0 0 0 0 0 0 0 0

672 13 PNMFileType * 0 8576 13 PNMFileType * 13 PNMFileType * 0 0 635 0 0 0 0 0 0 0 0 0 0

673 21 PNMFileTypeRegistry * 0 8576 21 PNMFileTypeRegistry * 21 PNMFileTypeRegistry * 0 0 637 0 0 0 0 0 0 0 0 0 0

674 16 PNMImageHeader * 0 8576 16 PNMImageHeader * 16 PNMImageHeader * 0 0 638 0 0 0 0 0 0 0 0 0 0

675 22 PNMImageHeader const * 0 8576 22 PNMImageHeader const * 22 PNMImageHeader const * 0 0 676 0 0 0 0 0 0 0 0 0 0

676 20 PNMImageHeader const 0 8832 20 PNMImageHeader const 20 PNMImageHeader const 0 0 638 0 0 0 0 0 0 0 0 0 0

677 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

678 6 xelval 0 2105344 6 xelval 6 xelval 0 0 632 0 0 0 0 0 0 0 0 0 0

679 10 ColorSpace 0 532480 10 ColorSpace 10 ColorSpace 0 0 0 0 0 0 0 0 0 0 4 14 CS_unspecified 14 CS_unspecified 105
// This value is not a color space, but is used to indicate that
// a color space has not been specified.
0 9 CS_linear 9 CS_linear 388
// CS_linear is not a color space per se, but represents the
// working color space of graphics APIs, which is linearized.  Since
// the conversion from sRGB to linear is defined, one could posit
// that it has the ITU-R BT.709 primaries, but this isn't meaningful
// as modern graphics APIs do not perform color management.
// All colors in Panda3D are linear unless otherwise specified.
1 7 CS_sRGB 7 CS_sRGB 107
// This is the standard, gamma-2.2-corrected sRGB color space, as
// used by the majority of image formats.
2 8 CS_scRGB 8 CS_scRGB 110
// This is a 16-bit encoded linear color space capable of encoding
// color values in the -0.5...7.4999 range.
3 0 0

680 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 681 0 0 0 0 0 0 0 0 0 0

681 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 682 0 0 0 0 0 0 0 0 0 0

682 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

683 9 istream * 0 8576 9 istream * 9 istream * 0 0 684 0 0 0 0 0 0 0 0 0 0

684 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

685 11 PNMReader * 0 8576 11 PNMReader * 11 PNMReader * 0 0 686 0 0 0 0 0 0 0 0 0 0

686 9 PNMReader 0 1050624 9 PNMReader 9 PNMReader 0 0 0 0 0 0 0 0 0 0 0 0 458
////////////////////////////////////////////////////////////////////
//       Class : PNMReader
// Description : This is an abstract base class that defines the
//               interface for reading image files of various types.
//               Any particular image file type that can be read must
//               define a class that inherits from PNMReader to read
//               it.
////////////////////////////////////////////////////////////////////

687 11 PNMWriter * 0 8576 11 PNMWriter * 11 PNMWriter * 0 0 688 0 0 0 0 0 0 0 0 0 0

688 9 PNMWriter 0 1050624 9 PNMWriter 9 PNMWriter 0 0 0 0 0 0 0 0 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : PNMWriter
// Description : This is an abstract base class that defines the
//               interface for writing image files of various types.
//               Any particular image file type that can be written
//               must define a class that inherits from PNMWriter to
//               write it.
////////////////////////////////////////////////////////////////////

689 8 string * 0 8576 8 string * 8 string * 0 0 690 0 0 0 0 0 0 0 0 0 0

690 6 string 0 2105344 6 string 6 string 0 0 691 0 0 0 0 0 0 0 0 0 0

691 20 basic_string< char > 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

692 17 PixelSpec const * 0 8576 33 PNMImageHeader::PixelSpec const * 33 PNMImageHeader::PixelSpec const * 0 0 693 0 0 0 0 0 0 0 0 0 0

693 15 PixelSpec const 0 8832 31 PNMImageHeader::PixelSpec const 31 PNMImageHeader::PixelSpec const 0 0 640 0 0 0 0 0 0 0 0 0 0

694 11 PixelSpec * 0 8576 27 PNMImageHeader::PixelSpec * 27 PNMImageHeader::PixelSpec * 0 0 640 0 0 0 0 0 0 0 0 0 0

695 11 xel const * 0 8576 11 xel const * 11 xel const * 0 0 696 0 0 0 0 0 0 0 0 0 0

696 9 xel const 0 8832 9 xel const 9 xel const 0 0 634 0 0 0 0 0 0 0 0 0 0

697 11 Histogram * 0 8576 27 PNMImageHeader::Histogram * 27 PNMImageHeader::Histogram * 0 0 648 0 0 0 0 0 0 0 0 0 0

698 17 Histogram const * 0 8576 33 PNMImageHeader::Histogram const * 33 PNMImageHeader::Histogram const * 0 0 699 0 0 0 0 0 0 0 0 0 0

699 15 Histogram const 0 8832 31 PNMImageHeader::Histogram const 31 PNMImageHeader::Histogram const 0 0 648 0 0 0 0 0 0 0 0 0 0

700 9 PfmFile * 0 8576 9 PfmFile * 9 PfmFile * 0 0 649 0 0 0 0 0 0 0 0 0 0

701 15 PfmFile const * 0 8576 15 PfmFile const * 15 PfmFile const * 0 0 702 0 0 0 0 0 0 0 0 0 0

702 13 PfmFile const 0 8832 13 PfmFile const 13 PfmFile const 0 0 649 0 0 0 0 0 0 0 0 0 0

703 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 704 0 0 0 0 0 0 0 0 0 0

704 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 653 0 0 0 0 0 0 0 0 0 0

705 10 PNMImage * 0 8576 10 PNMImage * 10 PNMImage * 0 0 653 0 0 0 0 0 0 0 0 0 0

706 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 707 0 0 0 0 0 0 0 0 0 0

707 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

708 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 709 0 0 0 0 0 0 0 0 0 0

709 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 710 0 0 0 0 0 0 0 0 0 0

710 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

711 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 712 0 0 0 0 0 0 0 0 0 0

712 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 713 0 0 0 0 0 0 0 0 0 0

713 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

714 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 715 0 0 0 0 0 0 0 0 0 0

715 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 716 0 0 0 0 0 0 0 0 0 0

716 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

717 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 710 0 0 0 0 0 0 0 0 0 0

718 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 719 0 0 0 0 0 0 0 0 0 0

719 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 720 0 0 0 0 0 0 0 0 0 0

720 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

721 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 722 0 0 0 0 0 0 0 0 0 0

722 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 723 0 0 0 0 0 0 0 0 0 0

723 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

724 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 725 0 0 0 0 0 0 0 0 0 0

725 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 726 0 0 0 0 0 0 0 0 0 0

726 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

727 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 720 0 0 0 0 0 0 0 0 0 0

728 16 LPoint4f const * 0 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 729 0 0 0 0 0 0 0 0 0 0

729 14 LPoint4f const 0 8832 14 LPoint4f const 14 LPoint4f const 0 0 730 0 0 0 0 0 0 0 0 0 0

730 8 LPoint4f 0 2048 8 LPoint4f 8 LPoint4f 0 0 0 0 0 0 0 0 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

731 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 732 0 0 0 0 0 0 0 0 0 0

732 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 733 0 0 0 0 0 0 0 0 0 0

733 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

734 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 735 0 0 0 0 0 0 0 0 0 0

735 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 736 0 0 0 0 0 0 0 0 0 0

736 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

737 10 LPoint4f * 0 8576 10 LPoint4f * 10 LPoint4f * 0 0 730 0 0 0 0 0 0 0 0 0 0

738 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 726 0 0 0 0 0 0 0 0 0 0

739 12 LVecBase4d * 0 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 733 0 0 0 0 0 0 0 0 0 0

740 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 736 0 0 0 0 0 0 0 0 0 0

741 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 742 0 0 0 0 0 0 0 0 0 0

742 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 743 0 0 0 0 0 0 0 0 0 0

743 8 LPoint4d 0 2048 8 LPoint4d 8 LPoint4d 0 0 0 0 0 0 0 0 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

744 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 745 0 0 0 0 0 0 0 0 0 0

745 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 746 0 0 0 0 0 0 0 0 0 0

746 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 793 794 795 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

747 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 748 0 0 0 0 0 0 0 0 0 0

748 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 749 0 0 0 0 0 0 0 0 0 0

749 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 796 797 798 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

750 18 BoundingHexahedron 0 2048 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 0 0 0 0 2 799 800 0 0 0 0 556
////////////////////////////////////////////////////////////////////
//       Class : BoundingHexahedron
// Description : This defines a bounding convex hexahedron.  It is
//               typically used to represent a frustum, but may
//               represent any enclosing convex hexahedron, including
//               simple boxes.  However, if all you want is an
//               axis-aligned bounding box, you may be better off with
//               the simpler BoundingBox class.
////////////////////////////////////////////////////////////////////

751 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 752 0 0 0 0 0 0 0 0 0 0

752 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 753 0 0 0 0 0 0 0 0 0 0

753 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

754 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 750 0 0 0 0 0 0 0 0 0 0

755 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 756 0 0 0 0 0 0 0 0 0 0

756 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 757 0 0 0 0 0 0 0 0 0 0

757 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

758 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 759 0 0 0 0 0 0 0 0 0 0

759 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

760 10 PNMBrush * 0 8576 10 PNMBrush * 10 PNMBrush * 0 0 650 0 0 0 0 0 0 0 0 0 0

761 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 762 0 0 0 0 0 0 0 0 0 0

762 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 763 0 0 0 0 0 0 0 0 0 0

763 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 736 0 0 0 0 0 0 0 0 0 0

764 5 xel * 0 8576 5 xel * 5 xel * 0 0 634 0 0 0 0 0 0 0 0 0 0

765 10 LRGBColorf 0 2105344 10 LRGBColorf 10 LRGBColorf 0 0 726 0 0 0 0 0 0 0 0 0 0

766 12 LRGBColorf * 0 8576 12 LRGBColorf * 12 LRGBColorf * 0 0 765 0 0 0 0 0 0 0 0 0 0

767 18 LRGBColorf const * 0 8576 18 LRGBColorf const * 18 LRGBColorf const * 0 0 768 0 0 0 0 0 0 0 0 0 0

768 16 LRGBColorf const 0 8832 16 LRGBColorf const 16 LRGBColorf const 0 0 765 0 0 0 0 0 0 0 0 0 0

769 9 LColorf * 0 8576 9 LColorf * 9 LColorf * 0 0 763 0 0 0 0 0 0 0 0 0 0

770 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 771 0 0 0 0 0 0 0 0 0 0

771 19 StackedPerlinNoise2 0 2048 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 0 0 0 0 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise2
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

772 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

773 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 774 0 0 0 0 0 0 0 0 0 0

774 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 775 0 0 0 0 0 0 0 0 0 0

775 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 749 0 0 0 0 0 0 0 0 0 0

776 5 Row * 0 8576 15 PNMImage::Row * 15 PNMImage::Row * 0 0 654 0 0 0 0 0 0 0 0 0 0

777 6 CRow * 0 8576 16 PNMImage::CRow * 16 PNMImage::CRow * 0 0 655 0 0 0 0 0 0 0 0 0 0

778 11 Row const * 0 8576 21 PNMImage::Row const * 21 PNMImage::Row const * 0 0 779 0 0 0 0 0 0 0 0 0 0

779 9 Row const 0 8832 19 PNMImage::Row const 19 PNMImage::Row const 0 0 654 0 0 0 0 0 0 0 0 0 0

780 6 size_t 0 2105344 6 size_t 6 size_t 0 0 781 0 0 0 0 0 0 0 0 0 0

781 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

782 12 CRow const * 0 8576 22 PNMImage::CRow const * 22 PNMImage::CRow const * 0 0 783 0 0 0 0 0 0 0 0 0 0

783 10 CRow const 0 8832 20 PNMImage::CRow const 20 PNMImage::CRow const 0 0 655 0 0 0 0 0 0 0 0 0 0

784 12 PNMPainter * 0 8576 12 PNMPainter * 12 PNMPainter * 0 0 656 0 0 0 0 0 0 0 0 0 0

785 18 PNMPainter const * 0 8576 18 PNMPainter const * 18 PNMPainter const * 0 0 786 0 0 0 0 0 0 0 0 0 0

786 16 PNMPainter const 0 8832 16 PNMPainter const 16 PNMPainter const 0 0 656 0 0 0 0 0 0 0 0 0 0

0
3
787 1 b 0 6 632 354 355 8 pixel::b 0

788 1 g 0 6 632 356 357 8 pixel::g 0

789 1 r 0 6 632 358 359 8 pixel::r 0

11
790 0 0 25 14 get_extensions 18 get_num_extensions 13 get_extension 
791 0 0 32 9 get_types 13 get_num_types 8 get_type 
792 0 0 91 10 get_pixels 14 get_num_pixels 9 get_pixel 
793 0 0 567 8 get_rows 4 size 7 get_row 
794 0 0 567 8 get_cols 4 size 7 get_col 
795 0 0 567 9 get_row3s 4 size 8 get_row3 
796 0 0 571 8 get_rows 4 size 7 get_row 
797 0 0 571 8 get_cols 4 size 7 get_col 
798 0 0 571 9 get_row3s 4 size 8 get_row3 
799 0 0 581 10 get_points 14 get_num_points 9 get_point 
800 0 0 581 10 get_planes 14 get_num_planes 9 get_plane 
