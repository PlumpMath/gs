1448428189
2 3
16 libp3parametrics 4 UKlv 12 panda3d.core 
243
260 8 is_valid 0 6 503 25 ParametricCurve::is_valid 0 1 1 415
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::is_valid
//       Access: Published, Virtual
//  Description: Returns true if the curve is defined.  This base
//               class function always returns true; derived classes
//               might override this to sometimes return false.
////////////////////////////////////////////////////////////////////
51
virtual bool ParametricCurve::is_valid(void) const;

261 9 get_max_t 0 6 503 26 ParametricCurve::get_max_t 0 1 2 522
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_max_t
//       Access: Published, Virtual
//  Description: Returns the upper bound of t for the entire curve.
//               The curve is defined in the range 0.0f <= t <=
//               get_max_t().  This base class function always returns
//               1.0f; derived classes might override this to return
//               something else.
////////////////////////////////////////////////////////////////////
59
virtual PN_stdfloat ParametricCurve::get_max_t(void) const;

262 14 set_curve_type 0 4 503 31 ParametricCurve::set_curve_type 0 1 3 731
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_curve_type
//       Access: Published
//  Description: Sets the flag indicating the use to which the curve
//               is intended to be put.  This flag is optional and
//               only serves to provide a hint to the egg reader and
//               writer code; it has no effect on the curve's
//               behavior.
//
//               Setting the curve type also sets the num_dimensions
//               to 3 or 1 according to the type.
//
//               THis flag may have one of the values PCT_XYZ,
//               PCT_HPR, or PCT_T.
////////////////////////////////////////////////////////////////////
47
void ParametricCurve::set_curve_type(int type);

263 14 get_curve_type 0 4 503 31 ParametricCurve::get_curve_type 0 1 4 325
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_curve_type
//       Access: Published
//  Description: Returns the flag indicating the use to which the curve
//               is intended to be put.
////////////////////////////////////////////////////////////////////
48
int ParametricCurve::get_curve_type(void) const;

264 18 set_num_dimensions 0 4 503 35 ParametricCurve::set_num_dimensions 0 1 5 622
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_num_dimensions
//       Access: Published
//  Description: Specifies the number of significant dimensions in the
//               curve's vertices.  This should be one of 1, 2, or 3.
//               Normally, XYZ and HPR curves have three dimensions;
//               time curves should always have one dimension.  This
//               only serves as a hint to the mopath editor, and also
//               controls how the curve is written out.
////////////////////////////////////////////////////////////////////
50
void ParametricCurve::set_num_dimensions(int num);

265 18 get_num_dimensions 0 4 503 35 ParametricCurve::get_num_dimensions 0 1 6 550
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_num_dimensions
//       Access: Published
//  Description: Returns the number of significant dimensions in the
//               curve's vertices, as set by a previous call to
//               set_num_dimensions().  This is only a hint as to how
//               the curve is intended to be used; the actual number
//               of dimensions of any curve is always three.
////////////////////////////////////////////////////////////////////
52
int ParametricCurve::get_num_dimensions(void) const;

266 11 calc_length 0 4 503 28 ParametricCurve::calc_length 0 2 7 8 653
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the entire curve to within
//               a few decimal places.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the curve segment from
//               parametric time 'from' to time 'to'.
////////////////////////////////////////////////////////////////////
135
PN_stdfloat ParametricCurve::calc_length(void) const;
PN_stdfloat ParametricCurve::calc_length(PN_stdfloat from, PN_stdfloat to) const;

267 11 find_length 0 4 503 28 ParametricCurve::find_length 0 1 9 717
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::find_length
//       Access: Published
//  Description: Returns the parametric value corresponding to the
//               indicated distance along the curve from the starting
//               parametric value.
//
//               This is the inverse of calc_length(): rather than
//               determining the length along the curve between two
//               parametric points, it determines the position in
//               parametric time of a point n units along the curve.
//
//               The search distance must not be negative.
////////////////////////////////////////////////////////////////////
95
PN_stdfloat ParametricCurve::find_length(PN_stdfloat start_t, PN_stdfloat length_offset) const;

268 9 get_point 0 6 503 26 ParametricCurve::get_point 0 1 10 0
83
virtual bool ParametricCurve::get_point(PN_stdfloat t, LVecBase3 &point) const = 0;

269 11 get_tangent 0 6 503 28 ParametricCurve::get_tangent 0 1 11 0
87
virtual bool ParametricCurve::get_tangent(PN_stdfloat t, LVecBase3 &tangent) const = 0;

270 6 get_pt 0 6 503 23 ParametricCurve::get_pt 0 1 12 0
100
virtual bool ParametricCurve::get_pt(PN_stdfloat t, LVecBase3 &point, LVecBase3 &tangent) const = 0;

271 14 get_2ndtangent 0 6 503 31 ParametricCurve::get_2ndtangent 0 1 13 0
91
virtual bool ParametricCurve::get_2ndtangent(PN_stdfloat t, LVecBase3 &tangent2) const = 0;

272 12 adjust_point 0 6 503 29 ParametricCurve::adjust_point 0 1 14 402
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_point
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) at time t, but keeps the same
//               tangent value at that point.
////////////////////////////////////////////////////////////////////
106
virtual bool ParametricCurve::adjust_point(PN_stdfloat t, PN_stdfloat px, PN_stdfloat py, PN_stdfloat pz);

273 14 adjust_tangent 0 6 503 31 ParametricCurve::adjust_tangent 0 1 15 389
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_tangent
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it has the tangent
//               (tx, ty, tz) at time t, but keeps the same position
//               at the point.
////////////////////////////////////////////////////////////////////
108
virtual bool ParametricCurve::adjust_tangent(PN_stdfloat t, PN_stdfloat tx, PN_stdfloat ty, PN_stdfloat tz);

274 9 adjust_pt 0 6 503 26 ParametricCurve::adjust_pt 0 1 16 354
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_pt
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) with the tangent (tx, ty, tz).
////////////////////////////////////////////////////////////////////
151
virtual bool ParametricCurve::adjust_pt(PN_stdfloat t, PN_stdfloat px, PN_stdfloat py, PN_stdfloat pz, PN_stdfloat tx, PN_stdfloat ty, PN_stdfloat tz);

275 9 recompute 0 6 503 26 ParametricCurve::recompute 0 1 17 370
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::recompute
//       Access: Published, Virtual
//  Description: Recalculates the curve, if necessary.  Returns
//               true if the resulting curve is valid, false
//               otherwise.
////////////////////////////////////////////////////////////////////
46
virtual bool ParametricCurve::recompute(void);

276 6 stitch 0 6 503 23 ParametricCurve::stitch 0 1 18 537
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::stitch
//       Access: Published, Virtual
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.
//
//               Returns true if successful, false on failure or if
//               the curve type does not support stitching.
////////////////////////////////////////////////////////////////////
89
virtual bool ParametricCurve::stitch(ParametricCurve const *a, ParametricCurve const *b);

277 9 write_egg 0 4 503 26 ParametricCurve::write_egg 0 2 19 20 774
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output file.  Returns true if the file is
//               successfully written.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output stream.  Returns true if the file is
//               successfully written.
////////////////////////////////////////////////////////////////////
181
bool ParametricCurve::write_egg(Filename filename, CoordinateSystem cs = ::CS_default);
bool ParametricCurve::write_egg(ostream &out, Filename const &filename, CoordinateSystem cs);

278 14 get_class_type 0 4 503 31 ParametricCurve::get_class_type 0 1 21 0
56
static TypeHandle ParametricCurve::get_class_type(void);

279 14 get_class_type 0 4 505 29 CubicCurveseg::get_class_type 0 1 22 0
54
static TypeHandle CubicCurveseg::get_class_type(void);

280 25 ParametricCurveCollection 0 4 506 52 ParametricCurveCollection::ParametricCurveCollection 0 1 23 237
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
ParametricCurveCollection::ParametricCurveCollection(void);

281 9 add_curve 0 4 506 36 ParametricCurveCollection::add_curve 0 2 24 25 604
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection at the
//               indicated index.
////////////////////////////////////////////////////////////////////
144
void ParametricCurveCollection::add_curve(ParametricCurve *curve);
void ParametricCurveCollection::add_curve(ParametricCurve *curve, int index);

282 10 add_curves 0 4 506 37 ParametricCurveCollection::add_curves 0 1 26 378
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curves
//       Access: Published
//  Description: Adds all the curves found in the scene graph rooted
//               at the given node.  Returns the number of curves
//               found.
////////////////////////////////////////////////////////////////////
59
int ParametricCurveCollection::add_curves(PandaNode *node);

283 12 remove_curve 0 4 506 39 ParametricCurveCollection::remove_curve 0 2 27 28 756
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection.  Returns true if the curve was removed,
//               false if it was not a member of the collection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection, by its index number.
////////////////////////////////////////////////////////////////////
126
bool ParametricCurveCollection::remove_curve(ParametricCurve *curve);
void ParametricCurveCollection::remove_curve(int index);

284 9 has_curve 0 4 506 36 ParametricCurveCollection::has_curve 0 1 29 343
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::has_curve
//       Access: Published
//  Description: Returns true if the indicated ParametricCurve appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
72
bool ParametricCurveCollection::has_curve(ParametricCurve *curve) const;

285 5 clear 0 4 506 32 ParametricCurveCollection::clear 0 1 30 281
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear
//       Access: Published
//  Description: Removes all ParametricCurves from the collection.
////////////////////////////////////////////////////////////////////
44
void ParametricCurveCollection::clear(void);

286 15 clear_timewarps 0 4 506 42 ParametricCurveCollection::clear_timewarps 0 1 31 294
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear_timewarps
//       Access: Published
//  Description: Removes all the timewarp curves from the collection.
////////////////////////////////////////////////////////////////////
54
void ParametricCurveCollection::clear_timewarps(void);

287 14 get_num_curves 0 4 506 41 ParametricCurveCollection::get_num_curves 0 1 32 298
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_curves
//       Access: Published
//  Description: Returns the number of ParametricCurves in the collection.
////////////////////////////////////////////////////////////////////
65
inline int ParametricCurveCollection::get_num_curves(void) const;

288 9 get_curve 0 4 506 36 ParametricCurveCollection::get_curve 0 1 33 286
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_curve
//       Access: Published
//  Description: Returns the nth ParametricCurve in the collection.
////////////////////////////////////////////////////////////////////
78
inline ParametricCurve *ParametricCurveCollection::get_curve(int index) const;

289 13 get_xyz_curve 0 4 506 40 ParametricCurveCollection::get_xyz_curve 0 1 34 338
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_xyz_curve
//       Access: Published
//  Description: Returns the first XYZ curve in the collection, if
//               any, or NULL if there are none.
////////////////////////////////////////////////////////////////////
70
ParametricCurve *ParametricCurveCollection::get_xyz_curve(void) const;

290 13 get_hpr_curve 0 4 506 40 ParametricCurveCollection::get_hpr_curve 0 1 35 338
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_hpr_curve
//       Access: Published
//  Description: Returns the first HPR curve in the collection, if
//               any, or NULL if there are none.
////////////////////////////////////////////////////////////////////
70
ParametricCurve *ParametricCurveCollection::get_hpr_curve(void) const;

291 17 get_default_curve 0 4 506 44 ParametricCurveCollection::get_default_curve 0 1 36 458
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_default_curve
//       Access: Published
//  Description: If there is an XYZ curve in the collection, returns
//               it; otherwise, returns the first curve whose type is
//               unspecified.  Returns NULL if no curve meets the
//               criteria.
////////////////////////////////////////////////////////////////////
74
ParametricCurve *ParametricCurveCollection::get_default_curve(void) const;

292 17 get_num_timewarps 0 4 506 44 ParametricCurveCollection::get_num_timewarps 0 1 37 317
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_timewarps
//       Access: Published
//  Description: Returns the number of timewarp curves in the
//               collection.
////////////////////////////////////////////////////////////////////
61
int ParametricCurveCollection::get_num_timewarps(void) const;

293 18 get_timewarp_curve 0 4 506 45 ParametricCurveCollection::get_timewarp_curve 0 1 38 294
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_timewarp_curve
//       Access: Published
//  Description: Returns the nth timewarp curve in the collection.
////////////////////////////////////////////////////////////////////
76
ParametricCurve *ParametricCurveCollection::get_timewarp_curve(int n) const;

294 9 get_max_t 0 4 506 36 ParametricCurveCollection::get_max_t 0 1 39 423
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_max_t
//       Access: Published
//  Description: Returns the maximum T value associated with the
//               *last* curve in the collection.  Normally, this will
//               be either the XYZ or HPR curve, or a timewarp curve.
////////////////////////////////////////////////////////////////////
68
inline PN_stdfloat ParametricCurveCollection::get_max_t(void) const;

295 9 make_even 0 4 506 36 ParametricCurveCollection::make_even 0 1 40 913
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::make_even
//       Access: Published
//  Description: Discards all existing timewarp curves and recomputes
//               a new timewarp curve that maps distance along the
//               curve to parametric time, so that the distance
//               between any two points in parametric time is
//               proportional to the approximate distance of those
//               same two points along the XYZ curve.
//
//               segments_per_unit represents the number of segments to
//               take per each unit of parametric time of the original
//               XYZ curve.
//
//               The new timewarp curve (and thus, the apparent range
//               of the collection) will range from 0 to max_t.
////////////////////////////////////////////////////////////////////
92
void ParametricCurveCollection::make_even(PN_stdfloat max_t, PN_stdfloat segments_per_unit);

296 12 face_forward 0 4 506 39 ParametricCurveCollection::face_forward 0 1 41 452
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::face_forward
//       Access: Published
//  Description: Discards the existing HPR curve and generates a new
//               one that looks in the direction of travel along the
//               XYZ curve, based on the XYZ curve's tangent at each
//               point.
////////////////////////////////////////////////////////////////////
76
void ParametricCurveCollection::face_forward(PN_stdfloat segments_per_unit);

297 11 reset_max_t 0 4 506 38 ParametricCurveCollection::reset_max_t 0 1 42 563
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::reset_max_t
//       Access: Published
//  Description: Adjusts the apparent length of the curve by applying
//               a new timewarp that maps the range [0..max_t] to the
//               range [0..get_max_t()].  After this call, the curve
//               collection will contain one more timewarp curve, and
//               get_max_t() will return the given max_t value.
////////////////////////////////////////////////////////////////////
63
void ParametricCurveCollection::reset_max_t(PN_stdfloat max_t);

298 8 evaluate 0 4 506 35 ParametricCurveCollection::evaluate 0 2 43 44 1656
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the position and rotation represented by the
//               first XYZ and HPR curves in the collection at the
//               given point t, after t has been modified by all the
//               timewarp curves in the collection applied in
//               sequence, from back to front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the transform matrix representing
//               translation to the position indicated by the first
//               XYZ curve in the collection and the rotation
//               indicated by the first HPR curve in the collection,
//               after t has been modified by all the timewarp curves
//               in the collection applied in sequence, from back to
//               front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
////////////////////////////////////////////////////////////////////
211
bool ParametricCurveCollection::evaluate(PN_stdfloat t, LVecBase3 &xyz, LVecBase3 &hpr) const;
bool ParametricCurveCollection::evaluate(PN_stdfloat t, LMatrix4 &result, CoordinateSystem cs = ::CS_default) const;

299 10 evaluate_t 0 4 506 37 ParametricCurveCollection::evaluate_t 0 1 45 490
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_t
//       Access: Published
//  Description: Determines the value of t that should be passed to
//               the XYZ and HPR curves, after applying the given
//               value of t to all the timewarps.  Return -1.0f if the
//               value of t exceeds one of the timewarps' ranges.
////////////////////////////////////////////////////////////////////
71
PN_stdfloat ParametricCurveCollection::evaluate_t(PN_stdfloat t) const;

300 12 evaluate_xyz 0 4 506 39 ParametricCurveCollection::evaluate_xyz 0 1 46 314
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_xyz
//       Access: Published
//  Description: Computes only the XYZ part of the curves.  See
//               evaluate().
////////////////////////////////////////////////////////////////////
89
inline bool ParametricCurveCollection::evaluate_xyz(PN_stdfloat t, LVecBase3 &xyz) const;

301 12 evaluate_hpr 0 4 506 39 ParametricCurveCollection::evaluate_hpr 0 1 47 314
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_hpr
//       Access: Published
//  Description: Computes only the HPR part of the curves.  See
//               evaluate().
////////////////////////////////////////////////////////////////////
89
inline bool ParametricCurveCollection::evaluate_hpr(PN_stdfloat t, LVecBase3 &hpr) const;

302 10 adjust_xyz 0 4 506 37 ParametricCurveCollection::adjust_xyz 0 2 48 49 958
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////
191
inline bool ParametricCurveCollection::adjust_xyz(PN_stdfloat t, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
bool ParametricCurveCollection::adjust_xyz(PN_stdfloat t, LVecBase3 const &xyz);

303 10 adjust_hpr 0 4 506 37 ParametricCurveCollection::adjust_hpr 0 2 50 51 958
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
////////////////////////////////////////////////////////////////////
191
inline bool ParametricCurveCollection::adjust_hpr(PN_stdfloat t, PN_stdfloat h, PN_stdfloat p, PN_stdfloat r);
bool ParametricCurveCollection::adjust_hpr(PN_stdfloat t, LVecBase3 const &xyz);

304 9 recompute 0 4 506 36 ParametricCurveCollection::recompute 0 1 52 409
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::recompute
//       Access: Published
//  Description: Ensures all the curves are freshly computed and
//               up-to-date.  Returns true if everything is valid,
//               false if at least one curve is incorrect.
////////////////////////////////////////////////////////////////////
48
bool ParametricCurveCollection::recompute(void);

305 6 stitch 0 4 506 33 ParametricCurveCollection::stitch 0 1 53 541
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::stitch
//       Access: Published
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.  This will
//               lose any timewarps on the input curves.
//
//               Returns true if successful, false on failure.
////////////////////////////////////////////////////////////////////
111
bool ParametricCurveCollection::stitch(ParametricCurveCollection const *a, ParametricCurveCollection const *b);

306 6 output 0 4 506 33 ParametricCurveCollection::output 0 1 54 350
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               ParametricCurveCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
59
void ParametricCurveCollection::output(ostream &out) const;

307 5 write 0 4 506 32 ParametricCurveCollection::write 0 1 55 354
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               ParametricCurveCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
80
void ParametricCurveCollection::write(ostream &out, int indent_level = 0) const;

308 9 write_egg 0 4 506 36 ParametricCurveCollection::write_egg 0 2 56 57 840
////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output file.  Returns
//               true if the file is successfully written.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output stream.  Returns
//               true if the file is successfully written.
////////////////////////////////////////////////////////////////////
201
bool ParametricCurveCollection::write_egg(Filename filename, CoordinateSystem cs = ::CS_default);
bool ParametricCurveCollection::write_egg(ostream &out, Filename const &filename, CoordinateSystem cs);

309 11 CurveFitter 0 4 508 24 CurveFitter::CurveFitter 0 1 58 220
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
31
CurveFitter::CurveFitter(void);

310 12 ~CurveFitter 0 4 508 25 CurveFitter::~CurveFitter 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
32
CurveFitter::~CurveFitter(void);

311 5 reset 0 4 508 18 CurveFitter::reset 0 1 59 332
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::reset
//       Access: Public
//  Description: Removes all the data points previously added to the
//               CurveFitter, and initializes it for a new curve.
////////////////////////////////////////////////////////////////////
30
void CurveFitter::reset(void);

312 7 add_xyz 0 4 508 20 CurveFitter::add_xyz 0 1 60 242
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz
//       Access: Public
//  Description: Adds a single sample xyz.
////////////////////////////////////////////////////////////////////
63
void CurveFitter::add_xyz(PN_stdfloat t, LVecBase3 const &xyz);

313 7 add_hpr 0 4 508 20 CurveFitter::add_hpr 0 1 61 242
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_hpr
//       Access: Public
//  Description: Adds a single sample hpr.
////////////////////////////////////////////////////////////////////
63
void CurveFitter::add_hpr(PN_stdfloat t, LVecBase3 const &hpr);

314 11 add_xyz_hpr 0 4 508 24 CurveFitter::add_xyz_hpr 0 1 62 267
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz_hpr
//       Access: Public
//  Description: Adds a single sample xyz & hpr simultaneously.
////////////////////////////////////////////////////////////////////
89
void CurveFitter::add_xyz_hpr(PN_stdfloat t, LVecBase3 const &xyz, LVecBase3 const &hpr);

315 15 get_num_samples 0 4 508 28 CurveFitter::get_num_samples 0 1 63 299
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_num_samples
//       Access: Public
//  Description: Returns the number of sample points that have been
//               added.
////////////////////////////////////////////////////////////////////
45
int CurveFitter::get_num_samples(void) const;

316 12 get_sample_t 0 4 508 25 CurveFitter::get_sample_t 0 1 64 275
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_t
//       Access: Public
//  Description: Returns the parametric value of the nth sample added.
////////////////////////////////////////////////////////////////////
51
PN_stdfloat CurveFitter::get_sample_t(int n) const;

317 14 get_sample_xyz 0 4 508 27 CurveFitter::get_sample_xyz 0 1 65 275
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_xyz
//       Access: Public
//  Description: Returns the point in space of the nth sample added.
////////////////////////////////////////////////////////////////////
51
LVecBase3 CurveFitter::get_sample_xyz(int n) const;

318 14 get_sample_hpr 0 4 508 27 CurveFitter::get_sample_hpr 0 1 66 272
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_hpr
//       Access: Public
//  Description: Returns the orientation of the nth sample added.
////////////////////////////////////////////////////////////////////
51
LVecBase3 CurveFitter::get_sample_hpr(int n) const;

319 18 get_sample_tangent 0 4 508 31 CurveFitter::get_sample_tangent 0 1 67 391
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_tangent
//       Access: Public
//  Description: Returns the tangent associated with the nth sample
//               added.  This is only meaningful if compute_tangents()
//               has already been called.
////////////////////////////////////////////////////////////////////
55
LVecBase3 CurveFitter::get_sample_tangent(int n) const;

320 14 remove_samples 0 4 508 27 CurveFitter::remove_samples 0 1 68 335
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::remove_samples
//       Access: Public
//  Description: Eliminates all samples from index begin, up to but not
//               including index end, from the database.
////////////////////////////////////////////////////////////////////
53
void CurveFitter::remove_samples(int begin, int end);

321 6 sample 0 4 508 19 CurveFitter::sample 0 1 69 473
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sample
//       Access: Public
//  Description: Generates a series of data points by sampling the
//               given curve (or xyz/hpr curves) the indicated number
//               of times.  The sampling is made evenly in parametric
//               time, and then the timewarps, if any, are applied.
////////////////////////////////////////////////////////////////////
71
void CurveFitter::sample(ParametricCurveCollection *curves, int count);

322 8 wrap_hpr 0 4 508 21 CurveFitter::wrap_hpr 0 1 70 400
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::wrap_hpr
//       Access: Public
//  Description: Resets each HPR data point so that the maximum delta
//               between any two consecutive points is 180 degrees,
//               which should prevent incorrect HPR wrapping.
////////////////////////////////////////////////////////////////////
33
void CurveFitter::wrap_hpr(void);

323 11 sort_points 0 4 508 24 CurveFitter::sort_points 0 1 71 339
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sort_points
//       Access: Public
//  Description: Sorts all the data points in order by parametric
//               time, in case they were added in an incorrect order.
////////////////////////////////////////////////////////////////////
36
void CurveFitter::sort_points(void);

324 8 desample 0 4 508 21 CurveFitter::desample 0 1 72 428
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::desample
//       Access: Public
//  Description: Removes sample points in order to reduce the
//               complexity of a sampled curve.  Keeps one out of
//               every factor samples.  Also keeps the first and the
//               last samples.
////////////////////////////////////////////////////////////////////
47
void CurveFitter::desample(PN_stdfloat factor);

325 16 compute_tangents 0 4 508 29 CurveFitter::compute_tangents 0 1 73 508
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::compute_tangents
//       Access: Public
//  Description: Once a set of points has been built, and prior to
//               calling MakeHermite() or MakeNurbs(),
//               ComputeTangents() must be called to set up the
//               tangents correctly (unless the tangents were defined
//               as the points were added).
////////////////////////////////////////////////////////////////////
54
void CurveFitter::compute_tangents(PN_stdfloat scale);

326 12 make_hermite 0 4 508 25 CurveFitter::make_hermite 0 1 74 300
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_hermite
//       Access: Public
//  Description: Converts the current set of data points into a
//               Hermite curve.
////////////////////////////////////////////////////////////////////
77
PointerTo< ParametricCurveCollection > CurveFitter::make_hermite(void) const;

327 10 make_nurbs 0 4 508 23 CurveFitter::make_nurbs 0 1 75 374
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_nurbs
//       Access: Public
//  Description: Converts the current set of data points into a
//               NURBS curve.  This gives a smoother curve than
//               produced by MakeHermite().
////////////////////////////////////////////////////////////////////
75
PointerTo< ParametricCurveCollection > CurveFitter::make_nurbs(void) const;

328 6 output 0 4 508 19 CurveFitter::output 0 1 76 215
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
void CurveFitter::output(ostream &out) const;

329 5 write 0 4 508 18 CurveFitter::write 0 1 77 214
////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void CurveFitter::write(ostream &out) const;

330 14 get_class_type 0 4 508 27 CurveFitter::get_class_type 0 1 78 0
52
static TypeHandle CurveFitter::get_class_type(void);

331 14 PiecewiseCurve 0 4 509 30 PiecewiseCurve::PiecewiseCurve 0 1 79 223
////////////////////////////////////////////////////////////////////
//     Function: PiecewiseCurve::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
PiecewiseCurve::PiecewiseCurve(void);

332 14 get_class_type 0 4 509 30 PiecewiseCurve::get_class_type 0 1 80 0
55
static TypeHandle PiecewiseCurve::get_class_type(void);

333 12 HermiteCurve 0 4 510 26 HermiteCurve::HermiteCurve 0 2 81 82 542
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a Hermite from the indicated (possibly
//               non-hermite) curve.
////////////////////////////////////////////////////////////////////
88
HermiteCurve::HermiteCurve(void);
HermiteCurve::HermiteCurve(ParametricCurve const &pc);

334 11 get_num_cvs 0 4 510 25 HermiteCurve::get_num_cvs 0 1 83 265
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_num_cvs
//       Access: Published
//  Description: Returns the number of CV's in the curve.
////////////////////////////////////////////////////////////////////
42
int HermiteCurve::get_num_cvs(void) const;

335 9 insert_cv 0 4 510 23 HermiteCurve::insert_cv 0 1 84 908
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::insert_cv
//       Access: Published
//  Description: Inserts a new CV at the given parametric point along
//               the curve.  If this parametric point is already on
//               the curve, the CV is assigned an index between its
//               two neighbors and the indices of all following CV's
//               are incremented by 1; its in and out tangents are
//               chosen to keep the curve consistent.  If the new
//               parametric point is beyond the end of the existing
//               curve, the curve is extended to meet it and the new
//               CV's position, in tangent, and out tangent are set to
//               zero.
//
//               The index number of the new CV is returned.
////////////////////////////////////////////////////////////////////
43
int HermiteCurve::insert_cv(PN_stdfloat t);

336 9 append_cv 0 4 510 23 HermiteCurve::append_cv 0 2 85 86 392
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::append_cv
//       Access: Published
//  Description: Adds a new CV to the end of the curve.  The new CV is
//               given initial in/out tangents of 0.  The return value
//               is the index of the new CV.
////////////////////////////////////////////////////////////////////
149
int HermiteCurve::append_cv(int type, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline int HermiteCurve::append_cv(int type, LVecBase3 const &v);

337 9 remove_cv 0 4 510 23 HermiteCurve::remove_cv 0 1 87 326
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_cv
//       Access: Published
//  Description: Removes the given CV from the curve.  Returns true if
//               the CV existed, false otherwise.
////////////////////////////////////////////////////////////////////
36
bool HermiteCurve::remove_cv(int n);

338 14 remove_all_cvs 0 4 510 28 HermiteCurve::remove_all_cvs 0 1 88 260
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_all_cvs
//       Access: Published
//  Description: Removes all CV's from the curve.
////////////////////////////////////////////////////////////////////
40
void HermiteCurve::remove_all_cvs(void);

339 11 set_cv_type 0 4 510 25 HermiteCurve::set_cv_type 0 1 89 907
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_type
//       Access: Published
//  Description: Changes the given CV's continuity type.  Legal values
//               are HC_CUT, HC_FREE, HC_G1, or HC_SMOOTH.
//
//               Other than HC_CUT, these have no effect on the actual
//               curve; it remains up to user software to impose the
//               constraints these imply.
//
//               HC_CUT implies a disconnection of the curve; HC_FREE
//               imposes no constraints on the tangents; HC_G1
//               forces the tangents to be collinear, and HC_SMOOTH
//               forces the tangents to be identical.  Setting type
//               type to HC_G1 or HC_SMOOTH may adjust the out
//               tangent to match the in tangent.
////////////////////////////////////////////////////////////////////
48
bool HermiteCurve::set_cv_type(int n, int type);

340 12 set_cv_point 0 4 510 26 HermiteCurve::set_cv_point 0 2 90 91 258
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_point
//       Access: Published
//  Description: Changes the given CV's position.
////////////////////////////////////////////////////////////////////
151
bool HermiteCurve::set_cv_point(int n, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline bool HermiteCurve::set_cv_point(int n, LVecBase3 const &v);

341 9 set_cv_in 0 4 510 23 HermiteCurve::set_cv_in 0 2 92 93 364
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_in
//       Access: Published
//  Description: Changes the given CV's in tangent.  Depending on the
//               continuity type, this may also adjust the out
//               tangent.
////////////////////////////////////////////////////////////////////
145
bool HermiteCurve::set_cv_in(int n, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline bool HermiteCurve::set_cv_in(int n, LVecBase3 const &v);

342 10 set_cv_out 0 4 510 24 HermiteCurve::set_cv_out 0 2 94 95 365
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_out
//       Access: Published
//  Description: Changes the given CV's out tangent.  Depending on the
//               continuity type, this may also adjust the in
//               tangent.
////////////////////////////////////////////////////////////////////
147
bool HermiteCurve::set_cv_out(int n, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline bool HermiteCurve::set_cv_out(int n, LVecBase3 const &v);

343 13 set_cv_tstart 0 4 510 27 HermiteCurve::set_cv_tstart 0 1 96 332
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_tstart
//       Access: Published
//  Description: Changes the given CV's parametric starting time.
//               This may affect the shape of the curve.
////////////////////////////////////////////////////////////////////
60
bool HermiteCurve::set_cv_tstart(int n, PN_stdfloat tstart);

344 11 set_cv_name 0 4 510 25 HermiteCurve::set_cv_name 0 1 97 274
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_name
//       Access: Published
//  Description: Changes the name associated with a particular CV.
////////////////////////////////////////////////////////////////////
56
bool HermiteCurve::set_cv_name(int n, char const *name);

345 11 get_cv_type 0 4 510 25 HermiteCurve::get_cv_type 0 1 98 365
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_type
//       Access: Published
//  Description: Returns the given CV's continuity type, HC_CUT,
//               HC_FREE, HC_G1, or HC_SMOOTH, or 0 if there is
//               no such CV.
////////////////////////////////////////////////////////////////////
43
int HermiteCurve::get_cv_type(int n) const;

346 12 get_cv_point 0 4 510 26 HermiteCurve::get_cv_point 0 2 99 100 263
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_point
//       Access: Published
//  Description: Returns the position of the given CV.
////////////////////////////////////////////////////////////////////
117
LVecBase3 const &HermiteCurve::get_cv_point(int n) const;
void HermiteCurve::get_cv_point(int n, LVecBase3 &v) const;

347 9 get_cv_in 0 4 510 23 HermiteCurve::get_cv_in 0 2 101 102 262
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_in
//       Access: Published
//  Description: Returns the in tangent of the given CV.
////////////////////////////////////////////////////////////////////
111
LVecBase3 const &HermiteCurve::get_cv_in(int n) const;
void HermiteCurve::get_cv_in(int n, LVecBase3 &v) const;

348 10 get_cv_out 0 4 510 24 HermiteCurve::get_cv_out 0 2 103 104 264
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_out
//       Access: Published
//  Description: Returns the out tangent of the given CV.
////////////////////////////////////////////////////////////////////
113
LVecBase3 const &HermiteCurve::get_cv_out(int n) const;
void HermiteCurve::get_cv_out(int n, LVecBase3 &v) const;

349 13 get_cv_tstart 0 4 510 27 HermiteCurve::get_cv_tstart 0 1 105 307
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_tstart
//       Access: Published
//  Description: Returns the starting point in parametric space of the
//               given CV.
////////////////////////////////////////////////////////////////////
53
PN_stdfloat HermiteCurve::get_cv_tstart(int n) const;

350 11 get_cv_name 0 4 510 25 HermiteCurve::get_cv_name 0 1 106 267
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_name
//       Access: Published
//  Description: Returns the name of the given CV, or NULL.
////////////////////////////////////////////////////////////////////
46
string HermiteCurve::get_cv_name(int n) const;

351 8 write_cv 0 4 510 22 HermiteCurve::write_cv 0 1 107 221
////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::write_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
void HermiteCurve::write_cv(ostream &out, int n) const;

352 14 get_class_type 0 4 510 28 HermiteCurve::get_class_type 0 1 108 0
53
static TypeHandle HermiteCurve::get_class_type(void);

353 20 ~NurbsCurveInterface 0 6 511 41 NurbsCurveInterface::~NurbsCurveInterface 0 0 240
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
56
virtual NurbsCurveInterface::~NurbsCurveInterface(void);

354 9 set_order 0 6 511 30 NurbsCurveInterface::set_order 0 1 109 0
59
virtual void NurbsCurveInterface::set_order(int order) = 0;

355 9 get_order 0 6 511 30 NurbsCurveInterface::get_order 0 1 110 0
59
virtual int NurbsCurveInterface::get_order(void) const = 0;

356 11 get_num_cvs 0 6 511 32 NurbsCurveInterface::get_num_cvs 0 1 111 0
61
virtual int NurbsCurveInterface::get_num_cvs(void) const = 0;

357 13 get_num_knots 0 6 511 34 NurbsCurveInterface::get_num_knots 0 1 112 0
63
virtual int NurbsCurveInterface::get_num_knots(void) const = 0;

358 9 insert_cv 0 6 511 30 NurbsCurveInterface::insert_cv 0 1 113 0
63
virtual bool NurbsCurveInterface::insert_cv(PN_stdfloat t) = 0;

359 9 append_cv 0 4 511 30 NurbsCurveInterface::append_cv 0 3 114 115 116 691
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
213
inline int NurbsCurveInterface::append_cv(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline int NurbsCurveInterface::append_cv(LVecBase3 const &v);
inline int NurbsCurveInterface::append_cv(LVecBase4 const &v);

360 9 remove_cv 0 6 511 30 NurbsCurveInterface::remove_cv 0 1 117 0
55
virtual bool NurbsCurveInterface::remove_cv(int n) = 0;

361 14 remove_all_cvs 0 6 511 35 NurbsCurveInterface::remove_all_cvs 0 1 118 0
59
virtual void NurbsCurveInterface::remove_all_cvs(void) = 0;

362 12 set_cv_point 0 4 511 33 NurbsCurveInterface::set_cv_point 0 2 119 120 662
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
172
inline bool NurbsCurveInterface::set_cv_point(int n, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline bool NurbsCurveInterface::set_cv_point(int n, LVecBase3 const &v);

363 12 get_cv_point 0 4 511 33 NurbsCurveInterface::get_cv_point 0 1 121 279
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_point
//       Access: Public, Scheme
//  Description: Returns the position of the indicated CV.
////////////////////////////////////////////////////////////////////
64
inline LVecBase3 NurbsCurveInterface::get_cv_point(int n) const;

364 13 set_cv_weight 0 4 511 34 NurbsCurveInterface::set_cv_weight 0 1 122 331
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_weight
//       Access: Published
//  Description: Sets the weight of the indicated CV without affecting
//               its position in 3-d space.
////////////////////////////////////////////////////////////////////
62
bool NurbsCurveInterface::set_cv_weight(int n, PN_stdfloat w);

365 13 get_cv_weight 0 4 511 34 NurbsCurveInterface::get_cv_weight 0 1 123 273
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_weight
//       Access: Published
//  Description: Returns the weight of the indicated CV.
////////////////////////////////////////////////////////////////////
67
inline PN_stdfloat NurbsCurveInterface::get_cv_weight(int n) const;

366 6 set_cv 0 6 511 27 NurbsCurveInterface::set_cv 0 1 124 0
72
virtual bool NurbsCurveInterface::set_cv(int n, LVecBase4 const &v) = 0;

367 6 get_cv 0 6 511 27 NurbsCurveInterface::get_cv 0 1 125 0
63
virtual LVecBase4 NurbsCurveInterface::get_cv(int n) const = 0;

368 8 set_knot 0 6 511 29 NurbsCurveInterface::set_knot 0 1 126 0
69
virtual bool NurbsCurveInterface::set_knot(int n, PN_stdfloat t) = 0;

369 8 get_knot 0 6 511 29 NurbsCurveInterface::get_knot 0 1 127 0
67
virtual PN_stdfloat NurbsCurveInterface::get_knot(int n) const = 0;

370 8 write_cv 0 4 511 29 NurbsCurveInterface::write_cv 0 1 128 228
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::write_cv
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
void NurbsCurveInterface::write_cv(ostream &out, int n) const;

371 14 get_class_type 0 4 511 35 NurbsCurveInterface::get_class_type 0 1 129 0
60
static TypeHandle NurbsCurveInterface::get_class_type(void);

372 24 upcast_to_PiecewiseCurve 0 12 512 36 NurbsCurve::upcast_to_PiecewiseCurve 0 1 133 40
upcast from NurbsCurve to PiecewiseCurve
59
PiecewiseCurve *NurbsCurve::upcast_to_PiecewiseCurve(void);

373 22 downcast_to_NurbsCurve 0 12 509 38 PiecewiseCurve::downcast_to_NurbsCurve 0 1 134 42
downcast from PiecewiseCurve to NurbsCurve
57
NurbsCurve *PiecewiseCurve::downcast_to_NurbsCurve(void);

374 29 upcast_to_NurbsCurveInterface 0 12 512 41 NurbsCurve::upcast_to_NurbsCurveInterface 0 1 135 45
upcast from NurbsCurve to NurbsCurveInterface
69
NurbsCurveInterface *NurbsCurve::upcast_to_NurbsCurveInterface(void);

375 22 downcast_to_NurbsCurve 0 12 511 43 NurbsCurveInterface::downcast_to_NurbsCurve 0 1 136 47
downcast from NurbsCurveInterface to NurbsCurve
62
NurbsCurve *NurbsCurveInterface::downcast_to_NurbsCurve(void);

376 10 NurbsCurve 0 4 512 22 NurbsCurve::NurbsCurve 0 2 130 131 860
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a NURBS curve equivalent to the indicated
//               (possibly non-NURBS) curve.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Constructor
//       Access: Published
//  Description: Constructs a NURBS curve according to the indicated
//               NURBS parameters.
////////////////////////////////////////////////////////////////////
80
NurbsCurve::NurbsCurve(void);
NurbsCurve::NurbsCurve(ParametricCurve const &pc);

377 11 ~NurbsCurve 0 6 512 23 NurbsCurve::~NurbsCurve 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
38
virtual NurbsCurve::~NurbsCurve(void);

378 14 get_class_type 0 4 512 26 NurbsCurve::get_class_type 0 1 132 0
51
static TypeHandle NurbsCurve::get_class_type(void);

379 11 get_start_t 0 4 513 29 NurbsCurveResult::get_start_t 0 1 137 315
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_start_t
//       Access: Published
//  Description: Returns the first legal value of t on the curve.
//               Usually this is 0.0.
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat NurbsCurveResult::get_start_t(void) const;

380 9 get_end_t 0 4 513 27 NurbsCurveResult::get_end_t 0 1 138 274
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_end_t
//       Access: Published
//  Description: Returns the last legal value of t on the curve.
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat NurbsCurveResult::get_end_t(void) const;

381 10 eval_point 0 4 513 28 NurbsCurveResult::eval_point 0 1 139 406
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_point
//       Access: Published
//  Description: Computes the point on the curve corresponding to the
//               indicated value in parametric time.  Returns true if
//               the t value is valid, false otherwise.
////////////////////////////////////////////////////////////////////
74
inline bool NurbsCurveResult::eval_point(PN_stdfloat t, LVecBase3 &point);

382 12 eval_tangent 0 4 513 30 NurbsCurveResult::eval_tangent 0 1 140 456
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_tangent
//       Access: Published
//  Description: Computes the tangent to the curve at the indicated
//               point in parametric time.  This tangent vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
////////////////////////////////////////////////////////////////////
78
inline bool NurbsCurveResult::eval_tangent(PN_stdfloat t, LVecBase3 &tangent);

383 19 eval_extended_point 0 4 513 37 NurbsCurveResult::eval_extended_point 0 1 141 402
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
79
inline PN_stdfloat NurbsCurveResult::eval_extended_point(PN_stdfloat t, int d);

384 20 eval_extended_points 0 4 513 38 NurbsCurveResult::eval_extended_points 0 0 534
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
118
inline bool NurbsCurveResult::eval_extended_points(PN_stdfloat t, int d, void *result[](size_t size), int num_values);

385 16 get_num_segments 0 4 513 34 NurbsCurveResult::get_num_segments 0 1 142 438
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_num_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               within the curve.  This number is usually not
//               important unless you plan to call
//               eval_segment_point().
////////////////////////////////////////////////////////////////////
58
inline int NurbsCurveResult::get_num_segments(void) const;

386 18 eval_segment_point 0 4 513 36 NurbsCurveResult::eval_segment_point 0 1 143 1042
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the curve corresponding to the
//               indicated value in parametric time within the
//               indicated curve segment.  t should be in the range
//               [0, 1].
//
//               The curve is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular curve depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous curve, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
////////////////////////////////////////////////////////////////////
94
void NurbsCurveResult::eval_segment_point(int segment, PN_stdfloat t, LVecBase3 &point) const;

387 20 eval_segment_tangent 0 4 513 38 NurbsCurveResult::eval_segment_tangent 0 1 144 479
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_tangent
//       Access: Published
//  Description: As eval_segment_point, but computes the tangent to
//               the curve at the indicated point.  The tangent vector
//               will not necessarily be normalized, and could be
//               zero, particularly at the endpoints.
////////////////////////////////////////////////////////////////////
98
void NurbsCurveResult::eval_segment_tangent(int segment, PN_stdfloat t, LVecBase3 &tangent) const;

388 27 eval_segment_extended_point 0 4 513 45 NurbsCurveResult::eval_segment_extended_point 0 1 145 410
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
99
PN_stdfloat NurbsCurveResult::eval_segment_extended_point(int segment, PN_stdfloat t, int d) const;

389 28 eval_segment_extended_points 0 4 513 46 NurbsCurveResult::eval_segment_extended_points 0 0 542
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
138
void NurbsCurveResult::eval_segment_extended_points(int segment, PN_stdfloat t, int d, void *result[](size_t size), int num_values) const;

390 13 get_segment_t 0 4 513 31 NurbsCurveResult::get_segment_t 0 1 146 482
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_segment_t
//       Access: Published
//  Description: Accepts a t value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               t value in the entire curve (as in eval_point()).
////////////////////////////////////////////////////////////////////
85
inline PN_stdfloat NurbsCurveResult::get_segment_t(int segment, PN_stdfloat t) const;

391 15 adaptive_sample 0 4 513 33 NurbsCurveResult::adaptive_sample 0 1 147 642
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::adaptive_sample
//       Access: Published
//  Description: Determines the set of subdivisions necessary to
//               approximate the curve with a set of linear segments,
//               no point of which is farther than tolerance units
//               from the actual curve.
//
//               After this call, you may walk through the resulting
//               set of samples with get_num_samples(),
//               get_sample_t(), and get_sample_point().
////////////////////////////////////////////////////////////////////
62
void NurbsCurveResult::adaptive_sample(PN_stdfloat tolerance);

392 15 get_num_samples 0 4 513 33 NurbsCurveResult::get_num_samples 0 1 148 338
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_num_samples
//       Access: Published
//  Description: Returns the number of sample points generated by the
//               previous call to adaptive_sample().
////////////////////////////////////////////////////////////////////
57
inline int NurbsCurveResult::get_num_samples(void) const;

393 12 get_sample_t 0 4 513 30 NurbsCurveResult::get_sample_t 0 1 149 343
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_sample_t
//       Access: Published
//  Description: Returns the t value of the nth sample point generated
//               by the previous call to adaptive_sample().
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat NurbsCurveResult::get_sample_t(int n) const;

394 16 get_sample_point 0 4 513 34 NurbsCurveResult::get_sample_point 0 1 150 551
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_sample_point
//       Access: Published
//  Description: Returns the point on the curve of the nth sample
//               point generated by the previous call to
//               adaptive_sample().
//
//               For tangents, or extended points, you should use
//               get_sample_t() and pass it into eval_tangent() or
//               eval_extended_point().
////////////////////////////////////////////////////////////////////
70
inline LPoint3 const &NurbsCurveResult::get_sample_point(int n) const;

395 19 NurbsCurveEvaluator 0 4 514 40 NurbsCurveEvaluator::NurbsCurveEvaluator 0 1 151 231
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
NurbsCurveEvaluator::NurbsCurveEvaluator(void);

396 9 set_order 0 4 514 30 NurbsCurveEvaluator::set_order 0 1 152 502
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_order
//       Access: Published
//  Description: Sets the order of the curve.  This resets the knot
//               vector to the default knot vector for the number of
//               vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the curve.
////////////////////////////////////////////////////////////////////
54
inline void NurbsCurveEvaluator::set_order(int order);

397 9 get_order 0 4 514 30 NurbsCurveEvaluator::get_order 0 1 153 319
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_order
//       Access: Published
//  Description: Returns the order of the curve as set by a previous
//               call to set_order().
////////////////////////////////////////////////////////////////////
54
inline int NurbsCurveEvaluator::get_order(void) const;

398 5 reset 0 4 514 26 NurbsCurveEvaluator::reset 0 1 154 508
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the curve up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
////////////////////////////////////////////////////////////////////
50
void NurbsCurveEvaluator::reset(int num_vertices);

399 16 get_num_vertices 0 4 514 37 NurbsCurveEvaluator::get_num_vertices 0 1 155 378
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the curve.
//               This is the number passed to the last call to
//               reset().
////////////////////////////////////////////////////////////////////
61
inline int NurbsCurveEvaluator::get_num_vertices(void) const;

400 10 set_vertex 0 4 514 31 NurbsCurveEvaluator::set_vertex 0 2 156 157 985
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
////////////////////////////////////////////////////////////////////
179
inline void NurbsCurveEvaluator::set_vertex(int i, LVecBase4 const &vertex);
inline void NurbsCurveEvaluator::set_vertex(int i, LVecBase3 const &vertex, PN_stdfloat weight = 1.0);

401 10 get_vertex 0 4 514 31 NurbsCurveEvaluator::get_vertex 0 2 158 159 670
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to its indicated coordinate space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to the given coordinate space.
////////////////////////////////////////////////////////////////////
156
inline LVecBase4 const &NurbsCurveEvaluator::get_vertex(int i) const;
inline LVecBase4 NurbsCurveEvaluator::get_vertex(int i, NodePath const &rel_to) const;

402 16 set_vertex_space 0 4 514 37 NurbsCurveEvaluator::set_vertex_space 0 2 160 161 1436
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the curve.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the curve is evaluated.
////////////////////////////////////////////////////////////////////
159
inline void NurbsCurveEvaluator::set_vertex_space(int i, NodePath const &space);
inline void NurbsCurveEvaluator::set_vertex_space(int i, string const &space);

403 16 get_vertex_space 0 4 514 37 NurbsCurveEvaluator::get_vertex_space 0 1 162 347
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the curve, expressed as a NodePath.
////////////////////////////////////////////////////////////////////
84
NodePath NurbsCurveEvaluator::get_vertex_space(int i, NodePath const &rel_to) const;

404 19 set_extended_vertex 0 4 514 40 NurbsCurveEvaluator::set_extended_vertex 0 1 163 1219
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or curve in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
////////////////////////////////////////////////////////////////////
86
inline void NurbsCurveEvaluator::set_extended_vertex(int i, int d, PN_stdfloat value);

405 19 get_extended_vertex 0 4 514 40 NurbsCurveEvaluator::get_extended_vertex 0 1 164 443
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
////////////////////////////////////////////////////////////////////
80
inline PN_stdfloat NurbsCurveEvaluator::get_extended_vertex(int i, int d) const;

406 21 set_extended_vertices 0 4 514 42 NurbsCurveEvaluator::set_extended_vertices 0 0 546
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_extended_vertices
//       Access: Public
//  Description: Simultaneously sets several extended values in the
//               slots d through (d + num_values - 1) from the
//               num_values elements of the indicated array.  This is
//               equivalent to calling set_extended_vertex()
//               num_values times.  See set_extended_vertex().
////////////////////////////////////////////////////////////////////
107
void NurbsCurveEvaluator::set_extended_vertices(int i, int d, void *values[](size_t size), int num_values);

407 13 get_num_knots 0 4 514 34 NurbsCurveEvaluator::get_num_knots 0 1 165 354
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_knots
//       Access: Published
//  Description: Returns the number of knot values in the curve.  This
//               is based on the number of vertices and the order.
////////////////////////////////////////////////////////////////////
58
inline int NurbsCurveEvaluator::get_num_knots(void) const;

408 8 set_knot 0 4 514 29 NurbsCurveEvaluator::set_knot 0 1 166 447
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
////////////////////////////////////////////////////////////////////
60
void NurbsCurveEvaluator::set_knot(int i, PN_stdfloat knot);

409 8 get_knot 0 4 514 29 NurbsCurveEvaluator::get_knot 0 1 167 263
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
////////////////////////////////////////////////////////////////////
55
PN_stdfloat NurbsCurveEvaluator::get_knot(int i) const;

410 15 normalize_knots 0 4 514 36 NurbsCurveEvaluator::normalize_knots 0 1 168 334
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::normalize_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the curve is 0 .. 1.
////////////////////////////////////////////////////////////////////
48
void NurbsCurveEvaluator::normalize_knots(void);

411 16 get_num_segments 0 4 514 37 NurbsCurveEvaluator::get_num_segments 0 1 169 354
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the curve.  This is based on the knot vector.
////////////////////////////////////////////////////////////////////
61
inline int NurbsCurveEvaluator::get_num_segments(void) const;

412 8 evaluate 0 4 514 29 NurbsCurveEvaluator::evaluate 0 2 170 171 987
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space, and then further
//               transformed by the indicated matrix.
////////////////////////////////////////////////////////////////////
215
PointerTo< NurbsCurveResult > NurbsCurveEvaluator::evaluate(NodePath const &rel_to = NodePath()) const;
PointerTo< NurbsCurveResult > NurbsCurveEvaluator::evaluate(NodePath const &rel_to, LMatrix4 const &mat) const;

413 6 output 0 4 514 27 NurbsCurveEvaluator::output 0 1 172 227
////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void NurbsCurveEvaluator::output(ostream &out) const;

414 11 get_start_u 0 4 515 31 NurbsSurfaceResult::get_start_u 0 1 173 316
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_u
//       Access: Public
//  Description: Returns the first legal value of u on the surface.
//               Usually this is 0.0.
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat NurbsSurfaceResult::get_start_u(void) const;

415 9 get_end_u 0 4 515 29 NurbsSurfaceResult::get_end_u 0 1 174 275
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_u
//       Access: Public
//  Description: Returns the last legal value of u on the surface.
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat NurbsSurfaceResult::get_end_u(void) const;

416 11 get_start_v 0 4 515 31 NurbsSurfaceResult::get_start_v 0 1 175 316
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_v
//       Access: Public
//  Description: Returns the first legal value of v on the surface.
//               Usually this is 0.0.
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat NurbsSurfaceResult::get_start_v(void) const;

417 9 get_end_v 0 4 515 29 NurbsSurfaceResult::get_end_v 0 1 176 275
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_v
//       Access: Public
//  Description: Returns the last legal value of v on the surface.
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat NurbsSurfaceResult::get_end_v(void) const;

418 10 eval_point 0 4 515 30 NurbsSurfaceResult::eval_point 0 1 177 415
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_point
//       Access: Published
//  Description: Computes the point on the surface corresponding to the
//               indicated value in parametric time.  Returns true if
//               the u, v values are valid, false otherwise.
////////////////////////////////////////////////////////////////////
91
inline bool NurbsSurfaceResult::eval_point(PN_stdfloat u, PN_stdfloat v, LVecBase3 &point);

419 11 eval_normal 0 4 515 31 NurbsSurfaceResult::eval_normal 0 1 178 457
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_normal
//       Access: Published
//  Description: Computes the normal to the surface at the indicated
//               point in parametric time.  This normal vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
////////////////////////////////////////////////////////////////////
93
inline bool NurbsSurfaceResult::eval_normal(PN_stdfloat u, PN_stdfloat v, LVecBase3 &normal);

420 19 eval_extended_point 0 4 515 39 NurbsSurfaceResult::eval_extended_point 0 1 179 408
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
96
inline PN_stdfloat NurbsSurfaceResult::eval_extended_point(PN_stdfloat u, PN_stdfloat v, int d);

421 20 eval_extended_points 0 4 515 40 NurbsSurfaceResult::eval_extended_points 0 0 536
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
135
inline bool NurbsSurfaceResult::eval_extended_points(PN_stdfloat u, PN_stdfloat v, int d, void *result[](size_t size), int num_values);

422 18 get_num_u_segments 0 4 515 38 NurbsSurfaceResult::get_num_u_segments 0 1 180 460
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_u_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the U direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceResult::get_num_u_segments(void) const;

423 18 get_num_v_segments 0 4 515 38 NurbsSurfaceResult::get_num_v_segments 0 1 181 460
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_v_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the V direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceResult::get_num_v_segments(void) const;

424 18 eval_segment_point 0 4 515 38 NurbsSurfaceResult::eval_segment_point 0 1 182 1060
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the surface corresponding to the
//               indicated value in parametric time within the
//               indicated surface segment.  u and v should be in the
//               range [0, 1].
//
//               The surface is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular surface depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous surface, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
////////////////////////////////////////////////////////////////////
114
void NurbsSurfaceResult::eval_segment_point(int ui, int vi, PN_stdfloat u, PN_stdfloat v, LVecBase3 &point) const;

425 19 eval_segment_normal 0 4 515 39 NurbsSurfaceResult::eval_segment_normal 0 1 183 449
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_normal
//       Access: Published
//  Description: As eval_segment_point, but computes the normal to
//               the surface at the indicated point.  The normal vector
//               will not necessarily be normalized, and could be
//               zero.
////////////////////////////////////////////////////////////////////
116
void NurbsSurfaceResult::eval_segment_normal(int ui, int vi, PN_stdfloat u, PN_stdfloat v, LVecBase3 &normal) const;

426 27 eval_segment_extended_point 0 4 515 47 NurbsSurfaceResult::eval_segment_extended_point 0 1 184 416
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
////////////////////////////////////////////////////////////////////
119
PN_stdfloat NurbsSurfaceResult::eval_segment_extended_point(int ui, int vi, PN_stdfloat u, PN_stdfloat v, int d) const;

427 28 eval_segment_extended_points 0 4 515 48 NurbsSurfaceResult::eval_segment_extended_points 0 0 544
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_extended_points
//       Access: Published
//  Description: Simultaneously performs eval_extended_point on a
//               contiguous sequence of dimensions.  The dimensions
//               evaluated are d through (d + num_values - 1); the
//               results are filled into the num_values elements in
//               the indicated result array.
////////////////////////////////////////////////////////////////////
158
void NurbsSurfaceResult::eval_segment_extended_points(int ui, int vi, PN_stdfloat u, PN_stdfloat v, int d, void *result[](size_t size), int num_values) const;

428 13 get_segment_u 0 4 515 33 NurbsSurfaceResult::get_segment_u 0 1 185 483
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_u
//       Access: Public
//  Description: Accepts a u value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               u value in the entire surface (as in eval_point()).
////////////////////////////////////////////////////////////////////
82
inline PN_stdfloat NurbsSurfaceResult::get_segment_u(int ui, PN_stdfloat u) const;

429 13 get_segment_v 0 4 515 33 NurbsSurfaceResult::get_segment_v 0 1 186 483
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_v
//       Access: Public
//  Description: Accepts a v value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               v value in the entire surface (as in eval_point()).
////////////////////////////////////////////////////////////////////
82
inline PN_stdfloat NurbsSurfaceResult::get_segment_v(int vi, PN_stdfloat v) const;

430 21 NurbsSurfaceEvaluator 0 4 516 44 NurbsSurfaceEvaluator::NurbsSurfaceEvaluator 0 1 187 233
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
NurbsSurfaceEvaluator::NurbsSurfaceEvaluator(void);

431 11 set_u_order 0 4 516 34 NurbsSurfaceEvaluator::set_u_order 0 1 188 528
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_order
//       Access: Published
//  Description: Sets the order of the surface in the U direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
////////////////////////////////////////////////////////////////////
60
inline void NurbsSurfaceEvaluator::set_u_order(int u_order);

432 11 get_u_order 0 4 516 34 NurbsSurfaceEvaluator::get_u_order 0 1 189 346
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_order
//       Access: Published
//  Description: Returns the order of the surface in the U direction
//               as set by a previous call to set_u_order().
////////////////////////////////////////////////////////////////////
58
inline int NurbsSurfaceEvaluator::get_u_order(void) const;

433 11 set_v_order 0 4 516 34 NurbsSurfaceEvaluator::set_v_order 0 1 190 528
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_order
//       Access: Published
//  Description: Sets the order of the surface in the V direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
////////////////////////////////////////////////////////////////////
60
inline void NurbsSurfaceEvaluator::set_v_order(int v_order);

434 11 get_v_order 0 4 516 34 NurbsSurfaceEvaluator::get_v_order 0 1 191 346
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_order
//       Access: Published
//  Description: Returns the order of the surface in the V direction
//               as set by a previous call to set_v_order().
////////////////////////////////////////////////////////////////////
58
inline int NurbsSurfaceEvaluator::get_v_order(void) const;

435 5 reset 0 4 516 28 NurbsSurfaceEvaluator::reset 0 1 192 512
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the surface up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
////////////////////////////////////////////////////////////////////
74
void NurbsSurfaceEvaluator::reset(int num_u_vertices, int num_v_vertices);

436 18 get_num_u_vertices 0 4 516 41 NurbsSurfaceEvaluator::get_num_u_vertices 0 1 193 404
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the U
//               direction on the surface.  This is the number passed
//               to the last call to reset().
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_u_vertices(void) const;

437 18 get_num_v_vertices 0 4 516 41 NurbsSurfaceEvaluator::get_num_v_vertices 0 1 194 404
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the V
//               direction on the surface.  This is the number passed
//               to the last call to reset().
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_v_vertices(void) const;

438 10 set_vertex 0 4 516 33 NurbsSurfaceEvaluator::set_vertex 0 2 195 196 993
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
////////////////////////////////////////////////////////////////////
201
inline void NurbsSurfaceEvaluator::set_vertex(int ui, int vi, LVecBase4 const &vertex);
inline void NurbsSurfaceEvaluator::set_vertex(int ui, int vi, LVecBase3 const &vertex, PN_stdfloat weight = 1.0);

439 10 get_vertex 0 4 516 33 NurbsSurfaceEvaluator::get_vertex 0 2 197 198 678
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to its indicated coordinate space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to the given coordinate space.
////////////////////////////////////////////////////////////////////
178
inline LVecBase4 const &NurbsSurfaceEvaluator::get_vertex(int ui, int vi) const;
inline LVecBase4 NurbsSurfaceEvaluator::get_vertex(int ui, int vi, NodePath const &rel_to) const;

440 16 set_vertex_space 0 4 516 39 NurbsSurfaceEvaluator::set_vertex_space 0 2 199 200 1444
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the surface.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the surface is evaluated.
////////////////////////////////////////////////////////////////////
181
inline void NurbsSurfaceEvaluator::set_vertex_space(int ui, int vi, NodePath const &space);
inline void NurbsSurfaceEvaluator::set_vertex_space(int ui, int vi, string const &space);

441 16 get_vertex_space 0 4 516 39 NurbsSurfaceEvaluator::get_vertex_space 0 1 201 351
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the surface, expressed as a NodePath.
////////////////////////////////////////////////////////////////////
95
NodePath NurbsSurfaceEvaluator::get_vertex_space(int ui, int vi, NodePath const &rel_to) const;

442 19 set_extended_vertex 0 4 516 42 NurbsSurfaceEvaluator::set_extended_vertex 0 1 202 1223
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or surface in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
////////////////////////////////////////////////////////////////////
97
inline void NurbsSurfaceEvaluator::set_extended_vertex(int ui, int vi, int d, PN_stdfloat value);

443 19 get_extended_vertex 0 4 516 42 NurbsSurfaceEvaluator::get_extended_vertex 0 1 203 445
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
////////////////////////////////////////////////////////////////////
91
inline PN_stdfloat NurbsSurfaceEvaluator::get_extended_vertex(int ui, int vi, int d) const;

444 21 set_extended_vertices 0 4 516 44 NurbsSurfaceEvaluator::set_extended_vertices 0 0 548
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_extended_vertices
//       Access: Public
//  Description: Simultaneously sets several extended values in the
//               slots d through (d + num_values - 1) from the
//               num_values elements of the indicated array.  This is
//               equivalent to calling set_extended_vertex()
//               num_values times.  See set_extended_vertex().
////////////////////////////////////////////////////////////////////
118
void NurbsSurfaceEvaluator::set_extended_vertices(int ui, int vi, int d, void *values[](size_t size), int num_values);

445 15 get_num_u_knots 0 4 516 38 NurbsSurfaceEvaluator::get_num_u_knots 0 1 204 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the U direction.  This is based on the number of
//               vertices and the order.
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceEvaluator::get_num_u_knots(void) const;

446 10 set_u_knot 0 4 516 33 NurbsSurfaceEvaluator::set_u_knot 0 1 205 451
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
////////////////////////////////////////////////////////////////////
64
void NurbsSurfaceEvaluator::set_u_knot(int i, PN_stdfloat knot);

447 10 get_u_knot 0 4 516 33 NurbsSurfaceEvaluator::get_u_knot 0 1 206 267
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
////////////////////////////////////////////////////////////////////
59
PN_stdfloat NurbsSurfaceEvaluator::get_u_knot(int i) const;

448 17 normalize_u_knots 0 4 516 40 NurbsSurfaceEvaluator::normalize_u_knots 0 1 207 359
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_u_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
////////////////////////////////////////////////////////////////////
52
void NurbsSurfaceEvaluator::normalize_u_knots(void);

449 15 get_num_v_knots 0 4 516 38 NurbsSurfaceEvaluator::get_num_v_knots 0 1 208 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the V direction.  This is based on the number of
//               vertices and the order.
////////////////////////////////////////////////////////////////////
62
inline int NurbsSurfaceEvaluator::get_num_v_knots(void) const;

450 10 set_v_knot 0 4 516 33 NurbsSurfaceEvaluator::set_v_knot 0 1 209 451
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
////////////////////////////////////////////////////////////////////
64
void NurbsSurfaceEvaluator::set_v_knot(int i, PN_stdfloat knot);

451 10 get_v_knot 0 4 516 33 NurbsSurfaceEvaluator::get_v_knot 0 1 210 267
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
////////////////////////////////////////////////////////////////////
59
PN_stdfloat NurbsSurfaceEvaluator::get_v_knot(int i) const;

452 17 normalize_v_knots 0 4 516 40 NurbsSurfaceEvaluator::normalize_v_knots 0 1 211 359
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_v_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
////////////////////////////////////////////////////////////////////
52
void NurbsSurfaceEvaluator::normalize_v_knots(void);

453 18 get_num_u_segments 0 4 516 41 NurbsSurfaceEvaluator::get_num_u_segments 0 1 212 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the U direction.  This is based on
//               the knot vector.
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_u_segments(void) const;

454 18 get_num_v_segments 0 4 516 41 NurbsSurfaceEvaluator::get_num_v_segments 0 1 213 396
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the V direction.  This is based on
//               the knot vector.
////////////////////////////////////////////////////////////////////
65
inline int NurbsSurfaceEvaluator::get_num_v_segments(void) const;

455 8 evaluate 0 4 516 31 NurbsSurfaceEvaluator::evaluate 0 1 214 461
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsSurfaceResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
////////////////////////////////////////////////////////////////////
107
PointerTo< NurbsSurfaceResult > NurbsSurfaceEvaluator::evaluate(NodePath const &rel_to = NodePath()) const;

456 6 output 0 4 516 29 NurbsSurfaceEvaluator::output 0 1 215 229
////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void NurbsSurfaceEvaluator::output(ostream &out) const;

457 8 RopeNode 0 4 517 18 RopeNode::RopeNode 0 1 216 444
////////////////////////////////////////////////////////////////////
//     Function: RopeNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RopeNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
39
RopeNode::RopeNode(string const &name);

458 9 set_curve 0 4 517 19 RopeNode::set_curve 0 1 217 280
////////////////////////////////////////////////////////////////////
//     Function: set_curve
//       Access: Published
//  Description: Sets the particular curve represented by the
//               RopeNode.
////////////////////////////////////////////////////////////////////
60
inline void RopeNode::set_curve(NurbsCurveEvaluator *curve);

459 9 get_curve 0 4 517 19 RopeNode::get_curve 0 1 218 255
////////////////////////////////////////////////////////////////////
//     Function: get_curve
//       Access: Published
//  Description: Returns the curve represented by the RopeNode.
////////////////////////////////////////////////////////////////////
60
inline NurbsCurveEvaluator *RopeNode::get_curve(void) const;

460 15 set_render_mode 0 4 517 25 RopeNode::set_render_mode 0 1 219 365
////////////////////////////////////////////////////////////////////
//     Function: set_render_mode
//       Access: Published
//  Description: Specifies the method used to render the rope.  The
//               simplest is RM_thread, which just draws a one-pixel
//               line segment.
////////////////////////////////////////////////////////////////////
72
inline void RopeNode::set_render_mode(RopeNode::RenderMode render_mode);

461 15 get_render_mode 0 4 517 25 RopeNode::get_render_mode 0 1 220 299
////////////////////////////////////////////////////////////////////
//     Function: get_render_mode
//       Access: Published
//  Description: Returns the method used to render the rope.  See
//               set_render_mode().
////////////////////////////////////////////////////////////////////
66
inline RopeNode::RenderMode RopeNode::get_render_mode(void) const;

462 11 set_uv_mode 0 4 517 21 RopeNode::set_uv_mode 0 1 221 289
////////////////////////////////////////////////////////////////////
//     Function: set_uv_mode
//       Access: Published
//  Description: Specifies the algorithm to use to generate UV's for
//               the rope.
////////////////////////////////////////////////////////////////////
60
inline void RopeNode::set_uv_mode(RopeNode::UVMode uv_mode);

463 11 get_uv_mode 0 4 517 21 RopeNode::get_uv_mode 0 1 222 287
////////////////////////////////////////////////////////////////////
//     Function: get_uv_mode
//       Access: Published
//  Description: Returns the algorithm to use to generate UV's for the
//               rope.
////////////////////////////////////////////////////////////////////
58
inline RopeNode::UVMode RopeNode::get_uv_mode(void) const;

464 16 set_uv_direction 0 4 517 26 RopeNode::set_uv_direction 0 1 223 334
////////////////////////////////////////////////////////////////////
//     Function: set_uv_direction
//       Access: Published
//  Description: Specify true to vary the U coordinate down the length
//               of the rope, or false to vary the V coordinate.
////////////////////////////////////////////////////////////////////
56
inline void RopeNode::set_uv_direction(bool u_dominant);

465 16 get_uv_direction 0 4 517 26 RopeNode::get_uv_direction 0 1 224 360
////////////////////////////////////////////////////////////////////
//     Function: get_uv_direction
//       Access: Published
//  Description: Returns true if the rope runs down the U coordinate
//               of the texture, or false if it runs down the V
//               coordinate.
////////////////////////////////////////////////////////////////////
51
inline bool RopeNode::get_uv_direction(void) const;

466 12 set_uv_scale 0 4 517 22 RopeNode::set_uv_scale 0 1 225 452
////////////////////////////////////////////////////////////////////
//     Function: set_uv_scale
//       Access: Published
//  Description: Specifies an additional scaling factor to apply to
//               generated UV's along the rope.  This scale factor is
//               applied in whichever direction is along the rope, as
//               specified by set_uv_direction().
////////////////////////////////////////////////////////////////////
54
inline void RopeNode::set_uv_scale(PN_stdfloat scale);

467 12 get_uv_scale 0 4 517 22 RopeNode::get_uv_scale 0 1 226 296
////////////////////////////////////////////////////////////////////
//     Function: get_uv_scale
//       Access: Published
//  Description: Returns the scaling factor to apply to generated UV's
//               for the rope.
////////////////////////////////////////////////////////////////////
54
inline PN_stdfloat RopeNode::get_uv_scale(void) const;

468 15 set_normal_mode 0 4 517 25 RopeNode::set_normal_mode 0 1 227 441
////////////////////////////////////////////////////////////////////
//     Function: set_normal_mode
//       Access: Published
//  Description: Specifies the kind of normals to generate for the
//               rope.  This is only applicable when the RenderMode is
//               set to RM_tube; in the other render modes, normals
//               are never generated.
////////////////////////////////////////////////////////////////////
72
inline void RopeNode::set_normal_mode(RopeNode::NormalMode normal_mode);

469 15 get_normal_mode 0 4 517 25 RopeNode::get_normal_mode 0 1 228 365
////////////////////////////////////////////////////////////////////
//     Function: get_normal_mode
//       Access: Published
//  Description: Returns the kind of normals to generate for the rope.
//               This is only applicable when the RenderMode is set to
//               RM_tube.
////////////////////////////////////////////////////////////////////
66
inline RopeNode::NormalMode RopeNode::get_normal_mode(void) const;

470 11 set_tube_up 0 4 517 21 RopeNode::set_tube_up 0 1 229 723
////////////////////////////////////////////////////////////////////
//     Function: set_tube_up
//       Access: Published
//  Description: Specifies a normal vector, generally perpendicular to
//               the main axis of the starting point of the curve,
//               that controls the "top" of the curve, when RenderMode
//               is RM_tube.  This is used to orient the vertices that
//               make up the tube.  If this vector is too nearly
//               parallel with the starting direction of the curve,
//               there may be a tendency for the whole tube to
//               gimble-lock around its primary axis.
////////////////////////////////////////////////////////////////////
59
inline void RopeNode::set_tube_up(LVector3 const &tube_up);

471 11 get_tube_up 0 4 517 21 RopeNode::get_tube_up 0 1 230 358
////////////////////////////////////////////////////////////////////
//     Function: get_tube_up
//       Access: Published
//  Description: Returns the normal vector used to control the "top"
//               of the curve, when RenderMode is RM_tube.  See
//               set_tube_up().
////////////////////////////////////////////////////////////////////
57
inline LVector3 const &RopeNode::get_tube_up(void) const;

472 20 set_use_vertex_color 0 4 517 30 RopeNode::set_use_vertex_color 0 1 231 667
////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Published
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions n + 0, n + 1, n + 2, n + 3,
//               respectively, of the extended vertex values, where n
//               is the value returned by
//               get_vertex_color_dimension().  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
////////////////////////////////////////////////////////////////////
54
inline void RopeNode::set_use_vertex_color(bool flag);

473 20 get_use_vertex_color 0 4 517 30 RopeNode::get_use_vertex_color 0 1 232 302
////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Published
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
////////////////////////////////////////////////////////////////////
55
inline bool RopeNode::get_use_vertex_color(void) const;

474 26 get_vertex_color_dimension 0 4 517 36 RopeNode::get_vertex_color_dimension 0 1 233 506
////////////////////////////////////////////////////////////////////
//     Function: get_vertex_color_dimension
//       Access: Published, Static
//  Description: Returns the numeric extended dimension in which the
//               color components should be found.  See
//               NurbsCurveEvaluator::set_extended_vertex().
//
//               The color components will be expected at (n, n + 1, n
//               + 2, n + 3).
////////////////////////////////////////////////////////////////////
61
static inline int RopeNode::get_vertex_color_dimension(void);

475 14 set_num_subdiv 0 4 517 24 RopeNode::set_num_subdiv 0 1 234 388
////////////////////////////////////////////////////////////////////
//     Function: set_num_subdiv
//       Access: Published
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the curve.
////////////////////////////////////////////////////////////////////
53
inline void RopeNode::set_num_subdiv(int num_subdiv);

476 14 get_num_subdiv 0 4 517 24 RopeNode::get_num_subdiv 0 1 235 315
////////////////////////////////////////////////////////////////////
//     Function: get_num_subdiv
//       Access: Published
//  Description: Returns the number of subdivisions per cubic segment
//               to draw.  See set_num_subdiv().
////////////////////////////////////////////////////////////////////
48
inline int RopeNode::get_num_subdiv(void) const;

477 14 set_num_slices 0 4 517 24 RopeNode::set_num_slices 0 1 236 711
////////////////////////////////////////////////////////////////////
//     Function: set_num_slices
//       Access: Published
//  Description: Specifies the number of radial subdivisions to make
//               if RenderMode is RM_tube.  It is ignored in the other
//               render modes.
//
//               Increasing this number increases the roundness of a
//               cross-section of the tube.  The minimum value for a
//               dimensional tube is 3; setting it to 2 will get you a
//               thin piece of tape (which is similar to RM_billboard,
//               except it won't rotate to face the camera).
////////////////////////////////////////////////////////////////////
53
inline void RopeNode::set_num_slices(int num_slices);

478 14 get_num_slices 0 4 517 24 RopeNode::get_num_slices 0 1 237 388
////////////////////////////////////////////////////////////////////
//     Function: get_num_slices
//       Access: Published
//  Description: Returns the number of radial subdivisions to make if
//               RenderMode is RM_tube.  It is ignored in the other
//               render modes.  See set_num_slices().
////////////////////////////////////////////////////////////////////
48
inline int RopeNode::get_num_slices(void) const;

479 24 set_use_vertex_thickness 0 4 517 34 RopeNode::set_use_vertex_thickness 0 1 238 752
////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_thickness
//       Access: Published
//  Description: Sets the "use vertex thickness" flag.  When this is true,
//               the vertex thickness is assumed to be stored as the
//               dimension get_vertex_thickness_dimension(), of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
//
//               In this mode, the overall thickness is also applied
//               as a scale to the vertex thickness.  Not all render
//               modes support vertex thickness.
////////////////////////////////////////////////////////////////////
58
inline void RopeNode::set_use_vertex_thickness(bool flag);

480 24 get_use_vertex_thickness 0 4 517 34 RopeNode::get_use_vertex_thickness 0 1 239 314
////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_thickness
//       Access: Published
//  Description: Returns the "use vertex thickness" flag.  See
//               set_use_vertex_thickness().
////////////////////////////////////////////////////////////////////
59
inline bool RopeNode::get_use_vertex_thickness(void) const;

481 30 get_vertex_thickness_dimension 0 4 517 40 RopeNode::get_vertex_thickness_dimension 0 1 240 409
////////////////////////////////////////////////////////////////////
//     Function: get_vertex_thickness_dimension
//       Access: Published, Static
//  Description: Returns the numeric extended dimension in which the
//               thickness component should be found.  See
//               NurbsCurveEvaluator::set_extended_vertex().
////////////////////////////////////////////////////////////////////
65
static inline int RopeNode::get_vertex_thickness_dimension(void);

482 13 set_thickness 0 4 517 23 RopeNode::set_thickness 0 1 241 497
////////////////////////////////////////////////////////////////////
//     Function: set_thickness
//       Access: Published
//  Description: Specifies the thickness of the rope, in pixels or in
//               spatial units, depending on the render mode.  See
//               set_render_mode().
//
//               The thickness may also be specified on a per-vertex
//               basis.  See set_use_vertex_thickness().
////////////////////////////////////////////////////////////////////
59
inline void RopeNode::set_thickness(PN_stdfloat thickness);

483 13 get_thickness 0 4 517 23 RopeNode::get_thickness 0 1 242 286
////////////////////////////////////////////////////////////////////
//     Function: get_thickness
//       Access: Published
//  Description: Returns the thickness of the rope.  See
//               set_thickness().
////////////////////////////////////////////////////////////////////
55
inline PN_stdfloat RopeNode::get_thickness(void) const;

484 10 set_matrix 0 4 517 20 RopeNode::set_matrix 0 1 243 451
////////////////////////////////////////////////////////////////////
//     Function: set_matrix
//       Access: Published
//  Description: Specifies an optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
////////////////////////////////////////////////////////////////////
57
inline void RopeNode::set_matrix(LMatrix4 const &matrix);

485 12 clear_matrix 0 4 517 22 RopeNode::clear_matrix 0 1 244 285
////////////////////////////////////////////////////////////////////
//     Function: clear_matrix
//       Access: Published
//  Description: Resets the node's matrix to identity.  See
//               set_matrix().
////////////////////////////////////////////////////////////////////
41
inline void RopeNode::clear_matrix(void);

486 10 has_matrix 0 4 517 20 RopeNode::has_matrix 0 1 245 305
////////////////////////////////////////////////////////////////////
//     Function: has_matrix
//       Access: Published
//  Description: Returns true if the node has a matrix set, false
//               otherwise.  See set_matrix().
////////////////////////////////////////////////////////////////////
45
inline bool RopeNode::has_matrix(void) const;

487 10 get_matrix 0 4 517 20 RopeNode::get_matrix 0 1 246 450
////////////////////////////////////////////////////////////////////
//     Function: get_matrix
//       Access: Published
//  Description: Returns the optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
////////////////////////////////////////////////////////////////////
56
inline LMatrix4 const &RopeNode::get_matrix(void) const;

488 11 reset_bound 0 4 517 21 RopeNode::reset_bound 0 1 247 461
////////////////////////////////////////////////////////////////////
//     Function: RopeNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the curve has changed
//               properties outside of this node's knowledge.
////////////////////////////////////////////////////////////////////
51
void RopeNode::reset_bound(NodePath const &rel_to);

489 14 get_class_type 0 4 517 24 RopeNode::get_class_type 0 1 248 0
49
static TypeHandle RopeNode::get_class_type(void);

490 9 ~RopeNode 0 4 517 19 RopeNode::~RopeNode 0 0 0
26
RopeNode::~RopeNode(void);

491 9 SheetNode 0 4 521 20 SheetNode::SheetNode 0 1 249 446
////////////////////////////////////////////////////////////////////
//     Function: SheetNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SheetNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
41
SheetNode::SheetNode(string const &name);

492 11 set_surface 0 4 521 22 SheetNode::set_surface 0 1 250 282
////////////////////////////////////////////////////////////////////
//     Function: set_surface
//       Access: Public
//  Description: Sets the particular surface represented by the
//               SheetNode.
////////////////////////////////////////////////////////////////////
67
inline void SheetNode::set_surface(NurbsSurfaceEvaluator *surface);

493 11 get_surface 0 4 521 22 SheetNode::get_surface 0 1 251 257
////////////////////////////////////////////////////////////////////
//     Function: get_surface
//       Access: Public
//  Description: Returns the surface represented by the SheetNode.
////////////////////////////////////////////////////////////////////
65
inline NurbsSurfaceEvaluator *SheetNode::get_surface(void) const;

494 20 set_use_vertex_color 0 4 521 31 SheetNode::set_use_vertex_color 0 1 252 551
////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Public
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions 0, 1, 2, 3, respectively, of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
////////////////////////////////////////////////////////////////////
55
inline void SheetNode::set_use_vertex_color(bool flag);

495 20 get_use_vertex_color 0 4 521 31 SheetNode::get_use_vertex_color 0 1 253 299
////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Public
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
////////////////////////////////////////////////////////////////////
56
inline bool SheetNode::get_use_vertex_color(void) const;

496 16 set_num_u_subdiv 0 4 521 27 SheetNode::set_num_u_subdiv 0 1 254 425
////////////////////////////////////////////////////////////////////
//     Function: set_num_u_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the U
//               direction.
////////////////////////////////////////////////////////////////////
58
inline void SheetNode::set_num_u_subdiv(int num_u_subdiv);

497 16 get_num_u_subdiv 0 4 521 27 SheetNode::get_num_u_subdiv 0 1 255 335
////////////////////////////////////////////////////////////////////
//     Function: get_num_u_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the U direction.  See set_num_u_subdiv().
////////////////////////////////////////////////////////////////////
51
inline int SheetNode::get_num_u_subdiv(void) const;

498 16 set_num_v_subdiv 0 4 521 27 SheetNode::set_num_v_subdiv 0 1 256 425
////////////////////////////////////////////////////////////////////
//     Function: set_num_v_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the V
//               direction.
////////////////////////////////////////////////////////////////////
58
inline void SheetNode::set_num_v_subdiv(int num_v_subdiv);

499 16 get_num_v_subdiv 0 4 521 27 SheetNode::get_num_v_subdiv 0 1 257 335
////////////////////////////////////////////////////////////////////
//     Function: get_num_v_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the V direction.  See set_num_v_subdiv().
////////////////////////////////////////////////////////////////////
51
inline int SheetNode::get_num_v_subdiv(void) const;

500 11 reset_bound 0 4 521 22 SheetNode::reset_bound 0 1 258 464
////////////////////////////////////////////////////////////////////
//     Function: SheetNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the surface has changed
//               properties outside of this node's knowledge.
////////////////////////////////////////////////////////////////////
52
void SheetNode::reset_bound(NodePath const &rel_to);

501 14 get_class_type 0 4 521 25 SheetNode::get_class_type 0 1 259 0
50
static TypeHandle SheetNode::get_class_type(void);

502 10 ~SheetNode 0 4 521 21 SheetNode::~SheetNode 0 0 0
28
SheetNode::~SheetNode(void);

259
1 0 0 6 3 525 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::is_valid
//       Access: Published, Virtual
//  Description: Returns true if the curve is defined.  This base
//               class function always returns true; derived classes
//               might override this to sometimes return false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
2 0 0 6 4 526 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_max_t
//       Access: Published, Virtual
//  Description: Returns the upper bound of t for the entire curve.
//               The curve is defined in the range 0.0f <= t <=
//               get_max_t().  This base class function always returns
//               1.0f; derived classes might override this to return
//               something else.
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
3 0 0 4 5 529 0 0 731 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_curve_type
//       Access: Published
//  Description: Sets the flag indicating the use to which the curve
//               is intended to be put.  This flag is optional and
//               only serves to provide a hint to the egg reader and
//               writer code; it has no effect on the curve's
//               behavior.
//
//               Setting the curve type also sets the num_dimensions
//               to 3 or 1 according to the type.
//
//               THis flag may have one of the values PCT_XYZ,
//               PCT_HPR, or PCT_T.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  4 type 1 522  
4 0 0 6 6 522 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_curve_type
//       Access: Published
//  Description: Returns the flag indicating the use to which the curve
//               is intended to be put.
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
5 0 0 4 7 529 0 0 622 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::set_num_dimensions
//       Access: Published
//  Description: Specifies the number of significant dimensions in the
//               curve's vertices.  This should be one of 1, 2, or 3.
//               Normally, XYZ and HPR curves have three dimensions;
//               time curves should always have one dimension.  This
//               only serves as a hint to the mopath editor, and also
//               controls how the curve is written out.
//////////////////////////////////////////////////////////////////// 2 4 this 3 528  3 num 1 522  
6 0 0 6 8 522 0 0 550 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::get_num_dimensions
//       Access: Published
//  Description: Returns the number of significant dimensions in the
//               curve's vertices, as set by a previous call to
//               set_num_dimensions().  This is only a hint as to how
//               the curve is intended to be used; the actual number
//               of dimensions of any curve is always three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
7 0 0 6 9 526 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the entire curve to within
//               a few decimal places.
//////////////////////////////////////////////////////////////////// 1 4 this 3 523  
8 0 0 6 9 526 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::calc_length
//       Access: Published
//  Description: Approximates the length of the curve segment from
//               parametric time 'from' to time 'to'.
//////////////////////////////////////////////////////////////////// 3 4 this 3 523  4 from 1 526  2 to 1 526  
9 0 0 6 10 526 0 0 717 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::find_length
//       Access: Published
//  Description: Returns the parametric value corresponding to the
//               indicated distance along the curve from the starting
//               parametric value.
//
//               This is the inverse of calc_length(): rather than
//               determining the length along the curve between two
//               parametric points, it determines the position in
//               parametric time of a point n units along the curve.
//
//               The search distance must not be negative.
//////////////////////////////////////////////////////////////////// 3 4 this 3 523  7 start_t 1 526  13 length_offset 1 526  
10 0 0 6 11 525 0 0 0 3 4 this 3 523  1 t 1 526  5 point 1 530  
11 0 0 6 12 525 0 0 0 3 4 this 3 523  1 t 1 526  7 tangent 1 530  
12 0 0 6 13 525 0 0 0 4 4 this 3 523  1 t 1 526  5 point 1 530  7 tangent 1 530  
13 0 0 6 14 525 0 0 0 3 4 this 3 523  1 t 1 526  8 tangent2 1 530  
14 0 0 6 15 525 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_point
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) at time t, but keeps the same
//               tangent value at that point.
//////////////////////////////////////////////////////////////////// 5 4 this 3 528  1 t 1 526  2 px 1 526  2 py 1 526  2 pz 1 526  
15 0 0 6 16 525 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_tangent
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it has the tangent
//               (tx, ty, tz) at time t, but keeps the same position
//               at the point.
//////////////////////////////////////////////////////////////////// 5 4 this 3 528  1 t 1 526  2 tx 1 526  2 ty 1 526  2 tz 1 526  
16 0 0 6 17 525 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::adjust_pt
//       Access: Published, Virtual
//  Description: Recomputes the curve such that it passes through the
//               point (px, py, pz) with the tangent (tx, ty, tz).
//////////////////////////////////////////////////////////////////// 8 4 this 3 528  1 t 1 526  2 px 1 526  2 py 1 526  2 pz 1 526  2 tx 1 526  2 ty 1 526  2 tz 1 526  
17 0 0 6 18 525 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::recompute
//       Access: Published, Virtual
//  Description: Recalculates the curve, if necessary.  Returns
//               true if the resulting curve is valid, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 528  
18 0 0 6 19 525 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::stitch
//       Access: Published, Virtual
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.
//
//               Returns true if successful, false on failure or if
//               the curve type does not support stitching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  1 a 1 523  1 b 1 523  
19 0 0 6 20 525 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output file.  Returns true if the file is
//               successfully written.
//////////////////////////////////////////////////////////////////// 3 4 this 3 528  8 filename 1 533  2 cs 1 535  
20 0 0 6 20 525 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurve::write_egg
//       Access: Published
//  Description: Writes an egg description of the nurbs curve to the
//               specified output stream.  Returns true if the file is
//               successfully written.
//////////////////////////////////////////////////////////////////// 4 4 this 3 528  3 out 1 536  8 filename 1 538  2 cs 1 535  
21 0 0 7 21 541 0 0 0 0 
22 0 0 7 23 541 0 0 0 0 
23 0 0 7 26 542 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
24 0 0 4 27 529 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  5 curve 1 528  
25 0 0 4 27 529 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curve
//       Access: Published
//  Description: Adds a new ParametricCurve to the collection at the
//               indicated index.
//////////////////////////////////////////////////////////////////// 3 4 this 3 542  5 curve 1 528  5 index 1 522  
26 0 0 6 28 522 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::add_curves
//       Access: Published
//  Description: Adds all the curves found in the scene graph rooted
//               at the given node.  Returns the number of curves
//               found.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  4 node 1 543  
27 0 0 6 29 525 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection.  Returns true if the curve was removed,
//               false if it was not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  5 curve 1 528  
28 0 0 4 29 529 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::remove_curve
//       Access: Published
//  Description: Removes the indicated ParametricCurve from the
//               collection, by its index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  5 index 1 522  
29 0 0 6 30 525 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::has_curve
//       Access: Published
//  Description: Returns true if the indicated ParametricCurve appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  5 curve 1 528  
30 0 0 4 31 529 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear
//       Access: Published
//  Description: Removes all ParametricCurves from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
31 0 0 4 32 529 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::clear_timewarps
//       Access: Published
//  Description: Removes all the timewarp curves from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
32 0 0 6 33 522 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_curves
//       Access: Published
//  Description: Returns the number of ParametricCurves in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
33 0 0 7 34 528 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_curve
//       Access: Published
//  Description: Returns the nth ParametricCurve in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  5 index 1 522  
34 0 0 7 35 528 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_xyz_curve
//       Access: Published
//  Description: Returns the first XYZ curve in the collection, if
//               any, or NULL if there are none.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
35 0 0 7 36 528 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_hpr_curve
//       Access: Published
//  Description: Returns the first HPR curve in the collection, if
//               any, or NULL if there are none.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
36 0 0 7 37 528 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_default_curve
//       Access: Published
//  Description: If there is an XYZ curve in the collection, returns
//               it; otherwise, returns the first curve whose type is
//               unspecified.  Returns NULL if no curve meets the
//               criteria.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
37 0 0 6 38 522 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_num_timewarps
//       Access: Published
//  Description: Returns the number of timewarp curves in the
//               collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
38 0 0 7 39 528 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_timewarp_curve
//       Access: Published
//  Description: Returns the nth timewarp curve in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  1 n 1 522  
39 0 0 6 40 526 0 0 423 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::get_max_t
//       Access: Published
//  Description: Returns the maximum T value associated with the
//               *last* curve in the collection.  Normally, this will
//               be either the XYZ or HPR curve, or a timewarp curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 544  
40 0 0 4 41 529 0 0 913 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::make_even
//       Access: Published
//  Description: Discards all existing timewarp curves and recomputes
//               a new timewarp curve that maps distance along the
//               curve to parametric time, so that the distance
//               between any two points in parametric time is
//               proportional to the approximate distance of those
//               same two points along the XYZ curve.
//
//               segments_per_unit represents the number of segments to
//               take per each unit of parametric time of the original
//               XYZ curve.
//
//               The new timewarp curve (and thus, the apparent range
//               of the collection) will range from 0 to max_t.
//////////////////////////////////////////////////////////////////// 3 4 this 3 542  5 max_t 1 526  17 segments_per_unit 1 526  
41 0 0 4 42 529 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::face_forward
//       Access: Published
//  Description: Discards the existing HPR curve and generates a new
//               one that looks in the direction of travel along the
//               XYZ curve, based on the XYZ curve's tangent at each
//               point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  17 segments_per_unit 1 526  
42 0 0 4 43 529 0 0 563 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::reset_max_t
//       Access: Published
//  Description: Adjusts the apparent length of the curve by applying
//               a new timewarp that maps the range [0..max_t] to the
//               range [0..get_max_t()].  After this call, the curve
//               collection will contain one more timewarp curve, and
//               get_max_t() will return the given max_t value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  5 max_t 1 526  
43 0 0 6 44 525 0 0 880 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the transform matrix representing
//               translation to the position indicated by the first
//               XYZ curve in the collection and the rotation
//               indicated by the first HPR curve in the collection,
//               after t has been modified by all the timewarp curves
//               in the collection applied in sequence, from back to
//               front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 544  1 t 1 526  6 result 1 546  2 cs 1 535  
44 0 0 6 44 525 0 0 774 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate
//       Access: Published
//  Description: Computes the position and rotation represented by the
//               first XYZ and HPR curves in the collection at the
//               given point t, after t has been modified by all the
//               timewarp curves in the collection applied in
//               sequence, from back to front.
//
//               Returns true if the point is valid (i.e. t is within
//               the bounds indicated by all the timewarp curves and
//               within the bounds of the curves themselves), or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 544  1 t 1 526  3 xyz 1 530  3 hpr 1 530  
45 0 0 6 45 526 0 0 490 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_t
//       Access: Published
//  Description: Determines the value of t that should be passed to
//               the XYZ and HPR curves, after applying the given
//               value of t to all the timewarps.  Return -1.0f if the
//               value of t exceeds one of the timewarps' ranges.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  1 t 1 526  
46 0 0 6 46 525 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_xyz
//       Access: Published
//  Description: Computes only the XYZ part of the curves.  See
//               evaluate().
//////////////////////////////////////////////////////////////////// 3 4 this 3 544  1 t 1 526  3 xyz 1 530  
47 0 0 6 47 525 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::evaluate_hpr
//       Access: Published
//  Description: Computes only the HPR part of the curves.  See
//               evaluate().
//////////////////////////////////////////////////////////////////// 3 4 this 3 544  1 t 1 526  3 hpr 1 530  
48 0 0 6 48 525 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
//////////////////////////////////////////////////////////////////// 3 4 this 3 542  1 t 1 526  3 xyz 1 549  
49 0 0 6 48 525 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_xyz
//       Access: Published
//  Description: Adjust the XYZ curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
//////////////////////////////////////////////////////////////////// 5 4 this 3 542  1 t 1 526  1 x 1 526  1 y 1 526  1 z 1 526  
50 0 0 6 49 525 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
//////////////////////////////////////////////////////////////////// 3 4 this 3 542  1 t 1 526  3 xyz 1 549  
51 0 0 6 49 525 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::adjust_hpr
//       Access: Published
//  Description: Adjust the HPR curve at the indicated time to the new
//               value.  The curve shape will change correspondingly.
//               Returns true if successful, false if unable to make
//               the adjustment for some reason.
//////////////////////////////////////////////////////////////////// 5 4 this 3 542  1 t 1 526  1 h 1 526  1 p 1 526  1 r 1 526  
52 0 0 6 50 525 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::recompute
//       Access: Published
//  Description: Ensures all the curves are freshly computed and
//               up-to-date.  Returns true if everything is valid,
//               false if at least one curve is incorrect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 542  
53 0 0 6 51 525 0 0 541 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::stitch
//       Access: Published
//  Description: Regenerates this curve as one long curve: the first
//               curve connected end-to-end with the second one.
//               Either a or b may be the same as 'this'.  This will
//               lose any timewarps on the input curves.
//
//               Returns true if successful, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 542  1 a 1 544  1 b 1 544  
54 0 0 4 52 529 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               ParametricCurveCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 544  3 out 1 536  
55 0 0 4 53 529 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               ParametricCurveCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 544  3 out 1 536  12 indent_level 1 522  
56 0 0 6 54 525 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output file.  Returns
//               true if the file is successfully written.
//////////////////////////////////////////////////////////////////// 3 4 this 3 542  8 filename 1 533  2 cs 1 535  
57 0 0 6 54 525 0 0 420 ////////////////////////////////////////////////////////////////////
//     Function: ParametricCurveCollection::write_egg
//       Access: Published
//  Description: Writes an egg description of all the nurbs curves in
//               the collection to the specified output stream.  Returns
//               true if the file is successfully written.
//////////////////////////////////////////////////////////////////// 4 4 this 3 542  3 out 1 536  8 filename 1 538  2 cs 1 535  
58 0 0 7 56 551 310 0 220 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
59 0 0 4 58 529 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::reset
//       Access: Public
//  Description: Removes all the data points previously added to the
//               CurveFitter, and initializes it for a new curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 551  
60 0 0 4 59 529 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz
//       Access: Public
//  Description: Adds a single sample xyz.
//////////////////////////////////////////////////////////////////// 3 4 this 3 551  1 t 1 526  3 xyz 1 549  
61 0 0 4 60 529 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_hpr
//       Access: Public
//  Description: Adds a single sample hpr.
//////////////////////////////////////////////////////////////////// 3 4 this 3 551  1 t 1 526  3 hpr 1 549  
62 0 0 4 61 529 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::add_xyz_hpr
//       Access: Public
//  Description: Adds a single sample xyz & hpr simultaneously.
//////////////////////////////////////////////////////////////////// 4 4 this 3 551  1 t 1 526  3 xyz 1 549  3 hpr 1 549  
63 0 0 6 62 522 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_num_samples
//       Access: Public
//  Description: Returns the number of sample points that have been
//               added.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
64 0 0 6 63 526 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_t
//       Access: Public
//  Description: Returns the parametric value of the nth sample added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 552  1 n 1 522  
65 0 0 7 64 530 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_xyz
//       Access: Public
//  Description: Returns the point in space of the nth sample added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 552  1 n 1 522  
66 0 0 7 65 530 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_hpr
//       Access: Public
//  Description: Returns the orientation of the nth sample added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 552  1 n 1 522  
67 0 0 7 66 530 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::get_sample_tangent
//       Access: Public
//  Description: Returns the tangent associated with the nth sample
//               added.  This is only meaningful if compute_tangents()
//               has already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 552  1 n 1 522  
68 0 0 4 67 529 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::remove_samples
//       Access: Public
//  Description: Eliminates all samples from index begin, up to but not
//               including index end, from the database.
//////////////////////////////////////////////////////////////////// 3 4 this 3 551  5 begin 1 522  3 end 1 522  
69 0 0 4 68 529 0 0 473 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sample
//       Access: Public
//  Description: Generates a series of data points by sampling the
//               given curve (or xyz/hpr curves) the indicated number
//               of times.  The sampling is made evenly in parametric
//               time, and then the timewarps, if any, are applied.
//////////////////////////////////////////////////////////////////// 3 4 this 3 551  6 curves 1 542  5 count 1 522  
70 0 0 4 69 529 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::wrap_hpr
//       Access: Public
//  Description: Resets each HPR data point so that the maximum delta
//               between any two consecutive points is 180 degrees,
//               which should prevent incorrect HPR wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 551  
71 0 0 4 70 529 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::sort_points
//       Access: Public
//  Description: Sorts all the data points in order by parametric
//               time, in case they were added in an incorrect order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 551  
72 0 0 4 71 529 0 0 428 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::desample
//       Access: Public
//  Description: Removes sample points in order to reduce the
//               complexity of a sampled curve.  Keeps one out of
//               every factor samples.  Also keeps the first and the
//               last samples.
//////////////////////////////////////////////////////////////////// 2 4 this 3 551  6 factor 1 526  
73 0 0 4 72 529 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::compute_tangents
//       Access: Public
//  Description: Once a set of points has been built, and prior to
//               calling MakeHermite() or MakeNurbs(),
//               ComputeTangents() must be called to set up the
//               tangents correctly (unless the tangents were defined
//               as the points were added).
//////////////////////////////////////////////////////////////////// 2 4 this 3 551  5 scale 1 526  
74 0 0 7 73 542 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_hermite
//       Access: Public
//  Description: Converts the current set of data points into a
//               Hermite curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
75 0 0 7 74 542 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::make_nurbs
//       Access: Public
//  Description: Converts the current set of data points into a
//               NURBS curve.  This gives a smoother curve than
//               produced by MakeHermite().
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
76 0 0 4 75 529 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 552  3 out 1 536  
77 0 0 4 76 529 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: CurveFitter::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 552  3 out 1 536  
78 0 0 7 77 541 0 0 0 0 
79 0 0 7 79 554 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: PiecewiseCurve::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
80 0 0 7 80 541 0 0 0 0 
81 0 0 7 82 555 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
82 0 0 7 82 555 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a Hermite from the indicated (possibly
//               non-hermite) curve.
//////////////////////////////////////////////////////////////////// 1 2 pc 1 523  
83 0 0 6 83 522 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_num_cvs
//       Access: Published
//  Description: Returns the number of CV's in the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 556  
84 0 0 6 84 522 0 0 908 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::insert_cv
//       Access: Published
//  Description: Inserts a new CV at the given parametric point along
//               the curve.  If this parametric point is already on
//               the curve, the CV is assigned an index between its
//               two neighbors and the indices of all following CV's
//               are incremented by 1; its in and out tangents are
//               chosen to keep the curve consistent.  If the new
//               parametric point is beyond the end of the existing
//               curve, the curve is extended to meet it and the new
//               CV's position, in tangent, and out tangent are set to
//               zero.
//
//               The index number of the new CV is returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 555  1 t 1 526  
85 0 0 6 85 522 0 0 0 3 4 this 3 555  4 type 1 522  1 v 1 549  
86 0 0 6 85 522 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::append_cv
//       Access: Published
//  Description: Adds a new CV to the end of the curve.  The new CV is
//               given initial in/out tangents of 0.  The return value
//               is the index of the new CV.
//////////////////////////////////////////////////////////////////// 5 4 this 3 555  4 type 1 522  1 x 1 526  1 y 1 526  1 z 1 526  
87 0 0 6 86 525 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_cv
//       Access: Published
//  Description: Removes the given CV from the curve.  Returns true if
//               the CV existed, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 555  1 n 1 522  
88 0 0 4 87 529 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::remove_all_cvs
//       Access: Published
//  Description: Removes all CV's from the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 555  
89 0 0 6 88 525 0 0 907 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_type
//       Access: Published
//  Description: Changes the given CV's continuity type.  Legal values
//               are HC_CUT, HC_FREE, HC_G1, or HC_SMOOTH.
//
//               Other than HC_CUT, these have no effect on the actual
//               curve; it remains up to user software to impose the
//               constraints these imply.
//
//               HC_CUT implies a disconnection of the curve; HC_FREE
//               imposes no constraints on the tangents; HC_G1
//               forces the tangents to be collinear, and HC_SMOOTH
//               forces the tangents to be identical.  Setting type
//               type to HC_G1 or HC_SMOOTH may adjust the out
//               tangent to match the in tangent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 555  1 n 1 522  4 type 1 522  
90 0 0 6 89 525 0 0 0 3 4 this 3 555  1 n 1 522  1 v 1 549  
91 0 0 6 89 525 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_point
//       Access: Published
//  Description: Changes the given CV's position.
//////////////////////////////////////////////////////////////////// 5 4 this 3 555  1 n 1 522  1 x 1 526  1 y 1 526  1 z 1 526  
92 0 0 6 90 525 0 0 0 3 4 this 3 555  1 n 1 522  1 v 1 549  
93 0 0 6 90 525 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_in
//       Access: Published
//  Description: Changes the given CV's in tangent.  Depending on the
//               continuity type, this may also adjust the out
//               tangent.
//////////////////////////////////////////////////////////////////// 5 4 this 3 555  1 n 1 522  1 x 1 526  1 y 1 526  1 z 1 526  
94 0 0 6 91 525 0 0 0 3 4 this 3 555  1 n 1 522  1 v 1 549  
95 0 0 6 91 525 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_out
//       Access: Published
//  Description: Changes the given CV's out tangent.  Depending on the
//               continuity type, this may also adjust the in
//               tangent.
//////////////////////////////////////////////////////////////////// 5 4 this 3 555  1 n 1 522  1 x 1 526  1 y 1 526  1 z 1 526  
96 0 0 6 92 525 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_tstart
//       Access: Published
//  Description: Changes the given CV's parametric starting time.
//               This may affect the shape of the curve.
//////////////////////////////////////////////////////////////////// 3 4 this 3 555  1 n 1 522  6 tstart 1 526  
97 0 0 6 93 525 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::set_cv_name
//       Access: Published
//  Description: Changes the name associated with a particular CV.
//////////////////////////////////////////////////////////////////// 3 4 this 3 555  1 n 1 522  4 name 1 558  
98 0 0 6 94 522 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_type
//       Access: Published
//  Description: Returns the given CV's continuity type, HC_CUT,
//               HC_FREE, HC_G1, or HC_SMOOTH, or 0 if there is
//               no such CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 556  1 n 1 522  
99 0 0 6 95 549 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_point
//       Access: Published
//  Description: Returns the position of the given CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 556  1 n 1 522  
100 0 0 4 95 529 0 0 0 3 4 this 3 556  1 n 1 522  1 v 1 530  
101 0 0 6 96 549 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_in
//       Access: Published
//  Description: Returns the in tangent of the given CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 556  1 n 1 522  
102 0 0 4 96 529 0 0 0 3 4 this 3 556  1 n 1 522  1 v 1 530  
103 0 0 6 97 549 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_out
//       Access: Published
//  Description: Returns the out tangent of the given CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 556  1 n 1 522  
104 0 0 4 97 529 0 0 0 3 4 this 3 556  1 n 1 522  1 v 1 530  
105 0 0 6 98 526 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_tstart
//       Access: Published
//  Description: Returns the starting point in parametric space of the
//               given CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 556  1 n 1 522  
106 0 0 6 99 558 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::get_cv_name
//       Access: Published
//  Description: Returns the name of the given CV, or NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 556  1 n 1 522  
107 0 0 4 100 529 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: HermiteCurve::write_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 556  3 out 1 536  1 n 1 522  
108 0 0 7 101 541 0 0 0 0 
109 0 0 4 104 529 0 0 0 2 4 this 3 559  5 order 1 522  
110 0 0 6 105 522 0 0 0 1 4 this 3 560  
111 0 0 6 106 522 0 0 0 1 4 this 3 560  
112 0 0 6 107 522 0 0 0 1 4 this 3 560  
113 0 0 6 108 525 0 0 0 2 4 this 3 559  1 t 1 526  
114 0 0 6 109 522 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 559  1 v 1 549  
115 0 0 6 109 522 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 559  1 v 1 562  
116 0 0 6 109 522 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::append_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 559  1 x 1 526  1 y 1 526  1 z 1 526  
117 0 0 6 110 525 0 0 0 2 4 this 3 559  1 n 1 522  
118 0 0 4 111 529 0 0 0 1 4 this 3 559  
119 0 0 6 112 525 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 559  1 n 1 522  1 v 1 549  
120 0 0 6 112 525 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_point
//       Access: Public, Scheme
//  Description: Repositions the indicated CV.  Returns true if
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 5 4 this 3 559  1 n 1 522  1 x 1 526  1 y 1 526  1 z 1 526  
121 0 0 7 113 530 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_point
//       Access: Public, Scheme
//  Description: Returns the position of the indicated CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 560  1 n 1 522  
122 0 0 6 114 525 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::set_cv_weight
//       Access: Published
//  Description: Sets the weight of the indicated CV without affecting
//               its position in 3-d space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 559  1 n 1 522  1 w 1 526  
123 0 0 6 115 526 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::get_cv_weight
//       Access: Published
//  Description: Returns the weight of the indicated CV.
//////////////////////////////////////////////////////////////////// 2 4 this 3 560  1 n 1 522  
124 0 0 6 116 525 0 0 0 3 4 this 3 559  1 n 1 522  1 v 1 562  
125 0 0 7 117 566 0 0 0 2 4 this 3 560  1 n 1 522  
126 0 0 6 118 525 0 0 0 3 4 this 3 559  1 n 1 522  1 t 1 526  
127 0 0 6 119 526 0 0 0 2 4 this 3 560  1 n 1 522  
128 0 0 4 120 529 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveInterface::write_cv
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 560  3 out 1 536  1 n 1 522  
129 0 0 7 121 541 0 0 0 0 
130 0 0 7 127 567 377 0 222 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
131 0 0 7 127 567 377 0 325 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurve::Copy Constructor
//       Access: Published
//  Description: Constructs a NURBS curve equivalent to the indicated
//               (possibly non-NURBS) curve.
//////////////////////////////////////////////////////////////////// 1 2 pc 1 523  
132 0 0 7 129 541 0 0 0 0 
133 0 0 7 123 554 0 0 0 1 4 this 3 567  
134 0 0 7 124 567 377 0 0 1 4 this 3 554  
135 0 0 6 125 559 0 0 0 1 4 this 3 567  
136 0 0 7 126 567 377 0 0 1 4 this 3 559  
137 0 0 6 131 526 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_start_t
//       Access: Published
//  Description: Returns the first legal value of t on the curve.
//               Usually this is 0.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 568  
138 0 0 6 132 526 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_end_t
//       Access: Published
//  Description: Returns the last legal value of t on the curve.
//////////////////////////////////////////////////////////////////// 1 4 this 3 568  
139 0 0 6 133 525 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_point
//       Access: Published
//  Description: Computes the point on the curve corresponding to the
//               indicated value in parametric time.  Returns true if
//               the t value is valid, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 570  1 t 1 526  5 point 1 530  
140 0 0 6 134 525 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_tangent
//       Access: Published
//  Description: Computes the tangent to the curve at the indicated
//               point in parametric time.  This tangent vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
//////////////////////////////////////////////////////////////////// 3 4 this 3 570  1 t 1 526  7 tangent 1 530  
141 0 0 6 135 526 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
//////////////////////////////////////////////////////////////////// 3 4 this 3 570  1 t 1 526  1 d 1 522  
142 0 0 6 137 522 0 0 438 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_num_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               within the curve.  This number is usually not
//               important unless you plan to call
//               eval_segment_point().
//////////////////////////////////////////////////////////////////// 1 4 this 3 568  
143 0 0 4 138 529 0 0 1042 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the curve corresponding to the
//               indicated value in parametric time within the
//               indicated curve segment.  t should be in the range
//               [0, 1].
//
//               The curve is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular curve depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous curve, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
//////////////////////////////////////////////////////////////////// 4 4 this 3 568  7 segment 1 522  1 t 1 526  5 point 1 530  
144 0 0 4 139 529 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_tangent
//       Access: Published
//  Description: As eval_segment_point, but computes the tangent to
//               the curve at the indicated point.  The tangent vector
//               will not necessarily be normalized, and could be
//               zero, particularly at the endpoints.
//////////////////////////////////////////////////////////////////// 4 4 this 3 568  7 segment 1 522  1 t 1 526  7 tangent 1 530  
145 0 0 6 140 526 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the curve in n-dimensional space according
//               to the extended vertices associated with the curve in
//               the indicated dimension.
//////////////////////////////////////////////////////////////////// 4 4 this 3 568  7 segment 1 522  1 t 1 526  1 d 1 522  
146 0 0 6 142 526 0 0 482 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_segment_t
//       Access: Published
//  Description: Accepts a t value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               t value in the entire curve (as in eval_point()).
//////////////////////////////////////////////////////////////////// 3 4 this 3 568  7 segment 1 522  1 t 1 526  
147 0 0 4 143 529 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::adaptive_sample
//       Access: Published
//  Description: Determines the set of subdivisions necessary to
//               approximate the curve with a set of linear segments,
//               no point of which is farther than tolerance units
//               from the actual curve.
//
//               After this call, you may walk through the resulting
//               set of samples with get_num_samples(),
//               get_sample_t(), and get_sample_point().
//////////////////////////////////////////////////////////////////// 2 4 this 3 570  9 tolerance 1 526  
148 0 0 6 144 522 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_num_samples
//       Access: Published
//  Description: Returns the number of sample points generated by the
//               previous call to adaptive_sample().
//////////////////////////////////////////////////////////////////// 1 4 this 3 568  
149 0 0 6 145 526 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_sample_t
//       Access: Published
//  Description: Returns the t value of the nth sample point generated
//               by the previous call to adaptive_sample().
//////////////////////////////////////////////////////////////////// 2 4 this 3 568  1 n 1 522  
150 0 0 6 146 571 0 0 551 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveResult::get_sample_point
//       Access: Published
//  Description: Returns the point on the curve of the nth sample
//               point generated by the previous call to
//               adaptive_sample().
//
//               For tangents, or extended points, you should use
//               get_sample_t() and pass it into eval_tangent() or
//               eval_extended_point().
//////////////////////////////////////////////////////////////////// 2 4 this 3 568  1 n 1 522  
151 0 0 7 148 575 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
152 0 0 4 149 529 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_order
//       Access: Published
//  Description: Sets the order of the curve.  This resets the knot
//               vector to the default knot vector for the number of
//               vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 575  5 order 1 522  
153 0 0 6 150 522 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_order
//       Access: Published
//  Description: Returns the order of the curve as set by a previous
//               call to set_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
154 0 0 4 151 529 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the curve up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
//////////////////////////////////////////////////////////////////// 2 4 this 3 575  12 num_vertices 1 522  
155 0 0 6 152 522 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the curve.
//               This is the number passed to the last call to
//               reset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
156 0 0 4 153 529 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
//////////////////////////////////////////////////////////////////// 4 4 this 3 575  1 i 1 522  6 vertex 1 549  6 weight 1 526  
157 0 0 4 153 529 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the curve, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 575  1 i 1 522  6 vertex 1 562  
158 0 0 6 154 562 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to its indicated coordinate space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  1 i 1 522  
159 0 0 7 154 566 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the curve, relative
//               to the given coordinate space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 576  1 i 1 522  6 rel_to 1 578  
160 0 0 4 155 529 0 0 758 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the curve.
//////////////////////////////////////////////////////////////////// 3 4 this 3 575  1 i 1 522  5 space 1 578  
161 0 0 4 155 529 0 0 676 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the curve is evaluated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 575  1 i 1 522  5 space 1 558  
162 0 0 7 156 581 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the curve, expressed as a NodePath.
//////////////////////////////////////////////////////////////////// 3 4 this 3 576  1 i 1 522  6 rel_to 1 578  
163 0 0 4 157 529 0 0 1219 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or curve in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
//////////////////////////////////////////////////////////////////// 4 4 this 3 575  1 i 1 522  1 d 1 522  5 value 1 526  
164 0 0 6 158 526 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 576  1 i 1 522  1 d 1 522  
165 0 0 6 160 522 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_knots
//       Access: Published
//  Description: Returns the number of knot values in the curve.  This
//               is based on the number of vertices and the order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
166 0 0 4 161 529 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::set_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
//////////////////////////////////////////////////////////////////// 3 4 this 3 575  1 i 1 522  4 knot 1 526  
167 0 0 6 162 526 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  1 i 1 522  
168 0 0 4 163 529 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::normalize_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the curve is 0 .. 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 575  
169 0 0 6 164 522 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::get_num_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the curve.  This is based on the knot vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
170 0 0 7 165 570 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  6 rel_to 1 578  
171 0 0 7 165 570 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsCurveResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space, and then further
//               transformed by the indicated matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 576  6 rel_to 1 578  3 mat 1 582  
172 0 0 4 166 529 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: NurbsCurveEvaluator::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  3 out 1 536  
173 0 0 6 168 526 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_u
//       Access: Public
//  Description: Returns the first legal value of u on the surface.
//               Usually this is 0.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 584  
174 0 0 6 169 526 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_u
//       Access: Public
//  Description: Returns the last legal value of u on the surface.
//////////////////////////////////////////////////////////////////// 1 4 this 3 584  
175 0 0 6 170 526 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_start_v
//       Access: Public
//  Description: Returns the first legal value of v on the surface.
//               Usually this is 0.0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 584  
176 0 0 6 171 526 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_end_v
//       Access: Public
//  Description: Returns the last legal value of v on the surface.
//////////////////////////////////////////////////////////////////// 1 4 this 3 584  
177 0 0 6 172 525 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_point
//       Access: Published
//  Description: Computes the point on the surface corresponding to the
//               indicated value in parametric time.  Returns true if
//               the u, v values are valid, false otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 586  1 u 1 526  1 v 1 526  5 point 1 530  
178 0 0 6 173 525 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_normal
//       Access: Published
//  Description: Computes the normal to the surface at the indicated
//               point in parametric time.  This normal vector will
//               not necessarily be normalized, and could be zero.
//               See also eval_point().
//////////////////////////////////////////////////////////////////// 4 4 this 3 586  1 u 1 526  1 v 1 526  6 normal 1 530  
179 0 0 6 174 526 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
//////////////////////////////////////////////////////////////////// 4 4 this 3 586  1 u 1 526  1 v 1 526  1 d 1 522  
180 0 0 6 176 522 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_u_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the U direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
//////////////////////////////////////////////////////////////////// 1 4 this 3 584  
181 0 0 6 177 522 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_num_v_segments
//       Access: Public
//  Description: Returns the number of piecewise continuous segments
//               within the surface in the V direction.  This number
//               is usually not important unless you plan to call
//               eval_segment_point().
//////////////////////////////////////////////////////////////////// 1 4 this 3 584  
182 0 0 4 178 529 0 0 1060 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_point
//       Access: Published
//  Description: Evaluates the point on the surface corresponding to the
//               indicated value in parametric time within the
//               indicated surface segment.  u and v should be in the
//               range [0, 1].
//
//               The surface is internally represented as a number of
//               connected (or possibly unconnected) piecewise
//               continuous segments.  The exact number of segments
//               for a particular surface depends on the knot vector,
//               and is returned by get_num_segments().  Normally,
//               eval_point() is used to evaluate a point along the
//               continuous surface, but when you care more about local
//               continuity, you can use eval_segment_point() to
//               evaluate the points along each segment.
//////////////////////////////////////////////////////////////////// 6 4 this 3 584  2 ui 1 522  2 vi 1 522  1 u 1 526  1 v 1 526  5 point 1 530  
183 0 0 4 179 529 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_normal
//       Access: Published
//  Description: As eval_segment_point, but computes the normal to
//               the surface at the indicated point.  The normal vector
//               will not necessarily be normalized, and could be
//               zero.
//////////////////////////////////////////////////////////////////// 6 4 this 3 584  2 ui 1 522  2 vi 1 522  1 u 1 526  1 v 1 526  6 normal 1 530  
184 0 0 6 180 526 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::eval_segment_extended_point
//       Access: Published
//  Description: Evaluates the surface in n-dimensional space according
//               to the extended vertices associated with the surface in
//               the indicated dimension.
//////////////////////////////////////////////////////////////////// 6 4 this 3 584  2 ui 1 522  2 vi 1 522  1 u 1 526  1 v 1 526  1 d 1 522  
185 0 0 6 182 526 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_u
//       Access: Public
//  Description: Accepts a u value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               u value in the entire surface (as in eval_point()).
//////////////////////////////////////////////////////////////////// 3 4 this 3 584  2 ui 1 522  1 u 1 526  
186 0 0 6 183 526 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceResult::get_segment_v
//       Access: Public
//  Description: Accepts a v value in the range [0, 1], and assumed to
//               be relative to the indicated segment (as in
//               eval_segment_point()), and returns the corresponding
//               v value in the entire surface (as in eval_point()).
//////////////////////////////////////////////////////////////////// 3 4 this 3 584  2 vi 1 522  1 v 1 526  
187 0 0 7 185 587 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
188 0 0 4 186 529 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_order
//       Access: Published
//  Description: Sets the order of the surface in the U direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 u_order 1 522  
189 0 0 6 187 522 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_order
//       Access: Published
//  Description: Returns the order of the surface in the U direction
//               as set by a previous call to set_u_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
190 0 0 4 188 529 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_order
//       Access: Published
//  Description: Sets the order of the surface in the V direction.
//               This resets the knot vector to the default knot
//               vector for the number of vertices.
//
//               The order must be 1, 2, 3, or 4, and the value is one
//               more than the degree of the surface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  7 v_order 1 522  
191 0 0 6 189 522 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_order
//       Access: Published
//  Description: Returns the order of the surface in the V direction
//               as set by a previous call to set_v_order().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
192 0 0 4 190 529 0 0 512 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::reset
//       Access: Published
//  Description: Resets all the vertices and knots to their default
//               values, and sets the surface up with the indicated
//               number of vertices.  You must then call set_vertex()
//               repeatedly to fill in all of the vertex values
//               appropriately.
//////////////////////////////////////////////////////////////////// 3 4 this 3 587  14 num_u_vertices 1 522  14 num_v_vertices 1 522  
193 0 0 6 191 522 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the U
//               direction on the surface.  This is the number passed
//               to the last call to reset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
194 0 0 6 192 522 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_vertices
//       Access: Published
//  Description: Returns the number of control vertices in the V
//               direction on the surface.  This is the number passed
//               to the last call to reset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
195 0 0 4 193 529 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface.  This
//               flavor sets the vertex as a 3-d coordinate and a
//               weight; the 3-d coordinate values are implicitly
//               scaled up by the weight factor.
//////////////////////////////////////////////////////////////////// 5 4 this 3 587  2 ui 1 522  2 vi 1 522  6 vertex 1 549  6 weight 1 526  
196 0 0 4 193 529 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex
//       Access: Published
//  Description: Sets the nth control vertex of the surface, as a vertex
//               in 4-d homogeneous space.  In this form, the first
//               three components of the vertex should already have
//               been scaled by the fourth component, which is the
//               homogeneous weight.
//////////////////////////////////////////////////////////////////// 4 4 this 3 587  2 ui 1 522  2 vi 1 522  6 vertex 1 562  
197 0 0 6 194 562 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to its indicated coordinate space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 588  2 ui 1 522  2 vi 1 522  
198 0 0 7 194 566 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex
//       Access: Published
//  Description: Returns the nth control vertex of the surface, relative
//               to the given coordinate space.
//////////////////////////////////////////////////////////////////// 4 4 this 3 588  2 ui 1 522  2 vi 1 522  6 rel_to 1 578  
199 0 0 4 195 529 0 0 762 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               NodePath, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a fixed NodePath, which
//               is always the same NodePath.  Also see setting the
//               space as a path string, which can specify a different
//               NodePath for different instances of the surface.
//////////////////////////////////////////////////////////////////// 4 4 this 3 587  2 ui 1 522  2 vi 1 522  5 space 1 578  
200 0 0 4 195 529 0 0 680 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_vertex_space
//       Access: Published
//  Description: Sets the coordinate space of the nth control vertex.
//               If this is not specified, or is set to an empty
//               string, the nth control vertex is deemed to be in
//               the coordinate space passed to evaluate().
//
//               This specifies the space as a string, which describes
//               the path to find the node relative to the rel_to
//               NodePath when the surface is evaluated.
//////////////////////////////////////////////////////////////////// 4 4 this 3 587  2 ui 1 522  2 vi 1 522  5 space 1 558  
201 0 0 7 196 581 0 0 351 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_vertex_space
//       Access: Published
//  Description: Returns the coordinate space of the nth control
//               vertex of the surface, expressed as a NodePath.
//////////////////////////////////////////////////////////////////// 4 4 this 3 588  2 ui 1 522  2 vi 1 522  6 rel_to 1 578  
202 0 0 4 197 529 0 0 1223 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_extended_vertex
//       Access: Public
//  Description: Sets an n-dimensional vertex value.  This allows
//               definition of a NURBS surface or surface in a sparse
//               n-dimensional space, typically used for associating
//               additional properties (like color or joint
//               membership) with each vertex of a surface.
//
//               The value d is an arbitrary integer value and
//               specifies the dimension of question for this
//               particular vertex.  Any number of dimensions may be
//               specified, and they need not be consecutive.  If a
//               value for a given dimension is not specified, is it
//               implicitly 0.0.
//
//               The value is implicitly scaled by the homogenous
//               weight value--that is, the fourth component of the
//               value passed to set_vertex().  This means the
//               ordinary vertex must be set first, before the
//               extended vertices can be set.
//////////////////////////////////////////////////////////////////// 5 4 this 3 587  2 ui 1 522  2 vi 1 522  1 d 1 522  5 value 1 526  
203 0 0 6 198 526 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_extended_vertex
//       Access: Public
//  Description: Returns an n-dimensional vertex value.  See
//               set_extended_vertex().  This returns the value set
//               for the indicated dimension, or 0.0 if nothing has
//               been set.
//////////////////////////////////////////////////////////////////// 4 4 this 3 588  2 ui 1 522  2 vi 1 522  1 d 1 522  
204 0 0 6 200 522 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the U direction.  This is based on the number of
//               vertices and the order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
205 0 0 4 201 529 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_u_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
//////////////////////////////////////////////////////////////////// 3 4 this 3 587  1 i 1 522  4 knot 1 526  
206 0 0 6 202 526 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_u_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  1 i 1 522  
207 0 0 4 203 529 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_u_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
208 0 0 6 204 522 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_knots
//       Access: Published
//  Description: Returns the number of knot values in the surface in
//               the V direction.  This is based on the number of
//               vertices and the order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
209 0 0 4 205 529 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::set_v_knot
//       Access: Published
//  Description: Sets the value of the nth knot.  Each knot value
//               should be greater than or equal to the preceding
//               value.  If no knot values are set, a default knot
//               vector is supplied.
//////////////////////////////////////////////////////////////////// 3 4 this 3 587  1 i 1 522  4 knot 1 526  
210 0 0 6 206 526 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_v_knot
//       Access: Published
//  Description: Returns the value of the nth knot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  1 i 1 522  
211 0 0 4 207 529 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::normalize_v_knots
//       Access: Published
//  Description: Normalizes the knot sequence so that the parametric
//               range of the surface in the U direction is 0 .. 1.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
212 0 0 6 208 522 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_u_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the U direction.  This is based on
//               the knot vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
213 0 0 6 209 522 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::get_num_v_segments
//       Access: Published
//  Description: Returns the number of piecewise continuous segments
//               in the surface in the V direction.  This is based on
//               the knot vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 588  
214 0 0 7 210 586 0 0 461 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::evaluate
//       Access: Published
//  Description: Returns a NurbsSurfaceResult object that represents the
//               result of applying the knots to all of the current
//               values of the vertices, transformed into the
//               indicated coordinate space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  6 rel_to 1 578  
215 0 0 4 211 529 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: NurbsSurfaceEvaluator::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 588  3 out 1 536  
216 0 0 7 213 590 490 0 217 ////////////////////////////////////////////////////////////////////
//     Function: RopeNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 558  
217 0 0 4 217 529 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: set_curve
//       Access: Published
//  Description: Sets the particular curve represented by the
//               RopeNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  5 curve 1 575  
218 0 0 7 218 575 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: get_curve
//       Access: Published
//  Description: Returns the curve represented by the RopeNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
219 0 0 4 219 529 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: set_render_mode
//       Access: Published
//  Description: Specifies the method used to render the rope.  The
//               simplest is RM_thread, which just draws a one-pixel
//               line segment.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  11 render_mode 1 518  
220 0 0 6 220 518 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: get_render_mode
//       Access: Published
//  Description: Returns the method used to render the rope.  See
//               set_render_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
221 0 0 4 221 529 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: set_uv_mode
//       Access: Published
//  Description: Specifies the algorithm to use to generate UV's for
//               the rope.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  7 uv_mode 1 519  
222 0 0 6 222 519 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: get_uv_mode
//       Access: Published
//  Description: Returns the algorithm to use to generate UV's for the
//               rope.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
223 0 0 4 223 529 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: set_uv_direction
//       Access: Published
//  Description: Specify true to vary the U coordinate down the length
//               of the rope, or false to vary the V coordinate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  10 u_dominant 1 525  
224 0 0 6 224 525 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: get_uv_direction
//       Access: Published
//  Description: Returns true if the rope runs down the U coordinate
//               of the texture, or false if it runs down the V
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
225 0 0 4 225 529 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: set_uv_scale
//       Access: Published
//  Description: Specifies an additional scaling factor to apply to
//               generated UV's along the rope.  This scale factor is
//               applied in whichever direction is along the rope, as
//               specified by set_uv_direction().
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  5 scale 1 526  
226 0 0 6 226 526 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: get_uv_scale
//       Access: Published
//  Description: Returns the scaling factor to apply to generated UV's
//               for the rope.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
227 0 0 4 227 529 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: set_normal_mode
//       Access: Published
//  Description: Specifies the kind of normals to generate for the
//               rope.  This is only applicable when the RenderMode is
//               set to RM_tube; in the other render modes, normals
//               are never generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  11 normal_mode 1 520  
228 0 0 6 228 520 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: get_normal_mode
//       Access: Published
//  Description: Returns the kind of normals to generate for the rope.
//               This is only applicable when the RenderMode is set to
//               RM_tube.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
229 0 0 4 229 529 0 0 723 ////////////////////////////////////////////////////////////////////
//     Function: set_tube_up
//       Access: Published
//  Description: Specifies a normal vector, generally perpendicular to
//               the main axis of the starting point of the curve,
//               that controls the "top" of the curve, when RenderMode
//               is RM_tube.  This is used to orient the vertices that
//               make up the tube.  If this vector is too nearly
//               parallel with the starting direction of the curve,
//               there may be a tendency for the whole tube to
//               gimble-lock around its primary axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  7 tube_up 1 593  
230 0 0 6 230 593 0 0 358 ////////////////////////////////////////////////////////////////////
//     Function: get_tube_up
//       Access: Published
//  Description: Returns the normal vector used to control the "top"
//               of the curve, when RenderMode is RM_tube.  See
//               set_tube_up().
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
231 0 0 4 231 529 0 0 667 ////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Published
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions n + 0, n + 1, n + 2, n + 3,
//               respectively, of the extended vertex values, where n
//               is the value returned by
//               get_vertex_color_dimension().  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  4 flag 1 525  
232 0 0 6 232 525 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Published
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
233 0 0 6 233 522 0 0 506 ////////////////////////////////////////////////////////////////////
//     Function: get_vertex_color_dimension
//       Access: Published, Static
//  Description: Returns the numeric extended dimension in which the
//               color components should be found.  See
//               NurbsCurveEvaluator::set_extended_vertex().
//
//               The color components will be expected at (n, n + 1, n
//               + 2, n + 3).
//////////////////////////////////////////////////////////////////// 0 
234 0 0 4 234 529 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: set_num_subdiv
//       Access: Published
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the curve.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  10 num_subdiv 1 522  
235 0 0 6 235 522 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: get_num_subdiv
//       Access: Published
//  Description: Returns the number of subdivisions per cubic segment
//               to draw.  See set_num_subdiv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
236 0 0 4 236 529 0 0 711 ////////////////////////////////////////////////////////////////////
//     Function: set_num_slices
//       Access: Published
//  Description: Specifies the number of radial subdivisions to make
//               if RenderMode is RM_tube.  It is ignored in the other
//               render modes.
//
//               Increasing this number increases the roundness of a
//               cross-section of the tube.  The minimum value for a
//               dimensional tube is 3; setting it to 2 will get you a
//               thin piece of tape (which is similar to RM_billboard,
//               except it won't rotate to face the camera).
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  10 num_slices 1 522  
237 0 0 6 237 522 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: get_num_slices
//       Access: Published
//  Description: Returns the number of radial subdivisions to make if
//               RenderMode is RM_tube.  It is ignored in the other
//               render modes.  See set_num_slices().
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
238 0 0 4 238 529 0 0 752 ////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_thickness
//       Access: Published
//  Description: Sets the "use vertex thickness" flag.  When this is true,
//               the vertex thickness is assumed to be stored as the
//               dimension get_vertex_thickness_dimension(), of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
//
//               In this mode, the overall thickness is also applied
//               as a scale to the vertex thickness.  Not all render
//               modes support vertex thickness.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  4 flag 1 525  
239 0 0 6 239 525 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_thickness
//       Access: Published
//  Description: Returns the "use vertex thickness" flag.  See
//               set_use_vertex_thickness().
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
240 0 0 6 240 522 0 0 409 ////////////////////////////////////////////////////////////////////
//     Function: get_vertex_thickness_dimension
//       Access: Published, Static
//  Description: Returns the numeric extended dimension in which the
//               thickness component should be found.  See
//               NurbsCurveEvaluator::set_extended_vertex().
//////////////////////////////////////////////////////////////////// 0 
241 0 0 4 241 529 0 0 497 ////////////////////////////////////////////////////////////////////
//     Function: set_thickness
//       Access: Published
//  Description: Specifies the thickness of the rope, in pixels or in
//               spatial units, depending on the render mode.  See
//               set_render_mode().
//
//               The thickness may also be specified on a per-vertex
//               basis.  See set_use_vertex_thickness().
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  9 thickness 1 526  
242 0 0 6 242 526 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: get_thickness
//       Access: Published
//  Description: Returns the thickness of the rope.  See
//               set_thickness().
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
243 0 0 4 243 529 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: set_matrix
//       Access: Published
//  Description: Specifies an optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  6 matrix 1 582  
244 0 0 4 244 529 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: clear_matrix
//       Access: Published
//  Description: Resets the node's matrix to identity.  See
//               set_matrix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 590  
245 0 0 6 245 525 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: has_matrix
//       Access: Published
//  Description: Returns true if the node has a matrix set, false
//               otherwise.  See set_matrix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
246 0 0 6 246 582 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: get_matrix
//       Access: Published
//  Description: Returns the optional matrix which is used to
//               transform each control vertex after it has been
//               transformed into the RopeNode's coordinate space, but
//               before the polygon vertices are generated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
247 0 0 4 247 529 0 0 461 ////////////////////////////////////////////////////////////////////
//     Function: RopeNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the curve has changed
//               properties outside of this node's knowledge.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  6 rel_to 1 578  
248 0 0 7 248 541 0 0 0 0 
249 0 0 7 251 597 502 0 218 ////////////////////////////////////////////////////////////////////
//     Function: SheetNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 558  
250 0 0 4 252 529 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: set_surface
//       Access: Public
//  Description: Sets the particular surface represented by the
//               SheetNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  7 surface 1 587  
251 0 0 7 253 587 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: get_surface
//       Access: Public
//  Description: Returns the surface represented by the SheetNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 598  
252 0 0 4 254 529 0 0 551 ////////////////////////////////////////////////////////////////////
//     Function: set_use_vertex_color
//       Access: Public
//  Description: Sets the "use vertex color" flag.  When this is true,
//               the R, G, B, A vertex color is assumed to be stored
//               as the dimensions 0, 1, 2, 3, respectively, of the
//               extended vertex values.  Use
//               NurbsCurveEvaluator::set_extended_vertex() to set
//               these values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  4 flag 1 525  
253 0 0 6 255 525 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: get_use_vertex_color
//       Access: Public
//  Description: Returns the "use vertex color" flag.  See
//               set_use_vertex_color().
//////////////////////////////////////////////////////////////////// 1 4 this 3 598  
254 0 0 4 256 529 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: set_num_u_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the U
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  12 num_u_subdiv 1 522  
255 0 0 6 257 522 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: get_num_u_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the U direction.  See set_num_u_subdiv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 598  
256 0 0 4 258 529 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: set_num_v_subdiv
//       Access: Public
//  Description: Specifies the number of subdivisions per cubic
//               segment (that is, per unique knot value) to draw in a
//               fixed uniform tesselation of the surface in the V
//               direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  12 num_v_subdiv 1 522  
257 0 0 6 259 522 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: get_num_v_subdiv
//       Access: Public
//  Description: Returns the number of subdivisions per cubic segment
//               to draw in the V direction.  See set_num_v_subdiv().
//////////////////////////////////////////////////////////////////// 1 4 this 3 598  
258 0 0 4 260 529 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: SheetNode::reset_bound
//       Access: Published
//  Description: Recomputes the bounding volume.  This is normally
//               called automatically, but it must occasionally be
//               called explicitly when the surface has changed
//               properties outside of this node's knowledge.
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  6 rel_to 1 578  
259 0 0 7 261 541 0 0 0 0 
97
503 15 ParametricCurve 0 75777 15 ParametricCurve 15 ParametricCurve 0 0 0 0 0 0 19 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 0 0 1 0 504 0 0 0 0 370
////////////////////////////////////////////////////////////////////
//       Class : ParametricCurve
// Description : A virtual base class for parametric curves.
//               This encapsulates all curves in 3-d space defined
//               for a single parameter t in the range [0,get_max_t()].
////////////////////////////////////////////////////////////////////

504 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 608 609 610 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

505 13 CubicCurveseg 0 75777 13 CubicCurveseg 13 CubicCurveseg 0 0 0 0 0 0 1 279 0 0 1 0 503 0 0 0 0 1386
////////////////////////////////////////////////////////////////////
//       Class : CubicCurveseg
// Description : A CubicCurveseg is any curve that can be completely
//               described by four 4-valued basis vectors, one for
//               each dimension in three-space, and one for the
//               homogeneous coordinate.  This includes Beziers,
//               Hermites, and NURBS.
//
//               This class encapsulates a single curve segment of the
//               cubic curve.  Normally, when we think of Bezier and
//               Hermite curves, we think of a piecewise collection of
//               such segments.
//
//               Although this class includes methods such as
//               hermite_basis() and nurbs_basis(), to generate a
//               Hermite and NURBS curve segment, respectively, only
//               the final basis vectors are stored: the product of
//               the basis matrix of the corresponding curve type, and
//               its geometry vectors.  This is the minimum
//               information needed to evaluate the curve.  However,
//               the individual CV's that were used to compute these
//               basis vectors are not retained; this might be handled
//               in a subclass (for instance, HermiteCurve).
////////////////////////////////////////////////////////////////////

506 25 ParametricCurveCollection 0 75777 25 ParametricCurveCollection 25 ParametricCurveCollection 0 0 0 1 280 0 0 28 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 2 611 612 0 1 0 507 0 0 0 0 620
////////////////////////////////////////////////////////////////////
//       Class : ParametricCurveCollection
// Description : This is a set of zero or more ParametricCurves, which
//               may or may not be related.  If they are related, the
//               set should contain no more than one XYZ curve, no
//               more than one HPR curve, and zero or more Timewarp
//               curves, which can then be evaluated as a unit to
//               return a single transformation matrix for a given
//               unit of time.
////////////////////////////////////////////////////////////////////

507 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

508 11 CurveFitter 0 26625 11 CurveFitter 11 CurveFitter 0 0 0 1 309 310 0 20 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 0 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : CurveFitter
// Description :
////////////////////////////////////////////////////////////////////

509 14 PiecewiseCurve 0 75777 14 PiecewiseCurve 14 PiecewiseCurve 0 0 0 1 331 0 0 1 332 0 0 1 0 503 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PiecewiseCurve
// Description : A PiecewiseCurve is a curve made up of several curve
//               segments, connected in a head-to-tail fashion.  The
//               length of each curve segment in parametric space is
//               definable.
////////////////////////////////////////////////////////////////////

510 12 HermiteCurve 0 75777 12 HermiteCurve 12 HermiteCurve 0 0 0 1 333 0 0 19 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 0 0 1 0 509 0 0 0 0 700
////////////////////////////////////////////////////////////////////
//       Class : HermiteCurve
// Description : A parametric curve defined by a sequence of control
//               vertices, each with an in and out tangent.
//
//               This class is actually implemented as a
//               PiecewiseCurve made up of several CubicCurvesegs,
//               each of which is created using the hermite_basis()
//               method.  The HermiteCurve class itself keeps its own
//               list of the CV's that are used to define the curve
//               (since the CubicCurveseg class doesn't retain these).
////////////////////////////////////////////////////////////////////

511 19 NurbsCurveInterface 0 26625 19 NurbsCurveInterface 19 NurbsCurveInterface 0 0 0 0 353 0 18 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 2 613 614 0 0 0 0 454
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveInterface
// Description : This abstract class defines the interface only for a
//               Nurbs-style curve, with knots and coordinates in
//               homogeneous space.
//
//               The NurbsCurve class inherits both from this and from
//               ParametricCurve.
////////////////////////////////////////////////////////////////////

512 10 NurbsCurve 0 26625 10 NurbsCurve 10 NurbsCurve 0 0 0 1 376 377 0 1 378 0 0 2 3 509 372 373 3 511 374 375 0 0 1243
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurve
// Description : A Nonuniform Rational B-Spline.
//
//               This class is actually implemented as a
//               PiecewiseCurve made up of several CubicCurvesegs,
//               each of which is created using the nurbs_basis()
//               method.  The list of CV's and knots is kept here,
//               within the NurbsCurve class.
//
//               This class is the original Panda-native
//               implementation of a NURBS curve.  It is typedeffed as
//               "NurbsCurve" and performs all NURBS curve functions
//               if we do not have the NURBS++ library available.
//
//               However, if we *do* have the NURBS++ library, another
//               class exists, the NurbsPPCurve, which is a wrapper
//               around that library and provides some additional
//               functionality.  In that case, the other class is
//               typedeffed to "NurbsCurve" instead of this one, and
//               performs most of the NURBS curve functions.  This
//               class then becomes vestigial.
////////////////////////////////////////////////////////////////////

513 16 NurbsCurveResult 0 75777 16 NurbsCurveResult 16 NurbsCurveResult 0 0 0 0 0 0 16 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 2 615 616 0 1 0 507 0 0 0 0 748
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveResult
// Description : The result of a NurbsCurveEvaluator.  This object
//               represents a curve in a particular coordinate space.
//               It can return the point and/or tangent to the curve
//               at any point.
//
//               This is not related to NurbsCurve, CubicCurveseg or
//               any of the ParametricCurve-derived objects in this
//               module.  It is a completely parallel implementation
//               of NURBS curves, and will probably eventually replace
//               the whole ParametricCurve class hierarchy.
////////////////////////////////////////////////////////////////////

514 19 NurbsCurveEvaluator 0 75777 19 NurbsCurveEvaluator 19 NurbsCurveEvaluator 0 0 0 1 395 0 0 18 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 2 617 618 0 1 0 507 0 0 0 0 808
////////////////////////////////////////////////////////////////////
//       Class : NurbsCurveEvaluator
// Description : This class is an abstraction for evaluating NURBS
//               curves.  It accepts an array of vertices, each of
//               which may be in a different coordinate space (as
//               defined by a NodePath), as well as an optional knot
//               vector.
//
//               This is not related to NurbsCurve, CubicCurveseg or
//               any of the ParametricCurve-derived objects in this
//               module.  It is a completely parallel implementation
//               of NURBS curves, and will probably eventually replace
//               the whole ParametricCurve class hierarchy.
////////////////////////////////////////////////////////////////////

515 18 NurbsSurfaceResult 0 75777 18 NurbsSurfaceResult 18 NurbsSurfaceResult 0 0 0 0 0 0 16 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 0 0 1 0 507 0 0 0 0 415
////////////////////////////////////////////////////////////////////
//       Class : NurbsSurfaceResult
// Description : The result of a NurbsSurfaceEvaluator.  This object
//               represents a surface in a particular coordinate space.
//               It can return the point and/or normal to the surface
//               at any point.
////////////////////////////////////////////////////////////////////

516 21 NurbsSurfaceEvaluator 0 75777 21 NurbsSurfaceEvaluator 21 NurbsSurfaceEvaluator 0 0 0 1 430 0 0 26 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 2 619 620 0 1 0 507 0 0 0 0 472
////////////////////////////////////////////////////////////////////
//       Class : NurbsSurfaceEvaluator
// Description : This class is an abstraction for evaluating NURBS
//               surfaces.  It accepts an array of vertices, each of
//               which may be in a different coordinate space (as
//               defined by a NodePath), as well as an optional knot
//               vector.
////////////////////////////////////////////////////////////////////

517 8 RopeNode 0 141313 8 RopeNode 8 RopeNode 0 0 0 1 457 490 0 32 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 0 0 1 0 504 0 0 0 3 518 519 520 702
////////////////////////////////////////////////////////////////////
//       Class : RopeNode
// Description : This class draws a visible representation of the
//               NURBS curve stored in its NurbsCurveEvaluator.  It
//               automatically recomputes the curve every frame.
//
//               This is not related to NurbsCurve, CubicCurveseg or
//               any of the ParametricCurve-derived objects in this
//               module.  It is a completely parallel implementation
//               of NURBS curves, and will probably eventually replace
//               the whole ParametricCurve class hierarchy.
////////////////////////////////////////////////////////////////////

518 10 RenderMode 0 794624 20 RopeNode::RenderMode 20 RopeNode::RenderMode 517 0 0 0 0 0 0 0 0 0 4 9 RM_thread 19 RopeNode::RM_thread 59
// Render the rope as a one-pixel thread using a linestrip.
0 7 RM_tape 17 RopeNode::RM_tape 93
// Render the rope as a triangle strip oriented to be
// perpendicular to the tube_up vector.
1 12 RM_billboard 22 RopeNode::RM_billboard 90
// Render the rope as a triangle strip oriented to be
// perpendicular to the view vector.
2 7 RM_tube 17 RopeNode::RM_tube 62
// Render the rope as a hollow tube extruded along its length.
3 0 0

519 6 UVMode 0 794624 16 RopeNode::UVMode 16 RopeNode::UVMode 517 0 0 0 0 0 0 0 0 0 4 7 UV_none 17 RopeNode::UV_none 39
// Don't generate UV's along the curve.
0 13 UV_parametric 23 RopeNode::UV_parametric 72
// Generate UV's based on the parametric coordinates along the
// curve.
1 11 UV_distance 21 RopeNode::UV_distance 143
// Generate UV's in proportion to spatial distance along the
// curve, by using the distance function to compute the length of
// each segment.
2 12 UV_distance2 22 RopeNode::UV_distance2 311
// As above, but don't bother to take the square root of each
// segment.  The distance is then in proportion to the
// sum-of-squares of the segments along the rope.  If the segments
// are similar in length, this approximates the proportion of
// UV_distance while avoiding hundreds of square root operations.
3 0 0

520 10 NormalMode 0 794624 20 RopeNode::NormalMode 20 RopeNode::NormalMode 517 0 0 0 0 0 0 0 0 0 2 7 NM_none 17 RopeNode::NM_none 26
// Don't generate normals.
0 9 NM_vertex 19 RopeNode::NM_vertex 43
// Generate vertex (smooth-shaded) normals.
1 0 0

521 9 SheetNode 0 141313 9 SheetNode 9 SheetNode 0 0 0 1 491 502 0 10 492 493 494 495 496 497 498 499 500 501 0 0 1 0 504 0 0 0 0 736
////////////////////////////////////////////////////////////////////
//       Class : SheetNode
// Description : This class draws a visible representation of the
//               NURBS surface stored in its NurbsSurfaceEvaluator.  It
//               automatically recomputes the surface every frame.
//
//               This is not related to NurbsSurface, CubicSurfaceseg
//               or any of the ParametricSurface-derived objects in
//               this module.  It is a completely parallel
//               implementation of NURBS surfaces, and will probably
//               eventually replace the whole ParametricSurface class
//               hierarchy.
////////////////////////////////////////////////////////////////////

522 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

523 23 ParametricCurve const * 0 8576 23 ParametricCurve const * 23 ParametricCurve const * 0 0 524 0 0 0 0 0 0 0 0 0 0

524 21 ParametricCurve const 0 8832 21 ParametricCurve const 21 ParametricCurve const 0 0 503 0 0 0 0 0 0 0 0 0 0

525 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

526 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 527 0 0 0 0 0 0 0 0 0 0

527 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

528 17 ParametricCurve * 0 8576 17 ParametricCurve * 17 ParametricCurve * 0 0 503 0 0 0 0 0 0 0 0 0 0

529 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

530 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 531 0 0 0 0 0 0 0 0 0 0

531 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 532 0 0 0 0 0 0 0 0 0 0

532 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

533 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 534 0 0 0 0 0 0 0 0 0 0

534 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

535 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

536 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 537 0 0 0 0 0 0 0 0 0 0

537 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

538 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 539 0 0 0 0 0 0 0 0 0 0

539 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 534 0 0 0 0 0 0 0 0 0 0

540 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

541 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 540 0 0 0 0 0 0 0 0 0 0

542 27 ParametricCurveCollection * 0 8576 27 ParametricCurveCollection * 27 ParametricCurveCollection * 0 0 506 0 0 0 0 0 0 0 0 0 0

543 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 504 0 0 0 0 0 0 0 0 0 0

544 33 ParametricCurveCollection const * 0 8576 33 ParametricCurveCollection const * 33 ParametricCurveCollection const * 0 0 545 0 0 0 0 0 0 0 0 0 0

545 31 ParametricCurveCollection const 0 8832 31 ParametricCurveCollection const 31 ParametricCurveCollection const 0 0 506 0 0 0 0 0 0 0 0 0 0

546 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 547 0 0 0 0 0 0 0 0 0 0

547 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 548 0 0 0 0 0 0 0 0 0 0

548 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 621 622 623 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

549 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 550 0 0 0 0 0 0 0 0 0 0

550 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 531 0 0 0 0 0 0 0 0 0 0

551 13 CurveFitter * 0 8576 13 CurveFitter * 13 CurveFitter * 0 0 508 0 0 0 0 0 0 0 0 0 0

552 19 CurveFitter const * 0 8576 19 CurveFitter const * 19 CurveFitter const * 0 0 553 0 0 0 0 0 0 0 0 0 0

553 17 CurveFitter const 0 8832 17 CurveFitter const 17 CurveFitter const 0 0 508 0 0 0 0 0 0 0 0 0 0

554 16 PiecewiseCurve * 0 8576 16 PiecewiseCurve * 16 PiecewiseCurve * 0 0 509 0 0 0 0 0 0 0 0 0 0

555 14 HermiteCurve * 0 8576 14 HermiteCurve * 14 HermiteCurve * 0 0 510 0 0 0 0 0 0 0 0 0 0

556 20 HermiteCurve const * 0 8576 20 HermiteCurve const * 20 HermiteCurve const * 0 0 557 0 0 0 0 0 0 0 0 0 0

557 18 HermiteCurve const 0 8832 18 HermiteCurve const 18 HermiteCurve const 0 0 510 0 0 0 0 0 0 0 0 0 0

558 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

559 21 NurbsCurveInterface * 0 8576 21 NurbsCurveInterface * 21 NurbsCurveInterface * 0 0 511 0 0 0 0 0 0 0 0 0 0

560 27 NurbsCurveInterface const * 0 8576 27 NurbsCurveInterface const * 27 NurbsCurveInterface const * 0 0 561 0 0 0 0 0 0 0 0 0 0

561 25 NurbsCurveInterface const 0 8832 25 NurbsCurveInterface const 25 NurbsCurveInterface const 0 0 511 0 0 0 0 0 0 0 0 0 0

562 17 LVecBase4 const * 0 8576 17 LVecBase4 const * 17 LVecBase4 const * 0 0 563 0 0 0 0 0 0 0 0 0 0

563 15 LVecBase4 const 0 8832 15 LVecBase4 const 15 LVecBase4 const 0 0 564 0 0 0 0 0 0 0 0 0 0

564 9 LVecBase4 0 2105344 9 LVecBase4 9 LVecBase4 0 0 565 0 0 0 0 0 0 0 0 0 0

565 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

566 11 LVecBase4 * 0 8576 11 LVecBase4 * 11 LVecBase4 * 0 0 564 0 0 0 0 0 0 0 0 0 0

567 12 NurbsCurve * 0 8576 12 NurbsCurve * 12 NurbsCurve * 0 0 512 0 0 0 0 0 0 0 0 0 0

568 24 NurbsCurveResult const * 0 8576 24 NurbsCurveResult const * 24 NurbsCurveResult const * 0 0 569 0 0 0 0 0 0 0 0 0 0

569 22 NurbsCurveResult const 0 8832 22 NurbsCurveResult const 22 NurbsCurveResult const 0 0 513 0 0 0 0 0 0 0 0 0 0

570 18 NurbsCurveResult * 0 8576 18 NurbsCurveResult * 18 NurbsCurveResult * 0 0 513 0 0 0 0 0 0 0 0 0 0

571 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 572 0 0 0 0 0 0 0 0 0 0

572 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 573 0 0 0 0 0 0 0 0 0 0

573 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 574 0 0 0 0 0 0 0 0 0 0

574 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

575 21 NurbsCurveEvaluator * 0 8576 21 NurbsCurveEvaluator * 21 NurbsCurveEvaluator * 0 0 514 0 0 0 0 0 0 0 0 0 0

576 27 NurbsCurveEvaluator const * 0 8576 27 NurbsCurveEvaluator const * 27 NurbsCurveEvaluator const * 0 0 577 0 0 0 0 0 0 0 0 0 0

577 25 NurbsCurveEvaluator const 0 8832 25 NurbsCurveEvaluator const 25 NurbsCurveEvaluator const 0 0 514 0 0 0 0 0 0 0 0 0 0

578 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 579 0 0 0 0 0 0 0 0 0 0

579 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 580 0 0 0 0 0 0 0 0 0 0

580 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 624 625 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

581 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 580 0 0 0 0 0 0 0 0 0 0

582 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 583 0 0 0 0 0 0 0 0 0 0

583 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 547 0 0 0 0 0 0 0 0 0 0

584 26 NurbsSurfaceResult const * 0 8576 26 NurbsSurfaceResult const * 26 NurbsSurfaceResult const * 0 0 585 0 0 0 0 0 0 0 0 0 0

585 24 NurbsSurfaceResult const 0 8832 24 NurbsSurfaceResult const 24 NurbsSurfaceResult const 0 0 515 0 0 0 0 0 0 0 0 0 0

586 20 NurbsSurfaceResult * 0 8576 20 NurbsSurfaceResult * 20 NurbsSurfaceResult * 0 0 515 0 0 0 0 0 0 0 0 0 0

587 23 NurbsSurfaceEvaluator * 0 8576 23 NurbsSurfaceEvaluator * 23 NurbsSurfaceEvaluator * 0 0 516 0 0 0 0 0 0 0 0 0 0

588 29 NurbsSurfaceEvaluator const * 0 8576 29 NurbsSurfaceEvaluator const * 29 NurbsSurfaceEvaluator const * 0 0 589 0 0 0 0 0 0 0 0 0 0

589 27 NurbsSurfaceEvaluator const 0 8832 27 NurbsSurfaceEvaluator const 27 NurbsSurfaceEvaluator const 0 0 516 0 0 0 0 0 0 0 0 0 0

590 10 RopeNode * 0 8576 10 RopeNode * 10 RopeNode * 0 0 517 0 0 0 0 0 0 0 0 0 0

591 16 RopeNode const * 0 8576 16 RopeNode const * 16 RopeNode const * 0 0 592 0 0 0 0 0 0 0 0 0 0

592 14 RopeNode const 0 8832 14 RopeNode const 14 RopeNode const 0 0 517 0 0 0 0 0 0 0 0 0 0

593 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 594 0 0 0 0 0 0 0 0 0 0

594 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 595 0 0 0 0 0 0 0 0 0 0

595 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 596 0 0 0 0 0 0 0 0 0 0

596 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

597 11 SheetNode * 0 8576 11 SheetNode * 11 SheetNode * 0 0 521 0 0 0 0 0 0 0 0 0 0

598 17 SheetNode const * 0 8576 17 SheetNode const * 17 SheetNode const * 0 0 599 0 0 0 0 0 0 0 0 0 0

599 15 SheetNode const 0 8832 15 SheetNode const 15 SheetNode const 0 0 521 0 0 0 0 0 0 0 0 0 0

8
600 6 HC_CUT 0 5 1 522 0 1 1 
601 7 HC_FREE 0 5 2 522 0 1 2 
602 5 HC_G1 0 5 3 522 0 1 3 
603 9 HC_SMOOTH 0 5 4 522 0 1 4 
604 7 PCT_HPR 0 5 2 522 0 1 2 
605 8 PCT_NONE 0 5 0 522 0 1 0 
606 5 PCT_T 0 5 3 522 0 1 3 
607 7 PCT_XYZ 0 5 1 522 0 1 1 
0
18
608 0 0 2 11 get_parents 15 get_num_parents 10 get_parent 
609 0 0 2 12 get_children 16 get_num_children 9 get_child 
610 0 0 2 11 get_stashed 15 get_num_stashed 11 get_stashed 
611 0 0 24 10 get_curves 14 get_num_curves 9 get_curve 
612 0 0 24 19 get_timewarp_curves 17 get_num_timewarps 18 get_timewarp_curve 
613 0 0 102 7 get_cvs 11 get_num_cvs 6 get_cv 
614 0 0 102 9 get_knots 13 get_num_knots 8 get_knot 
615 0 0 130 13 get_sample_ts 15 get_num_samples 12 get_sample_t 
616 0 0 130 17 get_sample_points 15 get_num_samples 17 get_sample_points 
617 0 0 147 12 get_vertices 16 get_num_vertices 10 get_vertex 
618 0 0 147 9 get_knots 13 get_num_knots 8 get_knot 
619 0 0 184 11 get_u_knots 15 get_num_u_knots 10 get_u_knot 
620 0 0 184 11 get_v_knots 15 get_num_v_knots 10 get_v_knot 
621 0 0 343 8 get_rows 4 size 7 get_row 
622 0 0 343 8 get_cols 4 size 7 get_col 
623 0 0 343 9 get_row3s 4 size 8 get_row3 
624 0 0 497 9 get_nodes 13 get_num_nodes 8 get_node 
625 0 0 497 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
