1448428313
2 3
11 libp3vision 4 nRMq 14 panda3d.vision 
8
9 15 get_num_options 0 4 17 28 WebcamVideo::get_num_options 0 1 1 465
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_num_options
//       Access: Public, Static
//  Description: Returns the number of webcam options.  An "option"
//               consists of a device plus a set of configuration
//               parameters.  For example, "Creative Webcam Live at
//               640x480, 30 fps" is an option.
////////////////////////////////////////////////////////////////////
46
static int WebcamVideo::get_num_options(void);

10 10 get_option 0 4 17 23 WebcamVideo::get_option 0 1 2 258
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_option
//       Access: Public, Static
//  Description: Returns the nth webcam option.
////////////////////////////////////////////////////////////////////
63
static PointerTo< WebcamVideo > WebcamVideo::get_option(int n);

11 10 get_size_x 0 4 17 23 WebcamVideo::get_size_x 0 1 3 251
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_size_x
//       Access: Published
//  Description: Returns the camera's size_x.
////////////////////////////////////////////////////////////////////
47
inline int WebcamVideo::get_size_x(void) const;

12 10 get_size_y 0 4 17 23 WebcamVideo::get_size_y 0 1 4 251
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_size_y
//       Access: Published
//  Description: Returns the camera's size_y.
////////////////////////////////////////////////////////////////////
47
inline int WebcamVideo::get_size_y(void) const;

13 7 get_fps 0 4 17 20 WebcamVideo::get_fps 0 1 5 382
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_fps
//       Access: Published
//  Description: Returns the camera's framerate.  This
//               is a maximum theoretical: the actual performance
//               will depend on the speed of the hardware.
////////////////////////////////////////////////////////////////////
47
inline double WebcamVideo::get_fps(void) const;

14 16 get_pixel_format 0 4 17 29 WebcamVideo::get_pixel_format 0 1 6 308
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_pixel_format
//       Access: Published
//  Description: Returns the camera's pixel format, as a FourCC code,
//               if known.
////////////////////////////////////////////////////////////////////
63
inline string const &WebcamVideo::get_pixel_format(void) const;

15 6 output 0 4 17 19 WebcamVideo::output 0 1 7 331
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::output
//       Access: Public
//  Description: Outputs the WebcamVideo.  This function simply
//               writes the name, size and FPS to the output stream.
////////////////////////////////////////////////////////////////////
52
inline void WebcamVideo::output(ostream &out) const;

16 14 get_class_type 0 4 17 27 WebcamVideo::get_class_type 0 1 8 0
52
static TypeHandle WebcamVideo::get_class_type(void);

8
1 0 0 6 3 19 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_num_options
//       Access: Public, Static
//  Description: Returns the number of webcam options.  An "option"
//               consists of a device plus a set of configuration
//               parameters.  For example, "Creative Webcam Live at
//               640x480, 30 fps" is an option.
//////////////////////////////////////////////////////////////////// 0 
2 0 0 7 4 20 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_option
//       Access: Public, Static
//  Description: Returns the nth webcam option.
//////////////////////////////////////////////////////////////////// 1 1 n 1 19  
3 0 0 6 5 19 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_size_x
//       Access: Published
//  Description: Returns the camera's size_x.
//////////////////////////////////////////////////////////////////// 1 4 this 3 21  
4 0 0 6 6 19 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_size_y
//       Access: Published
//  Description: Returns the camera's size_y.
//////////////////////////////////////////////////////////////////// 1 4 this 3 21  
5 0 0 6 7 23 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_fps
//       Access: Published
//  Description: Returns the camera's framerate.  This
//               is a maximum theoretical: the actual performance
//               will depend on the speed of the hardware.
//////////////////////////////////////////////////////////////////// 1 4 this 3 21  
6 0 0 6 8 24 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_pixel_format
//       Access: Published
//  Description: Returns the camera's pixel format, as a FourCC code,
//               if known.
//////////////////////////////////////////////////////////////////// 1 4 this 3 21  
7 0 0 4 9 27 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::output
//       Access: Public
//  Description: Outputs the WebcamVideo.  This function simply
//               writes the name, size and FPS to the output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 21  3 out 1 25  
8 0 0 7 10 29 0 0 0 0 
13
17 11 WebcamVideo 0 75777 11 WebcamVideo 11 WebcamVideo 0 0 0 0 0 0 8 9 10 11 12 13 14 15 16 1 30 0 1 0 18 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : WebcamVideo
// Description : Allows you to open a webcam or other video capture
//               device as a video stream.
////////////////////////////////////////////////////////////////////

18 10 MovieVideo 0 2049 10 MovieVideo 10 MovieVideo 0 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : MovieVideo
// Description : A MovieVideo is actually any source that provides
//               a sequence of video frames.  That could include an
//               AVI file, a digital camera, or an internet TV station.
//
//               The difference between a MovieVideo and a
//               MovieVideoCursor is like the difference between a
//               filename and a file handle.  The MovieVideo just
//               indicates a particular movie.  The MovieVideoCursor
//               is what allows access.
////////////////////////////////////////////////////////////////////

19 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

20 13 WebcamVideo * 0 8576 13 WebcamVideo * 13 WebcamVideo * 0 0 17 0 0 0 0 0 0 0 0 0 0

21 19 WebcamVideo const * 0 8576 19 WebcamVideo const * 19 WebcamVideo const * 0 0 22 0 0 0 0 0 0 0 0 0 0

22 17 WebcamVideo const 0 8832 17 WebcamVideo const 17 WebcamVideo const 0 0 17 0 0 0 0 0 0 0 0 0 0

23 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

24 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

25 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 26 0 0 0 0 0 0 0 0 0 0

26 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

27 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

28 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

29 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 28 0 0 0 0 0 0 0 0 0 0

0
0
1
30 0 0 1 11 get_options 15 get_num_options 10 get_option 
